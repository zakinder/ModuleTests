
<html>
<head>
  <meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
  <title>Questa Coverage Report</title>
  <link rel="StyleSheet" media="screen" href="../css/hdl2html.css"/>
</head>
<body id="hdl2html">
  <tt>
<pre>
<a name="1"><q-n>     1  </q-n></a>`<q-i>include</q-w> <q-l>"uvm_macros.svh"</q-l>
<a name="2"><q-n>     2  </q-n></a><q-w>package</q-w> socTest_pkg;
<a name="3"><q-n>     3  </q-n></a><q-w>import</q-w> uvm_pkg::*;
<a name="4"><q-n>     4  </q-n></a><q-m>//----------------------------------------------------------------------------------//</q-m>
<a name="5"><q-n>     5  </q-n></a><q-m>// UVM_CONFIGURATION</q-m>
<a name="6"><q-n>     6  </q-n></a><q-m>//----------------------------------------------------------------------------------//</q-m>
<a name="7"><q-n>     7  </q-n></a>
<a name="8"><q-n>     8  </q-n></a><q-m>// UVM_OBJECT : TEMPLATE_CONFIGURATION [TEMPLATE]</q-m>
<a name="9"><q-n>     9  </q-n></a><q-w>class</q-w> template_configuration <q-w>extends</q-w> uvm_object;
<a name="10"><q-n>     10  </q-n></a>    `uvm_object_utils(template_configuration)
<a name="11"><q-n>     11  </q-n></a>    <q-w>function</q-w> <q-w>new</q-w>(<q-w>string</q-w> name = <q-l>""</q-l>);
<a name="12"><q-n>     12  </q-n></a>        <q-w>super</q-w>.<q-w>new</q-w>(name);
<a name="13"><q-n>     13  </q-n></a>    <q-w>endfunction</q-w>: <q-w>new</q-w>
<a name="14"><q-n>     14  </q-n></a><q-w>endclass</q-w>: template_configuration
<a name="15"><q-n>     15  </q-n></a><q-m>// UVM_OBJECT : AXILITE_CONFIGURATION [AXILITE]</q-m>
<a name="16"><q-n>     16  </q-n></a><q-w>class</q-w> axiLite_configuration <q-w>extends</q-w> uvm_object;
<a name="17"><q-n>     17  </q-n></a>    `uvm_object_utils(axiLite_configuration)
<a name="18"><q-n>     18  </q-n></a>    <q-w>function</q-w> <q-w>new</q-w>(<q-w>string</q-w> name = <q-l>""</q-l>);
<a name="19"><q-n>     19  </q-n></a>        <q-w>super</q-w>.<q-w>new</q-w>(name);
<a name="20"><q-n>     20  </q-n></a>    <q-w>endfunction</q-w>: <q-w>new</q-w>
<a name="21"><q-n>     21  </q-n></a><q-w>endclass</q-w>: axiLite_configuration
<a name="22"><q-n>     22  </q-n></a><q-m>// UVM_OBJECT : RGB_CONFIGURATION [RGB]</q-m>
<a name="23"><q-n>     23  </q-n></a><q-w>class</q-w> rgb_configuration <q-w>extends</q-w> uvm_object;
<a name="24"><q-n>     24  </q-n></a>    `uvm_object_utils(rgb_configuration)
<a name="25"><q-n>     25  </q-n></a>    <q-w>function</q-w> <q-w>new</q-w>(<q-w>string</q-w> name = <q-l>""</q-l>);
<a name="26"><q-n>     26  </q-n></a>        <q-w>super</q-w>.<q-w>new</q-w>(name);
<a name="27"><q-n>     27  </q-n></a>    <q-w>endfunction</q-w>: <q-w>new</q-w>
<a name="28"><q-n>     28  </q-n></a>    <q-w>rand</q-w> <q-w>int</q-w> count;
<a name="29"><q-n>     29  </q-n></a>    <q-w>constraint</q-w> c_count    { count &gt; 0; count &lt; 128; }
<a name="30"><q-n>     30  </q-n></a><q-w>endclass</q-w>: rgb_configuration
<a name="31"><q-n>     31  </q-n></a>
<a name="32"><q-n>     32  </q-n></a>
<a name="33"><q-n>     33  </q-n></a>
<a name="34"><q-n>     34  </q-n></a>
<a name="35"><q-n>     35  </q-n></a>
<a name="36"><q-n>     36  </q-n></a><q-m>//----------------------------------------------------------------------------------//</q-m>
<a name="37"><q-n>     37  </q-n></a><q-w>typedef</q-w> <q-w>enum</q-w> { READ, WRITE } axiLite_txn_e;
<a name="38"><q-n>     38  </q-n></a><q-m>//----------------------------------------------------------------------------------//</q-m>
<a name="39"><q-n>     39  </q-n></a>
<a name="40"><q-n>     40  </q-n></a>
<a name="41"><q-n>     41  </q-n></a><q-m>//----------------------------------------------------------------------------------//</q-m>
<a name="42"><q-n>     42  </q-n></a><q-m>// UVM_SEQUENCE_ITEM</q-m>
<a name="43"><q-n>     43  </q-n></a><q-m>//----------------------------------------------------------------------------------//</q-m>
<a name="44"><q-n>     44  </q-n></a><q-m>// UVM_SEQUENCE_ITEM : RGB_TRANSACTION [RGB]</q-m>
<a name="45"><q-n>     45  </q-n></a><q-w>class</q-w> rgb_transaction <q-w>extends</q-w> uvm_sequence_item; 
<a name="46"><q-n>     46  </q-n></a>    <q-w>rand</q-w> <q-w>bit</q-w>[7:0]       iRed;
<a name="47"><q-n>     47  </q-n></a>    <q-w>rand</q-w> <q-w>bit</q-w>[7:0]       iGreen;
<a name="48"><q-n>     48  </q-n></a>    <q-w>rand</q-w> <q-w>bit</q-w>[7:0]       iBlue;
<a name="49"><q-n>     49  </q-n></a>    <q-w>rand</q-w> <q-w>bit</q-w>            iPixelEn;
<a name="50"><q-n>     50  </q-n></a>    <q-w>rand</q-w> <q-w>bit</q-w>            iValid;
<a name="51"><q-n>     51  </q-n></a>    <q-w>rand</q-w> <q-w>bit</q-w>            iEof;
<a name="52"><q-n>     52  </q-n></a>    <q-w>rand</q-w> <q-w>bit</q-w> [10:0]     iX;
<a name="53"><q-n>     53  </q-n></a>    <q-w>rand</q-w> <q-w>bit</q-w> [10:0]     iY;
<a name="54"><q-n>     54  </q-n></a>    <q-w>function</q-w> <q-w>new</q-w>(<q-w>string</q-w> name = <q-l>""</q-l>);
<a name="55"><q-n>     55  </q-n></a>        <q-w>super</q-w>.<q-w>new</q-w>(name);
<a name="56"><q-n>     56  </q-n></a>    <q-w>endfunction</q-w>: <q-w>new</q-w>
<a name="57"><q-n>     57  </q-n></a>    `uvm_object_utils_begin(rgb_transaction)
<a name="58"><q-n>     58  </q-n></a>        `uvm_field_int(iRed,         UVM_ALL_ON)
<a name="59"><q-n>     59  </q-n></a>        `uvm_field_int(iGreen,       UVM_ALL_ON)
<a name="60"><q-n>     60  </q-n></a>        `uvm_field_int(iBlue,        UVM_ALL_ON)
<a name="61"><q-n>     61  </q-n></a>        `uvm_field_int(iPixelEn,     UVM_ALL_ON)
<a name="62"><q-n>     62  </q-n></a>        `uvm_field_int(iEof,         UVM_ALL_ON)
<a name="63"><q-n>     63  </q-n></a>        `uvm_field_int(iValid,       UVM_ALL_ON)
<a name="64"><q-n>     64  </q-n></a>        `uvm_field_int(iX,           UVM_ALL_ON)
<a name="65"><q-n>     65  </q-n></a>        `uvm_field_int(iY,           UVM_ALL_ON)
<a name="66"><q-n>     66  </q-n></a>    `uvm_object_utils_end
<a name="67"><q-n>     67  </q-n></a><q-w>endclass</q-w>: rgb_transaction
<a name="68"><q-n>     68  </q-n></a><q-m>// UVM_SEQUENCE_ITEM : AXILITE_TXN [AXILITE]</q-m>
<a name="69"><q-n>     69  </q-n></a><q-w>class</q-w> axiLite_transaction <q-w>extends</q-w> uvm_sequence_item;
<a name="70"><q-n>     70  </q-n></a>    <q-w>rand</q-w> <q-w>bit</q-w> [15:0]     addr;
<a name="71"><q-n>     71  </q-n></a>    <q-w>rand</q-w> <q-w>bit</q-w> [31:0]     data;
<a name="72"><q-n>     72  </q-n></a>    <q-w>rand</q-w> <q-w>bit</q-w> [31:0]     WDATA;
<a name="73"><q-n>     73  </q-n></a>    <q-w>rand</q-w> <q-w>bit</q-w> [31:0]     RDATA;
<a name="74"><q-n>     74  </q-n></a>    <q-w>rand</q-w> axiLite_txn_e  reqWriteRead;
<a name="75"><q-n>     75  </q-n></a>    <q-w>rand</q-w> <q-w>int</q-w> <q-w>unsigned</q-w>   cycles;
<a name="76"><q-n>     76  </q-n></a>    <q-w>constraint</q-w> c_cycles { 
<a name="77"><q-n>     77  </q-n></a>    cycles &lt;= 20; }
<a name="78"><q-n>     78  </q-n></a>    <q-w>function</q-w> <q-w>new</q-w> (<q-w>string</q-w> name = <q-l>""</q-l>);
<a name="79"><q-n>     79  </q-n></a>        <q-w>super</q-w>.<q-w>new</q-w>(name);
<a name="80"><q-n>     80  </q-n></a>    <q-w>endfunction</q-w>
<a name="81"><q-n>     81  </q-n></a>    <q-w>function</q-w> <q-w>string</q-w> convert2string();
<a name="82"><q-n>     82  </q-n></a>        <q-w>return</q-w> $sformatf(<q-l>"addr='h%h, data='h%0h, cycles='d%0d"</q-l>,addr, data, cycles);
<a name="83"><q-n>     83  </q-n></a>    <q-w>endfunction</q-w>
<a name="84"><q-n>     84  </q-n></a>    `uvm_object_utils_begin(axiLite_transaction)
<a name="85"><q-n>     85  </q-n></a>        `uvm_field_int  (addr,                          UVM_DEFAULT)
<a name="86"><q-n>     86  </q-n></a>        `uvm_field_int  (data,                          UVM_DEFAULT)
<a name="87"><q-n>     87  </q-n></a>        `uvm_field_int  (WDATA,                         UVM_DEFAULT)
<a name="88"><q-n>     88  </q-n></a>        `uvm_field_int  (RDATA,                         UVM_DEFAULT)
<a name="89"><q-n>     89  </q-n></a>        `uvm_field_enum (axiLite_txn_e, reqWriteRead,   UVM_DEFAULT)    
<a name="90"><q-n>     90  </q-n></a>        `uvm_field_int  (cycles,                        UVM_DEFAULT)
<a name="91"><q-n>     91  </q-n></a>    `uvm_object_utils_end
<a name="92"><q-n>     92  </q-n></a><q-w>endclass</q-w>: axiLite_transaction
<a name="93"><q-n>     93  </q-n></a><q-m>// UVM_SEQUENCE_ITEM : TEMPLATE_TRANSACTION [TEMPLATE]</q-m>
<a name="94"><q-n>     94  </q-n></a><q-w>class</q-w> template_transaction <q-w>extends</q-w> uvm_sequence_item;
<a name="95"><q-n>     95  </q-n></a>    <q-w>rand</q-w> <q-w>bit</q-w>[1:0] ina;
<a name="96"><q-n>     96  </q-n></a>    <q-w>rand</q-w> <q-w>bit</q-w>[1:0] inb;
<a name="97"><q-n>     97  </q-n></a>    <q-w>bit</q-w>[2:0]      out;
<a name="98"><q-n>     98  </q-n></a>    <q-w>function</q-w> <q-w>new</q-w>(<q-w>string</q-w> name = <q-l>""</q-l>);
<a name="99"><q-n>     99  </q-n></a>        <q-w>super</q-w>.<q-w>new</q-w>(name);
<a name="100"><q-n>     100  </q-n></a>    <q-w>endfunction</q-w>: <q-w>new</q-w>
<a name="101"><q-n>     101  </q-n></a>    `uvm_object_utils_begin(template_transaction)
<a name="102"><q-n>     102  </q-n></a>        `uvm_field_int(ina, UVM_ALL_ON)
<a name="103"><q-n>     103  </q-n></a>        `uvm_field_int(inb, UVM_ALL_ON)
<a name="104"><q-n>     104  </q-n></a>        `uvm_field_int(out, UVM_ALL_ON)
<a name="105"><q-n>     105  </q-n></a>    `uvm_object_utils_end
<a name="106"><q-n>     106  </q-n></a><q-w>endclass</q-w>: template_transaction
<a name="107"><q-n>     107  </q-n></a>
<a name="108"><q-n>     108  </q-n></a>
<a name="109"><q-n>     109  </q-n></a>
<a name="110"><q-n>     110  </q-n></a>
<a name="111"><q-n>     111  </q-n></a><q-m>//----------------------------------------------------------------------------------//</q-m>
<a name="112"><q-n>     112  </q-n></a><q-m>// UVM_SEQUENCE</q-m>
<a name="113"><q-n>     113  </q-n></a><q-m>//----------------------------------------------------------------------------------//</q-m>
<a name="114"><q-n>     114  </q-n></a><q-m>// UVM_SEQUENCE : TEMPLATE_SEQUENCER [TEMPLATE]</q-m>
<a name="115"><q-n>     115  </q-n></a><q-w>class</q-w> template_sequencer <q-w>extends</q-w> uvm_sequencer #(template_transaction);
<a name="116"><q-n>     116  </q-n></a>    `uvm_component_utils(template_sequencer)
<a name="117"><q-n>     117  </q-n></a>    <q-w>function</q-w> <q-w>new</q-w>(<q-w>string</q-w> name, uvm_component parent);
<a name="118"><q-n>     118  </q-n></a>        <q-w>super</q-w>.<q-w>new</q-w>(name, parent);
<a name="119"><q-n>     119  </q-n></a>    <q-w>endfunction</q-w>
<a name="120"><q-n>     120  </q-n></a><q-w>endclass</q-w>: template_sequencer
<a name="121"><q-n>     121  </q-n></a><q-m>// UVM_SEQUENCE : AXILITE_SQR [AXILITE]</q-m>
<a name="122"><q-n>     122  </q-n></a><q-w>class</q-w> axiLite_sequencer <q-w>extends</q-w> uvm_sequencer #(axiLite_transaction);
<a name="123"><q-n>     123  </q-n></a>    <q-w>int</q-w> id;
<a name="124"><q-n>     124  </q-n></a>    `uvm_component_utils_begin(axiLite_sequencer)
<a name="125"><q-n>     125  </q-n></a>        `uvm_field_int(id, UVM_DEFAULT)
<a name="126"><q-n>     126  </q-n></a>    `uvm_component_utils_end
<a name="127"><q-n>     127  </q-n></a>    <q-w>function</q-w> <q-w>new</q-w> (<q-w>string</q-w> name, uvm_component parent);
<a name="128"><q-n>     128  </q-n></a>        <q-w>super</q-w>.<q-w>new</q-w>(name, parent);
<a name="129"><q-n>     129  </q-n></a>    <q-w>endfunction</q-w>
<a name="130"><q-n>     130  </q-n></a><q-w>endclass</q-w>: axiLite_sequencer
<a name="131"><q-n>     131  </q-n></a><q-m>// UVM_SEQUENCE : RGB_SEQUENCER [RGB]</q-m>
<a name="132"><q-n>     132  </q-n></a><q-w>class</q-w> rgb_sequencer <q-w>extends</q-w> uvm_sequencer #(rgb_transaction);
<a name="133"><q-n>     133  </q-n></a>    `uvm_component_utils(rgb_sequencer)
<a name="134"><q-n>     134  </q-n></a>    <q-w>function</q-w> <q-w>new</q-w>(<q-w>string</q-w> name, uvm_component parent);
<a name="135"><q-n>     135  </q-n></a>        <q-w>super</q-w>.<q-w>new</q-w>(name, parent);
<a name="136"><q-n>     136  </q-n></a>    <q-w>endfunction</q-w>
<a name="137"><q-n>     137  </q-n></a><q-w>endclass</q-w>: rgb_sequencer
<a name="138"><q-n>     138  </q-n></a>
<a name="139"><q-n>     139  </q-n></a>
<a name="140"><q-n>     140  </q-n></a>
<a name="141"><q-n>     141  </q-n></a>
<a name="142"><q-n>     142  </q-n></a>
<a name="143"><q-n>     143  </q-n></a><q-m>//----------------------------------------------------------------------------------//</q-m>
<a name="144"><q-n>     144  </q-n></a><q-m>// UVM_SEQUENCE</q-m>
<a name="145"><q-n>     145  </q-n></a><q-m>//----------------------------------------------------------------------------------//</q-m>
<a name="146"><q-n>     146  </q-n></a><q-m>// UVM_SEQUENCE : RGB_RANDOM_SEQUENCE [RGB]</q-m>
<a name="147"><q-n>     147  </q-n></a><q-w>class</q-w> rgb_random_sequence <q-w>extends</q-w> uvm_sequence #(rgb_transaction);
<a name="148"><q-n>     148  </q-n></a>    `uvm_object_utils(rgb_random_sequence);
<a name="149"><q-n>     149  </q-n></a>    <q-w>function</q-w> <q-w>new</q-w>(<q-w>string</q-w> name = <q-l>"rgb_random_sequence"</q-l>);
<a name="150"><q-n>     150  </q-n></a>        <q-w>super</q-w>.<q-w>new</q-w>(name);
<a name="151"><q-n>     151  </q-n></a>    <q-w>endfunction</q-w> : <q-w>new</q-w>
<a name="152"><q-n>     152  </q-n></a>    <q-w>task</q-w> body();
<a name="153"><q-n>     153  </q-n></a>    rgb_transaction frame_tx = rgb_transaction::type_id::create(<q-l>"frame_tx"</q-l>);
<a name="154"><q-n>     154  </q-n></a>        <q-w>repeat</q-w> (100000) <q-w>begin</q-w> : random_loop
<a name="155"><q-n>     155  </q-n></a>            start_item(frame_tx);
<a name="156"><q-n>     156  </q-n></a>            <q-w>assert</q-w>(frame_tx.randomize());
<a name="157"><q-n>     157  </q-n></a>            finish_item(frame_tx);
<a name="158"><q-n>     158  </q-n></a>        <q-w>end</q-w> : random_loop
<a name="159"><q-n>     159  </q-n></a>    <q-w>endtask</q-w> : body
<a name="160"><q-n>     160  </q-n></a><q-w>endclass</q-w> : rgb_random_sequence
<a name="161"><q-n>     161  </q-n></a><q-m>// UVM_SEQUENCE : RANDOM_SEQUENCE_R1 [RGB]</q-m>
<a name="162"><q-n>     162  </q-n></a><q-w>class</q-w> random_sequence_r1 <q-w>extends</q-w> uvm_sequence #(rgb_transaction);
<a name="163"><q-n>     163  </q-n></a>    `uvm_object_utils(random_sequence_r1);
<a name="164"><q-n>     164  </q-n></a>    <q-w>function</q-w> <q-w>new</q-w>(<q-w>string</q-w> name = <q-l>"random_sequence_r1"</q-l>);
<a name="165"><q-n>     165  </q-n></a>        <q-w>super</q-w>.<q-w>new</q-w>(name);
<a name="166"><q-n>     166  </q-n></a>    <q-w>endfunction</q-w> : <q-w>new</q-w>
<a name="167"><q-n>     167  </q-n></a>    <q-w>task</q-w> body();
<a name="168"><q-n>     168  </q-n></a>    rgb_transaction frame_tx = rgb_transaction::type_id::create(<q-l>"frame_tx"</q-l>);
<a name="169"><q-n>     169  </q-n></a>    <q-m>//`uvm_info("random_sequence_r1", "executing...", UVM_LOW)</q-m>
<a name="170"><q-n>     170  </q-n></a>        <q-w>repeat</q-w> (100) <q-w>begin</q-w> : random_loop
<a name="171"><q-n>     171  </q-n></a>            start_item(frame_tx);
<a name="172"><q-n>     172  </q-n></a>            <q-w>assert</q-w>(frame_tx.randomize());
<a name="173"><q-n>     173  </q-n></a>            finish_item(frame_tx);
<a name="174"><q-n>     174  </q-n></a>        <q-w>end</q-w> : random_loop
<a name="175"><q-n>     175  </q-n></a>    <q-w>endtask</q-w> : body
<a name="176"><q-n>     176  </q-n></a><q-w>endclass</q-w> : random_sequence_r1
<a name="177"><q-n>     177  </q-n></a><q-m>// UVM_SEQUENCE : RANDOM_SEQUENCE_R2 [RGB]</q-m>
<a name="178"><q-n>     178  </q-n></a><q-w>class</q-w> random_sequence_r2 <q-w>extends</q-w> random_sequence_r1;
<a name="179"><q-n>     179  </q-n></a>    `uvm_object_utils(random_sequence_r2);
<a name="180"><q-n>     180  </q-n></a>    <q-w>function</q-w> <q-w>new</q-w>(<q-w>string</q-w> name = <q-l>"random_sequence_r2"</q-l>);
<a name="181"><q-n>     181  </q-n></a>        <q-w>super</q-w>.<q-w>new</q-w>(name);
<a name="182"><q-n>     182  </q-n></a>    <q-w>endfunction</q-w> : <q-w>new</q-w>
<a name="183"><q-n>     183  </q-n></a>    <q-w>task</q-w> body();
<a name="184"><q-n>     184  </q-n></a>    rgb_transaction frame_tx = rgb_transaction::type_id::create(<q-l>"frame_tx"</q-l>);
<a name="185"><q-n>     185  </q-n></a>    <q-m>//`uvm_info("random_sequence_r2", "executing...", UVM_LOW)</q-m>
<a name="186"><q-n>     186  </q-n></a>        <q-w>repeat</q-w> (1) <q-w>begin</q-w> : random_loop
<a name="187"><q-n>     187  </q-n></a>            start_item(frame_tx);
<a name="188"><q-n>     188  </q-n></a>            <q-w>assert</q-w>(frame_tx.randomize());
<a name="189"><q-n>     189  </q-n></a>            finish_item(frame_tx);
<a name="190"><q-n>     190  </q-n></a>        <q-w>end</q-w> : random_loop
<a name="191"><q-n>     191  </q-n></a>    <q-w>endtask</q-w> : body
<a name="192"><q-n>     192  </q-n></a><q-w>endclass</q-w> : random_sequence_r2
<a name="193"><q-n>     193  </q-n></a><q-m>// UVM_SEQUENCE : TOP_SEQUENCE [RGB]</q-m>
<a name="194"><q-n>     194  </q-n></a><q-w>class</q-w> top_sequence <q-w>extends</q-w> uvm_sequence #(rgb_transaction);
<a name="195"><q-n>     195  </q-n></a>    `uvm_object_utils(top_sequence)
<a name="196"><q-n>     196  </q-n></a>    `uvm_declare_p_sequencer(rgb_sequencer)
<a name="197"><q-n>     197  </q-n></a>    <q-w>function</q-w> <q-w>new</q-w> (<q-w>string</q-w> name = <q-l>""</q-l>);
<a name="198"><q-n>     198  </q-n></a>        <q-w>super</q-w>.<q-w>new</q-w>(name);
<a name="199"><q-n>     199  </q-n></a>    <q-w>endfunction</q-w>
<a name="200"><q-n>     200  </q-n></a>    <q-w>task</q-w> body;
<a name="201"><q-n>     201  </q-n></a>        rgb_configuration cfg;
<a name="202"><q-n>     202  </q-n></a>        <q-w>int</q-w> count;
<a name="203"><q-n>     203  </q-n></a>        <q-w>if</q-w> ( uvm_config_db #(rgb_configuration)::get(p_sequencer, <q-l>""</q-l>, <q-l>"config"</q-l>, cfg) ) <q-w>begin</q-w>
<a name="204"><q-n>     204  </q-n></a>            count    = cfg.count;
<a name="205"><q-n>     205  </q-n></a>        <q-w>end</q-w>
<a name="206"><q-n>     206  </q-n></a>        <q-w>else</q-w>
<a name="207"><q-n>     207  </q-n></a>        <q-w>begin</q-w>
<a name="208"><q-n>     208  </q-n></a>            count    = 1;
<a name="209"><q-n>     209  </q-n></a>        <q-w>end</q-w>
<a name="210"><q-n>     210  </q-n></a>        
<a name="211"><q-n>     211  </q-n></a>        <q-w>if</q-w> (starting_phase != <q-w>null</q-w>)
<a name="212"><q-n>     212  </q-n></a>            starting_phase.raise_objection(<q-w>this</q-w>);
<a name="213"><q-n>     213  </q-n></a>        <q-w>repeat</q-w>(count)
<a name="214"><q-n>     214  </q-n></a>        <q-w>begin</q-w>
<a name="215"><q-n>     215  </q-n></a>            random_sequence_r1 seq;
<a name="216"><q-n>     216  </q-n></a>            seq = random_sequence_r1::type_id::create(<q-l>"seq"</q-l>);
<a name="217"><q-n>     217  </q-n></a>            seq.start(p_sequencer, <q-w>this</q-w>);
<a name="218"><q-n>     218  </q-n></a>        <q-w>end</q-w>
<a name="219"><q-n>     219  </q-n></a>        <q-w>if</q-w> (starting_phase != <q-w>null</q-w>)
<a name="220"><q-n>     220  </q-n></a>            starting_phase.drop_objection(<q-w>this</q-w>);
<a name="221"><q-n>     221  </q-n></a>    <q-w>endtask</q-w>: body
<a name="222"><q-n>     222  </q-n></a><q-w>endclass</q-w>: top_sequence
<a name="223"><q-n>     223  </q-n></a><q-m>// UVM_SEQUENCE : AXILITE_BASE_SEQ [AXILITE]</q-m>
<a name="224"><q-n>     224  </q-n></a><q-w>virtual</q-w> <q-w>class</q-w> axiLite_base_seq <q-w>extends</q-w> uvm_sequence #(axiLite_transaction);
<a name="225"><q-n>     225  </q-n></a>    <q-w>function</q-w> <q-w>new</q-w> (<q-w>string</q-w> name=<q-l>"axiLite_base_seq"</q-l>);
<a name="226"><q-n>     226  </q-n></a>        <q-w>super</q-w>.<q-w>new</q-w>(name);
<a name="227"><q-n>     227  </q-n></a>    <q-w>endfunction</q-w>
<a name="228"><q-n>     228  </q-n></a><q-w>endclass</q-w>: axiLite_base_seq
<a name="229"><q-n>     229  </q-n></a><q-m>// UVM_SEQUENCE : AXILITE_NO_ACTIVITY_SEQ [AXILITE]</q-m>
<a name="230"><q-n>     230  </q-n></a><q-w>class</q-w> axiLite_no_activity_sequence <q-w>extends</q-w> axiLite_base_seq;
<a name="231"><q-n>     231  </q-n></a>    `uvm_object_utils(axiLite_no_activity_sequence)
<a name="232"><q-n>     232  </q-n></a>    <q-w>function</q-w> <q-w>new</q-w>(<q-w>string</q-w> name=<q-l>"axiLite_no_activity_sequence"</q-l>);
<a name="233"><q-n>     233  </q-n></a>        <q-w>super</q-w>.<q-w>new</q-w>(name);
<a name="234"><q-n>     234  </q-n></a>    <q-w>endfunction</q-w>
<a name="235"><q-n>     235  </q-n></a>    <q-w>virtual</q-w> <q-w>task</q-w> body();
<a name="236"><q-n>     236  </q-n></a>        `uvm_info(<q-l>"SEQ"</q-l>, <q-l>"executing"</q-l>, UVM_LOW)
<a name="237"><q-n>     237  </q-n></a>    <q-w>endtask</q-w>: body
<a name="238"><q-n>     238  </q-n></a><q-w>endclass</q-w>: axiLite_no_activity_sequence
<a name="239"><q-n>     239  </q-n></a><q-m>// UVM_SEQUENCE : AXILITE_RANDOM_SEQ [AXILITE]</q-m>
<a name="240"><q-n>     240  </q-n></a><q-w>class</q-w> axiLite_random_sequence <q-w>extends</q-w> axiLite_base_seq;
<a name="241"><q-n>     241  </q-n></a>    `uvm_object_utils(axiLite_random_sequence)
<a name="242"><q-n>     242  </q-n></a>    <q-w>function</q-w> <q-w>new</q-w>(<q-w>string</q-w> name=<q-l>"axiLite_random_sequence"</q-l>);
<a name="243"><q-n>     243  </q-n></a>        <q-w>super</q-w>.<q-w>new</q-w>(name);
<a name="244"><q-n>     244  </q-n></a>    <q-w>endfunction</q-w>
<a name="245"><q-n>     245  </q-n></a>    <q-w>virtual</q-w> <q-w>task</q-w> body();
<a name="246"><q-n>     246  </q-n></a>        axiLite_transaction item;
<a name="247"><q-n>     247  </q-n></a>        <q-w>int</q-w> num_txn;
<a name="248"><q-n>     248  </q-n></a>        <q-w>bit</q-w> typ_txn;
<a name="249"><q-n>     249  </q-n></a>        `uvm_info(<q-l>"SEQ"</q-l>, <q-l>"executing..."</q-l>, UVM_LOW)
<a name="250"><q-n>     250  </q-n></a>        num_txn = $urandom_range(5,20);
<a name="251"><q-n>     251  </q-n></a>        <q-w>repeat</q-w>(num_txn) <q-w>begin</q-w>    
<a name="252"><q-n>     252  </q-n></a>        `uvm_create(item)
<a name="253"><q-n>     253  </q-n></a>        item.cycles         = $urandom_range(1,5);
<a name="254"><q-n>     254  </q-n></a>        item.addr           = $urandom();
<a name="255"><q-n>     255  </q-n></a>        item.data           = $urandom();
<a name="256"><q-n>     256  </q-n></a>        typ_txn             = $random();
<a name="257"><q-n>     257  </q-n></a>        item.reqWriteRead   = typ_txn ? WRITE : READ; 
<a name="258"><q-n>     258  </q-n></a>        `uvm_send(item);
<a name="259"><q-n>     259  </q-n></a>        <q-w>end</q-w>    
<a name="260"><q-n>     260  </q-n></a>    <q-w>endtask</q-w>: body
<a name="261"><q-n>     261  </q-n></a><q-w>endclass</q-w>: axiLite_random_sequence
<a name="262"><q-n>     262  </q-n></a><q-m>// UVM_SEQUENCE : AXILITE_DIRECTED_SEQ [AXILITE]</q-m>
<a name="263"><q-n>     263  </q-n></a><q-w>class</q-w> axiLite_directed_sequence <q-w>extends</q-w> axiLite_base_seq;
<a name="264"><q-n>     264  </q-n></a>    `uvm_object_utils(axiLite_directed_sequence)
<a name="265"><q-n>     265  </q-n></a>    <q-w>function</q-w> <q-w>new</q-w>(<q-w>string</q-w> name=<q-l>"axiLite_directed_sequence"</q-l>);
<a name="266"><q-n>     266  </q-n></a>        <q-w>super</q-w>.<q-w>new</q-w>(name);
<a name="267"><q-n>     267  </q-n></a>    <q-w>endfunction</q-w>
<a name="268"><q-n>     268  </q-n></a>    <q-w>virtual</q-w> <q-w>task</q-w> body();
<a name="269"><q-n>     269  </q-n></a>        axiLite_transaction item;
<a name="270"><q-n>     270  </q-n></a>        <q-w>bit</q-w> [8:0] addr;
<a name="271"><q-n>     271  </q-n></a>        `uvm_info(<q-l>"SEQ"</q-l>, <q-l>"executing...WR-&gt;RD-&gt;WR-&gt;RD"</q-l>, UVM_LOW)
<a name="272"><q-n>     272  </q-n></a>        <q-w>for</q-w>(addr = 0; addr &lt; 256; addr ++) <q-w>begin</q-w>
<a name="273"><q-n>     273  </q-n></a>            `uvm_create(item)
<a name="274"><q-n>     274  </q-n></a>            item.addr           = {14'h0,addr[7:0]};
<a name="275"><q-n>     275  </q-n></a>            item.reqWriteRead   = addr[0] ? READ : WRITE;
<a name="276"><q-n>     276  </q-n></a>            item.cycles         = 0;
<a name="277"><q-n>     277  </q-n></a>            item.data           = addr;
<a name="278"><q-n>     278  </q-n></a>            `uvm_send(item);
<a name="279"><q-n>     279  </q-n></a>        <q-w>end</q-w>
<a name="280"><q-n>     280  </q-n></a>        `uvm_info(<q-l>"SEQ"</q-l>, <q-l>"executing...WR-&gt;WR-&gt;RD-&gt;RD"</q-l>, UVM_LOW)
<a name="281"><q-n>     281  </q-n></a>        <q-w>for</q-w>(addr = 0; addr &lt; 255; addr ++) <q-w>begin</q-w>
<a name="282"><q-n>     282  </q-n></a>            `uvm_create(item)
<a name="283"><q-n>     283  </q-n></a>            item.addr           = {14'h0,addr[7:0]};
<a name="284"><q-n>     284  </q-n></a>            item.reqWriteRead   = addr[8] ? READ : WRITE;
<a name="285"><q-n>     285  </q-n></a>            item.cycles         = 5;
<a name="286"><q-n>     286  </q-n></a>            item.data           = addr;
<a name="287"><q-n>     287  </q-n></a>            `uvm_send(item);
<a name="288"><q-n>     288  </q-n></a>        <q-w>end</q-w>
<a name="289"><q-n>     289  </q-n></a>    <q-w>endtask</q-w>: body
<a name="290"><q-n>     290  </q-n></a><q-w>endclass</q-w>: axiLite_directed_sequence
<a name="291"><q-n>     291  </q-n></a><q-m>// UVM_SEQUENCE : AXILITE_USEVAR_SEQ [AXILITE]</q-m>
<a name="292"><q-n>     292  </q-n></a><q-w>class</q-w> axiLite_usevar_sequence <q-w>extends</q-w> axiLite_base_seq;
<a name="293"><q-n>     293  </q-n></a>    `uvm_object_utils(axiLite_usevar_sequence)
<a name="294"><q-n>     294  </q-n></a>    `uvm_declare_p_sequencer(axiLite_sequencer)
<a name="295"><q-n>     295  </q-n></a>    <q-w>function</q-w> <q-w>new</q-w>(<q-w>string</q-w> name=<q-l>"axiLite_usevar_sequence"</q-l>);
<a name="296"><q-n>     296  </q-n></a>        <q-w>super</q-w>.<q-w>new</q-w>(name);
<a name="297"><q-n>     297  </q-n></a>    <q-w>endfunction</q-w>
<a name="298"><q-n>     298  </q-n></a>    <q-w>virtual</q-w> <q-w>task</q-w> body();
<a name="299"><q-n>     299  </q-n></a>    axiLite_transaction item;
<a name="300"><q-n>     300  </q-n></a>    <q-w>int</q-w> id;
<a name="301"><q-n>     301  </q-n></a>    `uvm_info(<q-l>"SEQ"</q-l>, <q-l>"executing..."</q-l>, UVM_LOW)
<a name="302"><q-n>     302  </q-n></a>    id = p_sequencer.id;
<a name="303"><q-n>     303  </q-n></a>    `uvm_info(<q-l>"SEQ"</q-l>, $sformatf(<q-l>"using id=%0hh from sequencer"</q-l>, id), UVM_LOW)
<a name="304"><q-n>     304  </q-n></a>    `uvm_create(item)
<a name="305"><q-n>     305  </q-n></a>    item.cycles = $urandom_range(1,5);
<a name="306"><q-n>     306  </q-n></a>    item.data = id;
<a name="307"><q-n>     307  </q-n></a>    `uvm_send(item);
<a name="308"><q-n>     308  </q-n></a>    <q-w>endtask</q-w>
<a name="309"><q-n>     309  </q-n></a><q-w>endclass</q-w>:axiLite_usevar_sequence
<a name="310"><q-n>     310  </q-n></a><q-m>// UVM_SEQUENCE : TEMPLATE_BASE_SEQ [TEMPLATE]</q-m>
<a name="311"><q-n>     311  </q-n></a><q-w>virtual</q-w> <q-w>class</q-w> template_base_sequence <q-w>extends</q-w> uvm_sequence #(template_transaction);
<a name="312"><q-n>     312  </q-n></a>    <q-w>function</q-w> <q-w>new</q-w> (<q-w>string</q-w> name=<q-l>"template_base_sequence"</q-l>);
<a name="313"><q-n>     313  </q-n></a>        <q-w>super</q-w>.<q-w>new</q-w>(name);
<a name="314"><q-n>     314  </q-n></a>    <q-w>endfunction</q-w>
<a name="315"><q-n>     315  </q-n></a><q-w>endclass</q-w>: template_base_sequence
<a name="316"><q-n>     316  </q-n></a><q-m>// UVM_SEQUENCE : TEMPLATE_SEQUENCE [TEMPLATE]</q-m>
<a name="317"><q-n>     317  </q-n></a><q-w>class</q-w> template_sequence <q-w>extends</q-w> uvm_sequence#(template_transaction);
<a name="318"><q-n>     318  </q-n></a>    `uvm_object_utils(template_sequence)
<a name="319"><q-n>     319  </q-n></a>    <q-w>function</q-w> <q-w>new</q-w>(<q-w>string</q-w> name = <q-l>""</q-l>);
<a name="320"><q-n>     320  </q-n></a>        <q-w>super</q-w>.<q-w>new</q-w>(name);
<a name="321"><q-n>     321  </q-n></a>    <q-w>endfunction</q-w>: <q-w>new</q-w>
<a name="322"><q-n>     322  </q-n></a>    <q-w>task</q-w> body();
<a name="323"><q-n>     323  </q-n></a>        template_transaction tx;
<a name="324"><q-n>     324  </q-n></a>        <q-w>repeat</q-w>(10000) <q-w>begin</q-w>
<a name="325"><q-n>     325  </q-n></a>        tx = template_transaction::type_id::create(.name(<q-l>"tx"</q-l>), .contxt(get_full_name()));
<a name="326"><q-n>     326  </q-n></a>        start_item(tx);
<a name="327"><q-n>     327  </q-n></a>            <q-w>assert</q-w>(tx.randomize());
<a name="328"><q-n>     328  </q-n></a>            <q-m>//`uvm_info("sa_sequence", tx.sprint(), UVM_LOW);</q-m>
<a name="329"><q-n>     329  </q-n></a>        finish_item(tx);
<a name="330"><q-n>     330  </q-n></a>        <q-w>end</q-w>
<a name="331"><q-n>     331  </q-n></a>    <q-w>endtask</q-w>: body
<a name="332"><q-n>     332  </q-n></a><q-w>endclass</q-w>: template_sequence
<a name="333"><q-n>     333  </q-n></a>
<a name="334"><q-n>     334  </q-n></a>
<a name="335"><q-n>     335  </q-n></a>
<a name="336"><q-n>     336  </q-n></a>
<a name="337"><q-n>     337  </q-n></a><q-m>//----------------------------------------------------------------------------------//</q-m>
<a name="338"><q-n>     338  </q-n></a><q-m>// UVM_DRIVER</q-m>
<a name="339"><q-n>     339  </q-n></a><q-m>//----------------------------------------------------------------------------------//</q-m>
<a name="340"><q-n>     340  </q-n></a><q-m>// UVM_DRIVER : AXILITE_DRV [AXILITE]</q-m>
<a name="341"><q-n>     341  </q-n></a><q-w>class</q-w> axiLite_driver <q-w>extends</q-w> uvm_driver #(axiLite_transaction);
<a name="342"><q-n>     342  </q-n></a>    protected virtual axiLite_if axiLiteVif;
<a name="343"><q-n>     343  </q-n></a>    protected int     id;
<a name="344"><q-n>     344  </q-n></a>    `uvm_component_utils_begin(axiLite_driver)
<a name="345"><q-n>     345  </q-n></a>        `uvm_field_int(id, UVM_DEFAULT)
<a name="346"><q-n>     346  </q-n></a>    `uvm_component_utils_end
<a name="347"><q-n>     347  </q-n></a>    function new (string name, uvm_component parent);
<a name="348"><q-n>     348  </q-n></a>        super.new(name, parent);
<a name="349"><q-n>     349  </q-n></a>    endfunction
<a name="350"><q-n>     350  </q-n></a>    function void build_phase (uvm_phase phase);
<a name="351"><q-n>     351  </q-n></a>        super.build_phase(phase);
<a name="352"><q-n>     352  </q-n></a>        if (!uvm_config_db#(virtual axiLite_if)::get(this, "", "axiLiteVif", axiLiteVif))
<a name="353"><q-n>     353  </q-n></a>        `uvm_fatal("NOVIF", {"virtual interface must be set for: ",
<a name="354"><q-n>     354  </q-n></a>        get_full_name(), ".axiLiteVif"});
<a name="355"><q-n>     355  </q-n></a>    endfunction
<a name="356"><q-n>     356  </q-n></a>    virtual task run_phase (uvm_phase phase);
<a name="357"><q-n>     357  </q-n></a>        fork
<a name="358"><q-n>     358  </q-n></a>            get_and_drive();
<a name="359"><q-n>     359  </q-n></a>            reset_signals();
<a name="360"><q-n>     360  </q-n></a>        join
<a name="361"><q-n>     361  </q-n></a>    endtask: run_phase
<a name="362"><q-n>     362  </q-n></a>    virtual protected task get_and_drive();
<a name="363"><q-n>     363  </q-n></a>        forever begin
<a name="364"><q-n>     364  </q-n></a>            @(posedge axiLiteVif.ACLK);
<a name="365"><q-n>     365  </q-n></a>            if (axiLiteVif.ARESETN == 1'b0) begin
<a name="366"><q-n>     366  </q-n></a>                @(posedge axiLiteVif.ARESETN);
<a name="367"><q-n>     367  </q-n></a>                @(posedge axiLiteVif.ACLK);
<a name="368"><q-n>     368  </q-n></a>            end
<a name="369"><q-n>     369  </q-n></a>            seq_item_port.get_next_item(req);
<a name="370"><q-n>     370  </q-n></a>            //`uvm_info("DRV", req.convert2string(), UVM_LOW)
<a name="371"><q-n>     371  </q-n></a>            repeat(req.cycles) begin
<a name="372"><q-n>     372  </q-n></a>                @(posedge axiLiteVif.ACLK);
<a name="373"><q-n>     373  </q-n></a>            end
<a name="374"><q-n>     374  </q-n></a>            drive_transfer(req);
<a name="375"><q-n>     375  </q-n></a>            seq_item_port.item_done();
<a name="376"><q-n>     376  </q-n></a>        end
<a name="377"><q-n>     377  </q-n></a>    endtask: get_and_drive
<a name="378"><q-n>     378  </q-n></a>    virtual protected task reset_signals();
<a name="379"><q-n>     379  </q-n></a>        forever begin
<a name="380"><q-n>     380  </q-n></a>            @(negedge axiLiteVif.ARESETN);
<a name="381"><q-n>     381  </q-n></a>            axiLiteVif.AWADDR  &lt;=  8'h0;
<a name="382"><q-n>     382  </q-n></a>            axiLiteVif.AWPROT  &lt;=  3'h0;
<a name="383"><q-n>     383  </q-n></a>            axiLiteVif.AWVALID &lt;=  1'b0;
<a name="384"><q-n>     384  </q-n></a>            axiLiteVif.WDATA   &lt;= 32'h0;
<a name="385"><q-n>     385  </q-n></a>            axiLiteVif.WSTRB   &lt;=  4'h0;
<a name="386"><q-n>     386  </q-n></a>            axiLiteVif.WVALID  &lt;=  1'b0;
<a name="387"><q-n>     387  </q-n></a>            axiLiteVif.BREADY  &lt;=  1'b1;
<a name="388"><q-n>     388  </q-n></a>            axiLiteVif.ARADDR  &lt;=  8'h0;
<a name="389"><q-n>     389  </q-n></a>            axiLiteVif.ARPROT  &lt;=  3'h0;
<a name="390"><q-n>     390  </q-n></a>            axiLiteVif.ARVALID &lt;=  1'b0;
<a name="391"><q-n>     391  </q-n></a>            axiLiteVif.RREADY  &lt;=  1'b1;
<a name="392"><q-n>     392  </q-n></a>        end
<a name="393"><q-n>     393  </q-n></a>    endtask: reset_signals
<a name="394"><q-n>     394  </q-n></a>    virtual protected task drive_transfer (axiLite_transaction aL_txn);
<a name="395"><q-n>     395  </q-n></a>        drive_address_phase(aL_txn);
<a name="396"><q-n>     396  </q-n></a>        drive_data_phase(aL_txn);
<a name="397"><q-n>     397  </q-n></a>    endtask: drive_transfer
<a name="398"><q-n>     398  </q-n></a>    virtual protected task drive_address_phase (axiLite_transaction aL_txn);
<a name="399"><q-n>     399  </q-n></a>        //`uvm_info("axiLite_master_driver", "drive_address_phase",UVM_HIGH)
<a name="400"><q-n>     400  </q-n></a>        case (aL_txn.reqWriteRead)
<a name="401"><q-n>     401  </q-n></a>            READ : drive_read_address_channel(aL_txn);
<a name="402"><q-n>     402  </q-n></a>            WRITE: drive_write_address_channel(aL_txn);
<a name="403"><q-n>     403  </q-n></a>        endcase
<a name="404"><q-n>     404  </q-n></a>    endtask: drive_address_phase
<a name="405"><q-n>     405  </q-n></a>    virtual protected task drive_data_phase (axiLite_transaction aL_txn);
<a name="406"><q-n>     406  </q-n></a>        bit[31:0] rw_data;
<a name="407"><q-n>     407  </q-n></a>        bit err;
<a name="408"><q-n>     408  </q-n></a>        rw_data = aL_txn.data;
<a name="409"><q-n>     409  </q-n></a>        case (aL_txn.reqWriteRead)
<a name="410"><q-n>     410  </q-n></a>        READ : drive_read_data_channel(rw_data, err);
<a name="411"><q-n>     411  </q-n></a>        WRITE: drive_write_data_channel(rw_data, err);
<a name="412"><q-n>     412  </q-n></a>        endcase    
<a name="413"><q-n>     413  </q-n></a>    endtask: drive_data_phase
<a name="414"><q-n>     414  </q-n></a>    virtual protected task drive_write_address_channel (axiLite_transaction aL_txn);
<a name="415"><q-n>     415  </q-n></a>        int axiLite_ctr;
<a name="416"><q-n>     416  </q-n></a>        axiLiteVif.AWADDR  &lt;= {8'h0, aL_txn.addr};
<a name="417"><q-n>     417  </q-n></a>        axiLiteVif.AWPROT  &lt;= 3'h0;
<a name="418"><q-n>     418  </q-n></a>        axiLiteVif.AWVALID &lt;= 1'b1;
<a name="419"><q-n>     419  </q-n></a>        for(axiLite_ctr = 0; axiLite_ctr &lt;= 31; axiLite_ctr ++) begin
<a name="420"><q-n>     420  </q-n></a>            @(posedge axiLiteVif.ACLK);
<a name="421"><q-n>     421  </q-n></a>            if (axiLiteVif.AWREADY) break;
<a name="422"><q-n>     422  </q-n></a>        end
<a name="423"><q-n>     423  </q-n></a>        if (axiLite_ctr == 31) begin
<a name="424"><q-n>     424  </q-n></a>            `uvm_error("axiLite_master_driver","AWVALID timeout");
<a name="425"><q-n>     425  </q-n></a>        end    
<a name="426"><q-n>     426  </q-n></a>        @(posedge axiLiteVif.ACLK);
<a name="427"><q-n>     427  </q-n></a>        // axiLiteVif.AWADDR  &lt;= 8'h0;
<a name="428"><q-n>     428  </q-n></a>        // axiLiteVif.AWPROT  &lt;= 3'h0;
<a name="429"><q-n>     429  </q-n></a>        // axiLiteVif.AWVALID &lt;= 1'b0;    
<a name="430"><q-n>     430  </q-n></a>    endtask: drive_write_address_channel
<a name="431"><q-n>     431  </q-n></a>    virtual protected task drive_read_address_channel (axiLite_transaction aL_txn);
<a name="432"><q-n>     432  </q-n></a>        int axiLite_ctr;
<a name="433"><q-n>     433  </q-n></a>        axiLiteVif.ARADDR  &lt;= {8'h0, aL_txn.addr};
<a name="434"><q-n>     434  </q-n></a>        axiLiteVif.ARPROT  &lt;= 3'h0;
<a name="435"><q-n>     435  </q-n></a>        axiLiteVif.ARVALID &lt;= 1'b1;
<a name="436"><q-n>     436  </q-n></a>        for(axiLite_ctr = 0; axiLite_ctr &lt;= 31; axiLite_ctr ++) begin
<a name="437"><q-n>     437  </q-n></a>            @(posedge axiLiteVif.ACLK);
<a name="438"><q-n>     438  </q-n></a>            if (axiLiteVif.ARREADY) break;
<a name="439"><q-n>     439  </q-n></a>        end
<a name="440"><q-n>     440  </q-n></a>        if (axiLite_ctr == 31) begin
<a name="441"><q-n>     441  </q-n></a>            `uvm_error("axiLite_master_driver","ARVALID timeout");
<a name="442"><q-n>     442  </q-n></a>        end
<a name="443"><q-n>     443  </q-n></a>        @(posedge axiLiteVif.ACLK);
<a name="444"><q-n>     444  </q-n></a>        axiLiteVif.ARADDR  &lt;= 8'h0;
<a name="445"><q-n>     445  </q-n></a>        axiLiteVif.ARPROT  &lt;= 3'h0;
<a name="446"><q-n>     446  </q-n></a>        axiLiteVif.ARVALID &lt;= 1'b0;    
<a name="447"><q-n>     447  </q-n></a>    endtask: drive_read_address_channel
<a name="448"><q-n>     448  </q-n></a>    virtual protected task drive_write_data_channel (bit[31:0] data, output bit error);
<a name="449"><q-n>     449  </q-n></a>        int axiLite_ctr;
<a name="450"><q-n>     450  </q-n></a>        axiLiteVif.WDATA  &lt;= data;
<a name="451"><q-n>     451  </q-n></a>        axiLiteVif.WSTRB  &lt;= 4'hf;
<a name="452"><q-n>     452  </q-n></a>        axiLiteVif.WVALID &lt;= 1'b1;
<a name="453"><q-n>     453  </q-n></a>        @(posedge axiLiteVif.ACLK);
<a name="454"><q-n>     454  </q-n></a>            for(axiLite_ctr = 0; axiLite_ctr &lt;= 31; axiLite_ctr ++) begin
<a name="455"><q-n>     455  </q-n></a>            @(posedge axiLiteVif.ACLK);
<a name="456"><q-n>     456  </q-n></a>            if (axiLiteVif.WREADY) 
<a name="457"><q-n>     457  </q-n></a>                    axiLiteVif.AWADDR  &lt;= 8'h0;
<a name="458"><q-n>     458  </q-n></a>        axiLiteVif.AWPROT  &lt;= 3'h0;
<a name="459"><q-n>     459  </q-n></a>        axiLiteVif.AWVALID &lt;= 1'b0; 
<a name="460"><q-n>     460  </q-n></a>            break;
<a name="461"><q-n>     461  </q-n></a>        end
<a name="462"><q-n>     462  </q-n></a>        if (axiLite_ctr == 31) begin
<a name="463"><q-n>     463  </q-n></a>            `uvm_error("axiLite_master_driver","AWVALID timeout");
<a name="464"><q-n>     464  </q-n></a>        end
<a name="465"><q-n>     465  </q-n></a>        @(posedge axiLiteVif.ACLK);
<a name="466"><q-n>     466  </q-n></a>        axiLiteVif.WDATA  &lt;= 32'h0;
<a name="467"><q-n>     467  </q-n></a>        axiLiteVif.WSTRB  &lt;= 4'h0;
<a name="468"><q-n>     468  </q-n></a>        axiLiteVif.WVALID &lt;= 1'b0;
<a name="469"><q-n>     469  </q-n></a>        //wait for write response
<a name="470"><q-n>     470  </q-n></a>        for(axiLite_ctr = 0; axiLite_ctr &lt;= 31; axiLite_ctr ++) begin
<a name="471"><q-n>     471  </q-n></a>            @(posedge axiLiteVif.ACLK);
<a name="472"><q-n>     472  </q-n></a>            if (axiLiteVif.BVALID) break;
<a name="473"><q-n>     473  </q-n></a>        end
<a name="474"><q-n>     474  </q-n></a>        if (axiLite_ctr == 31) begin
<a name="475"><q-n>     475  </q-n></a>            `uvm_error("axiLite_master_driver","BVALID timeout");
<a name="476"><q-n>     476  </q-n></a>        end
<a name="477"><q-n>     477  </q-n></a>        else begin
<a name="478"><q-n>     478  </q-n></a>            if (axiLiteVif.BVALID == 1'b1 &amp;&amp; axiLiteVif.BRESP != 2'h0)
<a name="479"><q-n>     479  </q-n></a>            `uvm_error("axiLite_master_driver","Received ERROR Write Response");
<a name="480"><q-n>     480  </q-n></a>            axiLiteVif.BREADY &lt;= axiLiteVif.BVALID;
<a name="481"><q-n>     481  </q-n></a>         @(posedge axiLiteVif.ACLK);
<a name="482"><q-n>     482  </q-n></a>        end
<a name="483"><q-n>     483  </q-n></a>    endtask: drive_write_data_channel
<a name="484"><q-n>     484  </q-n></a>    // drive read data channel
<a name="485"><q-n>     485  </q-n></a>    virtual protected task drive_read_data_channel (output bit [31:0] data, output bit error);
<a name="486"><q-n>     486  </q-n></a>        int axiLite_ctr;
<a name="487"><q-n>     487  </q-n></a>        for(axiLite_ctr = 0; axiLite_ctr &lt;= 31; axiLite_ctr ++) begin
<a name="488"><q-n>     488  </q-n></a>            @(posedge axiLiteVif.ACLK);
<a name="489"><q-n>     489  </q-n></a>            if (axiLiteVif.RVALID) break;
<a name="490"><q-n>     490  </q-n></a>        end
<a name="491"><q-n>     491  </q-n></a>        data = axiLiteVif.RDATA;
<a name="492"><q-n>     492  </q-n></a>        if (axiLite_ctr == 31) begin
<a name="493"><q-n>     493  </q-n></a>            `uvm_error("axiLite_master_driver","RVALID timeout");
<a name="494"><q-n>     494  </q-n></a>        end
<a name="495"><q-n>     495  </q-n></a>        else begin
<a name="496"><q-n>     496  </q-n></a>        if (axiLiteVif.RVALID == 1'b1 &amp;&amp; axiLiteVif.RRESP != 2'h0)
<a name="497"><q-n>     497  </q-n></a>            `uvm_error("axiLite_master_driver","Received ERROR Read Response");
<a name="498"><q-n>     498  </q-n></a>            axiLiteVif.RREADY &lt;= axiLiteVif.RVALID;
<a name="499"><q-n>     499  </q-n></a>            @(posedge axiLiteVif.ACLK);
<a name="500"><q-n>     500  </q-n></a>        end
<a name="501"><q-n>     501  </q-n></a>    endtask: drive_read_data_channel
<a name="502"><q-n>     502  </q-n></a>endclass: axiLite_driver
<a name="503"><q-n>     503  </q-n></a>// UVM_DRIVER : TEMPLATE_DRIVER [TEMPLATE]
<a name="504"><q-n>     504  </q-n></a>class template_driver extends uvm_driver#(template_transaction);
<a name="505"><q-n>     505  </q-n></a>    `uvm_component_utils(template_driver)
<a name="506"><q-n>     506  </q-n></a>    virtual template_if templateVif;
<a name="507"><q-n>     507  </q-n></a>    function new(string name, uvm_component parent);
<a name="508"><q-n>     508  </q-n></a>        super.new(name, parent);
<a name="509"><q-n>     509  </q-n></a>    endfunction: new
<a name="510"><q-n>     510  </q-n></a>    function void build_phase(uvm_phase phase);
<a name="511"><q-n>     511  </q-n></a>        super.build_phase(phase);
<a name="512"><q-n>     512  </q-n></a>        void'(uvm_resource_db#(virtual template_if)::read_by_name
<a name="513"><q-n>     513  </q-n></a>            (.scope("ifs"), .name("template_if"), .val(templateVif)));
<a name="514"><q-n>     514  </q-n></a>    endfunction: build_phase
<a name="515"><q-n>     515  </q-n></a>    task run_phase(uvm_phase phase);
<a name="516"><q-n>     516  </q-n></a>        drive();
<a name="517"><q-n>     517  </q-n></a>    endtask: run_phase
<a name="518"><q-n>     518  </q-n></a>    virtual task drive();
<a name="519"><q-n>     519  </q-n></a>        template_transaction tx;
<a name="520"><q-n>     520  </q-n></a>        integer counter = 0, state = 0;
<a name="521"><q-n>     521  </q-n></a>        templateVif.sig_ina = 0'b0;
<a name="522"><q-n>     522  </q-n></a>        templateVif.sig_inb = 0'b0;
<a name="523"><q-n>     523  </q-n></a>        templateVif.sig_en_i = 1'b0;
<a name="524"><q-n>     524  </q-n></a>        forever begin
<a name="525"><q-n>     525  </q-n></a>            if(counter==0)
<a name="526"><q-n>     526  </q-n></a>            begin
<a name="527"><q-n>     527  </q-n></a>                seq_item_port.get_next_item(tx);
<a name="528"><q-n>     528  </q-n></a>            end
<a name="529"><q-n>     529  </q-n></a>            @(posedge templateVif.sig_clock)
<a name="530"><q-n>     530  </q-n></a>            begin
<a name="531"><q-n>     531  </q-n></a>                if(counter==0)
<a name="532"><q-n>     532  </q-n></a>                begin
<a name="533"><q-n>     533  </q-n></a>                    templateVif.sig_en_i = 1'b1;
<a name="534"><q-n>     534  </q-n></a>                    state = 1;
<a name="535"><q-n>     535  </q-n></a>                end
<a name="536"><q-n>     536  </q-n></a>                if(counter==1)
<a name="537"><q-n>     537  </q-n></a>                begin
<a name="538"><q-n>     538  </q-n></a>                    templateVif.sig_en_i = 1'b0;
<a name="539"><q-n>     539  </q-n></a>                end
<a name="540"><q-n>     540  </q-n></a>                case(state)
<a name="541"><q-n>     541  </q-n></a>                    1: begin
<a name="542"><q-n>     542  </q-n></a>                        templateVif.sig_ina = tx.ina[1];
<a name="543"><q-n>     543  </q-n></a>                        templateVif.sig_inb = tx.inb[1];
<a name="544"><q-n>     544  </q-n></a>                        tx.ina = tx.ina &lt;&lt; 1;
<a name="545"><q-n>     545  </q-n></a>                        tx.inb = tx.inb &lt;&lt; 1;
<a name="546"><q-n>     546  </q-n></a>                        counter = counter + 1;
<a name="547"><q-n>     547  </q-n></a>                        if(counter==2) state = 2;
<a name="548"><q-n>     548  </q-n></a>                    end
<a name="549"><q-n>     549  </q-n></a>                    2: begin
<a name="550"><q-n>     550  </q-n></a>                        templateVif.sig_ina = 1'b0;
<a name="551"><q-n>     551  </q-n></a>                        templateVif.sig_inb = 1'b0;
<a name="552"><q-n>     552  </q-n></a>                        counter = counter + 1;
<a name="553"><q-n>     553  </q-n></a>                        if(counter==6)
<a name="554"><q-n>     554  </q-n></a>                        begin
<a name="555"><q-n>     555  </q-n></a>                            counter = 0;
<a name="556"><q-n>     556  </q-n></a>                            state = 0;
<a name="557"><q-n>     557  </q-n></a>                            seq_item_port.item_done();
<a name="558"><q-n>     558  </q-n></a>                        end
<a name="559"><q-n>     559  </q-n></a>                    end
<a name="560"><q-n>     560  </q-n></a>                endcase
<a name="561"><q-n>     561  </q-n></a>            end
<a name="562"><q-n>     562  </q-n></a>        end
<a name="563"><q-n>     563  </q-n></a>    endtask: drive
<a name="564"><q-n>     564  </q-n></a>endclass: template_driver
<a name="565"><q-n>     565  </q-n></a>// UVM_DRIVER : RGB_DRIVER [RGB]
<a name="566"><q-n>     566  </q-n></a>class rgb_driver extends uvm_driver#(rgb_transaction);
<a name="567"><q-n>     567  </q-n></a>    `uvm_component_utils(rgb_driver)
<a name="568"><q-n>     568  </q-n></a>    virtual rgb_if frame_vi;
<a name="569"><q-n>     569  </q-n></a>    function new(string name, uvm_component parent);
<a name="570"><q-n>     570  </q-n></a>        super.new(name, parent);
<a name="571"><q-n>     571  </q-n></a>    endfunction: new
<a name="572"><q-n>     572  </q-n></a>    function void build_phase(uvm_phase phase);
<a name="573"><q-n>     573  </q-n></a>        super.build_phase(phase);
<a name="574"><q-n>     574  </q-n></a>        void'(uvm_resource_db#(virtual rgb_if)::read_by_name(.scope("ifs"),.name("rgb_if"),.val(frame_vi)));
<a name="575"><q-n>     575  </q-n></a>    endfunction: build_phase
<a name="576"><q-n>     576  </q-n></a>    task run_phase(uvm_phase phase);
<a name="577"><q-n>     577  </q-n></a>        rgb_transaction frame_tx;
<a name="578"><q-n>     578  </q-n></a>        forever begin
<a name="579"><q-n>     579  </q-n></a>            @frame_vi.master_cb;
<a name="580"><q-n>     580  </q-n></a>            seq_item_port.get_next_item(frame_tx);
<a name="581"><q-n>     581  </q-n></a>            @frame_vi.master_cb;
<a name="582"><q-n>     582  </q-n></a>            frame_vi.master_cb.iRed        &lt;= frame_tx.iRed;
<a name="583"><q-n>     583  </q-n></a>            frame_vi.master_cb.iGreen      &lt;= frame_tx.iGreen;
<a name="584"><q-n>     584  </q-n></a>            frame_vi.master_cb.iBlue       &lt;= frame_tx.iBlue;
<a name="585"><q-n>     585  </q-n></a>            frame_vi.master_cb.iX          &lt;= frame_tx.iX;
<a name="586"><q-n>     586  </q-n></a>            frame_vi.master_cb.iY          &lt;= frame_tx.iY;
<a name="587"><q-n>     587  </q-n></a>            frame_vi.master_cb.iPixelEn    &lt;= frame_tx.iPixelEn;
<a name="588"><q-n>     588  </q-n></a>            frame_vi.master_cb.iValid      &lt;= frame_tx.iValid;
<a name="589"><q-n>     589  </q-n></a>            frame_vi.master_cb.iEof        &lt;= frame_tx.iEof;
<a name="590"><q-n>     590  </q-n></a>            seq_item_port.item_done();
<a name="591"><q-n>     591  </q-n></a>        end
<a name="592"><q-n>     592  </q-n></a>    endtask: run_phase
<a name="593"><q-n>     593  </q-n></a>endclass: rgb_driver
<a name="594"><q-n>     594  </q-n></a>
<a name="595"><q-n>     595  </q-n></a>
<a name="596"><q-n>     596  </q-n></a>
<a name="597"><q-n>     597  </q-n></a>//----------------------------------------------------------------------------------//
<a name="598"><q-n>     598  </q-n></a>// UVM_MONITOR
<a name="599"><q-n>     599  </q-n></a>//----------------------------------------------------------------------------------//
<a name="600"><q-n>     600  </q-n></a>// UVM_MONITOR : AXILITE_MON [AXILITE]
<a name="601"><q-n>     601  </q-n></a>class axiLite_monitor extends uvm_monitor;
<a name="602"><q-n>     602  </q-n></a>    protected virtual   axiLite_if axiLiteVif;
<a name="603"><q-n>     603  </q-n></a>    protected int       id;
<a name="604"><q-n>     604  </q-n></a>    uvm_analysis_port #(axiLite_transaction) item_collected_port;
<a name="605"><q-n>     605  </q-n></a>    uvm_analysis_port #(axiLite_transaction) dut_inputs_port; // analysis port for DUT inputs
<a name="606"><q-n>     606  </q-n></a>    uvm_analysis_port #(axiLite_transaction) dut_outputs_port; // analysis port for DUT outputs
<a name="607"><q-n>     607  </q-n></a>    protected axiLite_transaction aL_txn;
<a name="608"><q-n>     608  </q-n></a>    `uvm_component_utils_begin(axiLite_monitor)
<a name="609"><q-n>     609  </q-n></a>        `uvm_field_int(id, UVM_DEFAULT)
<a name="610"><q-n>     610  </q-n></a>    `uvm_component_utils_end
<a name="611"><q-n>     611  </q-n></a>    function new (string name, uvm_component parent);
<a name="612"><q-n>     612  </q-n></a>        super.new(name, parent);
<a name="613"><q-n>     613  </q-n></a>        aL_txn = new();
<a name="614"><q-n>     614  </q-n></a>        item_collected_port = new("item_collected_port", this);
<a name="615"><q-n>     615  </q-n></a>       // dut_inputs_port = new("dut_inputs_port", this); // construct the analysis port
<a name="616"><q-n>     616  </q-n></a>        //dut_outputs_port = new("dut_outputs_port", this); // construct the analysis port
<a name="617"><q-n>     617  </q-n></a>    endfunction
<a name="618"><q-n>     618  </q-n></a>    function void build_phase (uvm_phase phase);
<a name="619"><q-n>     619  </q-n></a>        super.build_phase(phase);
<a name="620"><q-n>     620  </q-n></a>        if(!uvm_config_db#(virtual axiLite_if)::get(this, "", "axiLiteVif", axiLiteVif))
<a name="621"><q-n>     621  </q-n></a>        `uvm_fatal("NOVIF",{"virtual interface must be set for: ",get_full_name(), ".axiLiteVif"});
<a name="622"><q-n>     622  </q-n></a>        dut_inputs_port = new(.name("dut_inputs_port"),.parent(this));
<a name="623"><q-n>     623  </q-n></a>        dut_outputs_port = new(.name("dut_outputs_port"),.parent(this));
<a name="624"><q-n>     624  </q-n></a>    endfunction // build_phase
<a name="625"><q-n>     625  </q-n></a>    virtual task run_phase (uvm_phase phase);
<a name="626"><q-n>     626  </q-n></a>        fork
<a name="627"><q-n>     627  </q-n></a>            collect_transactions();
<a name="628"><q-n>     628  </q-n></a>        join
<a name="629"><q-n>     629  </q-n></a>    endtask: run_phase
<a name="630"><q-n>     630  </q-n></a>    virtual protected task collect_transactions();
<a name="631"><q-n>     631  </q-n></a>        bit valid_txn = 0;
<a name="632"><q-n>     632  </q-n></a>        forever begin
<a name="633"><q-n>     633  </q-n></a>            axiLite_transaction tx_in,tx_out,tx_copy;
<a name="634"><q-n>     634  </q-n></a>            tx_in       = axiLite_transaction::type_id::create("tx_in"); 
<a name="635"><q-n>     635  </q-n></a>            tx_out      = axiLite_transaction::type_id::create("tx_out");
<a name="636"><q-n>     636  </q-n></a>            aL_txn      = new();
<a name="637"><q-n>     637  </q-n></a>            if (axiLiteVif.ARESETN == 'b0)
<a name="638"><q-n>     638  </q-n></a>            @(posedge axiLiteVif.ARESETN);
<a name="639"><q-n>     639  </q-n></a>                if (axiLiteVif.AWVALID == 'b1) begin
<a name="640"><q-n>     640  </q-n></a>                    tx_in.WDATA = axiLiteVif.WDATA; 
<a name="641"><q-n>     641  </q-n></a>                    aL_txn.reqWriteRead = WRITE;    
<a name="642"><q-n>     642  </q-n></a>                    aL_txn.addr  = axiLiteVif.AWADDR[7:0];
<a name="643"><q-n>     643  </q-n></a>                    @(posedge axiLiteVif.WVALID);
<a name="644"><q-n>     644  </q-n></a>                    aL_txn.data  = axiLiteVif.WDATA;
<a name="645"><q-n>     645  </q-n></a>                    @(negedge axiLiteVif.WVALID);
<a name="646"><q-n>     646  </q-n></a>                    valid_txn = 1;
<a name="647"><q-n>     647  </q-n></a>                end
<a name="648"><q-n>     648  </q-n></a>            else if (axiLiteVif.ARVALID == 'b1) begin
<a name="649"><q-n>     649  </q-n></a>                tx_out.RDATA = axiLiteVif.RDATA; 
<a name="650"><q-n>     650  </q-n></a>                aL_txn.reqWriteRead = READ;    
<a name="651"><q-n>     651  </q-n></a>                aL_txn.addr  = axiLiteVif.ARADDR[7:0];
<a name="652"><q-n>     652  </q-n></a>                @(posedge axiLiteVif.RVALID);
<a name="653"><q-n>     653  </q-n></a>                aL_txn.data  = axiLiteVif.RDATA;
<a name="654"><q-n>     654  </q-n></a>                @(negedge axiLiteVif.RVALID);
<a name="655"><q-n>     655  </q-n></a>                valid_txn = 1;
<a name="656"><q-n>     656  </q-n></a>            end
<a name="657"><q-n>     657  </q-n></a>            @(posedge axiLiteVif.ACLK);
<a name="658"><q-n>     658  </q-n></a>            //aL_txn.data = axiLiteVif.data;
<a name="659"><q-n>     659  </q-n></a>            //while (axiLiteVif.valid == 'b1) begin
<a name="660"><q-n>     660  </q-n></a>            //@(posedge axiLiteVif.ACLK);
<a name="661"><q-n>     661  </q-n></a>            //aL_txn.cycles++;
<a name="662"><q-n>     662  </q-n></a>            //end
<a name="663"><q-n>     663  </q-n></a>            //aL_txn.cycles--;
<a name="664"><q-n>     664  </q-n></a>             //`uvm_info("axiLiteVif data", aL_txn.sprint(), UVM_LOW);
<a name="665"><q-n>     665  </q-n></a>                if (valid_txn == 'b1 ) begin
<a name="666"><q-n>     666  </q-n></a>                    //`uvm_info("MON", aL_txn.convert2string(), UVM_LOW) 
<a name="667"><q-n>     667  </q-n></a>                    item_collected_port.write(aL_txn);
<a name="668"><q-n>     668  </q-n></a>                    //item_collected_port.write(aL_txn);
<a name="669"><q-n>     669  </q-n></a>                end
<a name="670"><q-n>     670  </q-n></a>            dut_inputs_port.write(tx_in);  
<a name="671"><q-n>     671  </q-n></a>            $cast(tx_copy, tx_out.clone());
<a name="672"><q-n>     672  </q-n></a>            dut_outputs_port.write(tx_copy);             
<a name="673"><q-n>     673  </q-n></a>            valid_txn = 0;
<a name="674"><q-n>     674  </q-n></a>        end
<a name="675"><q-n>     675  </q-n></a>    endtask: collect_transactions
<a name="676"><q-n>     676  </q-n></a>endclass: axiLite_monitor
<a name="677"><q-n>     677  </q-n></a>// UVM_MONITOR : TEMPLATE_MONITOR_AFTERTODUT [TEMPLATE]
<a name="678"><q-n>     678  </q-n></a>//The second monitor, monitor_afterToDut, will get both inputs 
<a name="679"><q-n>     679  </q-n></a>//and make a prediction of the expected result. 
<a name="680"><q-n>     680  </q-n></a>//The scoreboard will get this predicted result as well and make a comparison between the two values.
<a name="681"><q-n>     681  </q-n></a>class template_monitor_afterToDut extends uvm_monitor;
<a name="682"><q-n>     682  </q-n></a>    `uvm_component_utils(template_monitor_afterToDut)
<a name="683"><q-n>     683  </q-n></a>    uvm_analysis_port#(template_transaction) mon_ap_afterToDut;
<a name="684"><q-n>     684  </q-n></a>    virtual template_if templateVif;
<a name="685"><q-n>     685  </q-n></a>    template_transaction tx;
<a name="686"><q-n>     686  </q-n></a>    //For coverage
<a name="687"><q-n>     687  </q-n></a>    template_transaction sa_tx_cg;
<a name="688"><q-n>     688  </q-n></a>    //Define coverpoints
<a name="689"><q-n>     689  </q-n></a>    covergroup template_cg;
<a name="690"><q-n>     690  </q-n></a>              ina_cp:     coverpoint sa_tx_cg.ina;
<a name="691"><q-n>     691  </q-n></a>              inb_cp:     coverpoint sa_tx_cg.inb;
<a name="692"><q-n>     692  </q-n></a>        cross ina_cp, inb_cp;
<a name="693"><q-n>     693  </q-n></a>    endgroup: template_cg
<a name="694"><q-n>     694  </q-n></a>    function new(string name, uvm_component parent);
<a name="695"><q-n>     695  </q-n></a>        super.new(name, parent);
<a name="696"><q-n>     696  </q-n></a>        template_cg = new;
<a name="697"><q-n>     697  </q-n></a>    endfunction: new
<a name="698"><q-n>     698  </q-n></a>    function void build_phase(uvm_phase phase);
<a name="699"><q-n>     699  </q-n></a>        super.build_phase(phase);
<a name="700"><q-n>     700  </q-n></a>        void'(uvm_resource_db#(virtual template_if)::read_by_name(.scope("ifs"), .name("template_if"), .val(templateVif)));
<a name="701"><q-n>     701  </q-n></a>        mon_ap_afterToDut= new(.name("mon_ap_afterToDut"), .parent(this));
<a name="702"><q-n>     702  </q-n></a>    endfunction: build_phase
<a name="703"><q-n>     703  </q-n></a>    task run_phase(uvm_phase phase);
<a name="704"><q-n>     704  </q-n></a>        integer counter_mon = 0, state = 0;
<a name="705"><q-n>     705  </q-n></a>        tx = template_transaction::type_id::create
<a name="706"><q-n>     706  </q-n></a>            (.name("tx"), .contxt(get_full_name()));
<a name="707"><q-n>     707  </q-n></a>        forever begin
<a name="708"><q-n>     708  </q-n></a>            @(posedge templateVif.sig_clock)
<a name="709"><q-n>     709  </q-n></a>            begin
<a name="710"><q-n>     710  </q-n></a>                if(templateVif.sig_en_i==1'b1)
<a name="711"><q-n>     711  </q-n></a>                begin
<a name="712"><q-n>     712  </q-n></a>                    state = 1;
<a name="713"><q-n>     713  </q-n></a>                    tx.ina = 2'b00;
<a name="714"><q-n>     714  </q-n></a>                    tx.inb = 2'b00;
<a name="715"><q-n>     715  </q-n></a>                    tx.out = 3'b000;
<a name="716"><q-n>     716  </q-n></a>                end
<a name="717"><q-n>     717  </q-n></a>                if(state==1)
<a name="718"><q-n>     718  </q-n></a>                begin
<a name="719"><q-n>     719  </q-n></a>                    tx.ina    = tx.ina &lt;&lt; 1;
<a name="720"><q-n>     720  </q-n></a>                    tx.inb    = tx.inb &lt;&lt; 1;
<a name="721"><q-n>     721  </q-n></a>                    tx.ina[0] = templateVif.sig_ina;
<a name="722"><q-n>     722  </q-n></a>                    tx.inb[0] = templateVif.sig_inb;
<a name="723"><q-n>     723  </q-n></a>                    counter_mon = counter_mon + 1;
<a name="724"><q-n>     724  </q-n></a>                    if(counter_mon==2)
<a name="725"><q-n>     725  </q-n></a>                    begin
<a name="726"><q-n>     726  </q-n></a>                        state = 0;
<a name="727"><q-n>     727  </q-n></a>                        counter_mon = 0;
<a name="728"><q-n>     728  </q-n></a>                        //Predict the result
<a name="729"><q-n>     729  </q-n></a>                        predictor();
<a name="730"><q-n>     730  </q-n></a>                        sa_tx_cg = tx;
<a name="731"><q-n>     731  </q-n></a>                        //Coverage
<a name="732"><q-n>     732  </q-n></a>                        template_cg.sample();
<a name="733"><q-n>     733  </q-n></a>                        //Send the transaction to the analysis port
<a name="734"><q-n>     734  </q-n></a>                        mon_ap_afterToDut.write(tx);
<a name="735"><q-n>     735  </q-n></a>                    end
<a name="736"><q-n>     736  </q-n></a>                end
<a name="737"><q-n>     737  </q-n></a>            end
<a name="738"><q-n>     738  </q-n></a>        end
<a name="739"><q-n>     739  </q-n></a>    endtask: run_phase
<a name="740"><q-n>     740  </q-n></a>    virtual function void predictor();
<a name="741"><q-n>     741  </q-n></a>        tx.out = tx.ina + tx.inb;//Predict out value
<a name="742"><q-n>     742  </q-n></a>    endfunction: predictor
<a name="743"><q-n>     743  </q-n></a>endclass: template_monitor_afterToDut
<a name="744"><q-n>     744  </q-n></a>// UVM_MONITOR : TEMPLATE_MONITOR_BEFOREFROMDUT [TEMPLATE]
<a name="745"><q-n>     745  </q-n></a>//monitor_beforeFromDut, will look solely for the output of the device 
<a name="746"><q-n>     746  </q-n></a>//and it will pass the result to the scoreboard.
<a name="747"><q-n>     747  </q-n></a>class template_monitor_beforeFromDut extends uvm_monitor;
<a name="748"><q-n>     748  </q-n></a>    `uvm_component_utils(template_monitor_beforeFromDut)
<a name="749"><q-n>     749  </q-n></a>    uvm_analysis_port#(template_transaction) mon_ap_beforeFromDut;
<a name="750"><q-n>     750  </q-n></a>    virtual template_if templateVif;
<a name="751"><q-n>     751  </q-n></a>    function new(string name, uvm_component parent);
<a name="752"><q-n>     752  </q-n></a>        super.new(name, parent);
<a name="753"><q-n>     753  </q-n></a>    endfunction: new
<a name="754"><q-n>     754  </q-n></a>    function void build_phase(uvm_phase phase);
<a name="755"><q-n>     755  </q-n></a>        super.build_phase(phase);
<a name="756"><q-n>     756  </q-n></a>        void'(uvm_resource_db#(virtual template_if)::read_by_name
<a name="757"><q-n>     757  </q-n></a>            (.scope("ifs"), .name("template_if"), .val(templateVif)));
<a name="758"><q-n>     758  </q-n></a>        mon_ap_beforeFromDut = new(.name("mon_ap_beforeFromDut"), .parent(this));
<a name="759"><q-n>     759  </q-n></a>    endfunction: build_phase
<a name="760"><q-n>     760  </q-n></a>    task run_phase(uvm_phase phase);
<a name="761"><q-n>     761  </q-n></a>        integer counter_mon = 0, state = 0;
<a name="762"><q-n>     762  </q-n></a>        template_transaction tx;
<a name="763"><q-n>     763  </q-n></a>        tx = template_transaction::type_id::create
<a name="764"><q-n>     764  </q-n></a>            (.name("tx"), .contxt(get_full_name()));
<a name="765"><q-n>     765  </q-n></a>        forever begin
<a name="766"><q-n>     766  </q-n></a>            @(posedge templateVif.sig_clock)
<a name="767"><q-n>     767  </q-n></a>            begin
<a name="768"><q-n>     768  </q-n></a>                if(templateVif.sig_en_o==1'b1)begin
<a name="769"><q-n>     769  </q-n></a>                    state = 3;
<a name="770"><q-n>     770  </q-n></a>                end
<a name="771"><q-n>     771  </q-n></a>                if(state==3)begin
<a name="772"><q-n>     772  </q-n></a>                    tx.out = tx.out &lt;&lt; 1;
<a name="773"><q-n>     773  </q-n></a>                    counter_mon = counter_mon + 1;
<a name="774"><q-n>     774  </q-n></a>                    if (counter_mon==3)begin
<a name="775"><q-n>     775  </q-n></a>                        tx.out[0]=templateVif.sig_out;
<a name="776"><q-n>     776  </q-n></a>                    end
<a name="777"><q-n>     777  </q-n></a>                    if(counter_mon==4)begin
<a name="778"><q-n>     778  </q-n></a>                        state       = 0;
<a name="779"><q-n>     779  </q-n></a>                        counter_mon = 0;
<a name="780"><q-n>     780  </q-n></a>                        //Send the transaction to the analysis port
<a name="781"><q-n>     781  </q-n></a>                        mon_ap_beforeFromDut.write(tx);
<a name="782"><q-n>     782  </q-n></a>                    end
<a name="783"><q-n>     783  </q-n></a>                end
<a name="784"><q-n>     784  </q-n></a>            end
<a name="785"><q-n>     785  </q-n></a>        end
<a name="786"><q-n>     786  </q-n></a>    endtask: run_phase
<a name="787"><q-n>     787  </q-n></a>endclass: template_monitor_beforeFromDut
<a name="788"><q-n>     788  </q-n></a>// UVM_MONITOR : RGB_MONITOR [RGB]
<a name="789"><q-n>     789  </q-n></a>class rgb_monitor extends uvm_monitor;
<a name="790"><q-n>     790  </q-n></a>    `uvm_component_utils(rgb_monitor)
<a name="791"><q-n>     791  </q-n></a>    uvm_analysis_port#(rgb_transaction) frame_ap;
<a name="792"><q-n>     792  </q-n></a>    virtual rgb_if frame_vi;
<a name="793"><q-n>     793  </q-n></a>    function new(string name, uvm_component parent);
<a name="794"><q-n>     794  </q-n></a>        super.new(name, parent);
<a name="795"><q-n>     795  </q-n></a>    endfunction: new
<a name="796"><q-n>     796  </q-n></a>    function void build_phase(uvm_phase phase);
<a name="797"><q-n>     797  </q-n></a>        super.build_phase(phase);
<a name="798"><q-n>     798  </q-n></a>        void'(uvm_resource_db#(virtual rgb_if)::read_by_name
<a name="799"><q-n>     799  </q-n></a>        (.scope("ifs"),.name("rgb_if"),.val(frame_vi)));
<a name="800"><q-n>     800  </q-n></a>        frame_ap = new(.name("frame_ap"),.parent(this));
<a name="801"><q-n>     801  </q-n></a>    endfunction: build_phase
<a name="802"><q-n>     802  </q-n></a>    task run_phase(uvm_phase phase);
<a name="803"><q-n>     803  </q-n></a>        forever begin
<a name="804"><q-n>     804  </q-n></a>            rgb_transaction frame_tx;
<a name="805"><q-n>     805  </q-n></a>            @frame_vi.slave_cb;
<a name="806"><q-n>     806  </q-n></a>            frame_tx               = rgb_transaction::type_id::create(.name("frame_tx"));
<a name="807"><q-n>     807  </q-n></a>            frame_tx.iRed          = frame_vi.slave_cb.iRed;
<a name="808"><q-n>     808  </q-n></a>            frame_tx.iGreen        = frame_vi.slave_cb.iGreen;
<a name="809"><q-n>     809  </q-n></a>            frame_tx.iBlue         = frame_vi.slave_cb.iBlue;
<a name="810"><q-n>     810  </q-n></a>            frame_tx.iPixelEn      = frame_vi.slave_cb.iPixelEn;
<a name="811"><q-n>     811  </q-n></a>            frame_tx.iValid        = frame_vi.slave_cb.iValid;
<a name="812"><q-n>     812  </q-n></a>            frame_tx.iEof          = frame_vi.slave_cb.iEof;
<a name="813"><q-n>     813  </q-n></a>            frame_tx.iX            = frame_vi.slave_cb.iX;
<a name="814"><q-n>     814  </q-n></a>            frame_tx.iY            = frame_vi.slave_cb.iY;
<a name="815"><q-n>     815  </q-n></a>            frame_ap.write(frame_tx);
<a name="816"><q-n>     816  </q-n></a>        end
<a name="817"><q-n>     817  </q-n></a>    endtask: run_phase
<a name="818"><q-n>     818  </q-n></a>endclass: rgb_monitor
<a name="819"><q-n>     819  </q-n></a>
<a name="820"><q-n>     820  </q-n></a>
<a name="821"><q-n>     821  </q-n></a>
<a name="822"><q-n>     822  </q-n></a>//----------------------------------------------------------------------------------//
<a name="823"><q-n>     823  </q-n></a>// UVM_AGENT
<a name="824"><q-n>     824  </q-n></a>//----------------------------------------------------------------------------------//
<a name="825"><q-n>     825  </q-n></a>// UVM_AGENT : AXILITE_AGT [AXILITE]
<a name="826"><q-n>     826  </q-n></a>class axiLite_agent extends uvm_agent;
<a name="827"><q-n>     827  </q-n></a>    `uvm_component_utils(axiLite_agent)
<a name="828"><q-n>     828  </q-n></a>    uvm_analysis_port#(axiLite_transaction) item_collected_port;
<a name="829"><q-n>     829  </q-n></a>    axiLite_sequencer       aL_sqr;
<a name="830"><q-n>     830  </q-n></a>    axiLite_driver          aL_drv;
<a name="831"><q-n>     831  </q-n></a>    axiLite_monitor         aL_mon;
<a name="832"><q-n>     832  </q-n></a>    function new (string name, uvm_component parent);
<a name="833"><q-n>     833  </q-n></a>        super.new(name, parent);
<a name="834"><q-n>     834  </q-n></a>    endfunction
<a name="835"><q-n>     835  </q-n></a>    function void build_phase(uvm_phase phase);
<a name="836"><q-n>     836  </q-n></a>        super.build_phase(phase);
<a name="837"><q-n>     837  </q-n></a>        item_collected_port    = new(.name("item_collected_port"),.parent(this));
<a name="838"><q-n>     838  </q-n></a>        aL_mon                 = axiLite_monitor::type_id::create("aL_mon", this);
<a name="839"><q-n>     839  </q-n></a>        if (get_is_active() == UVM_ACTIVE) begin
<a name="840"><q-n>     840  </q-n></a>            aL_sqr = axiLite_sequencer::type_id::create("aL_sqr", this);
<a name="841"><q-n>     841  </q-n></a>            aL_drv = axiLite_driver::type_id::create("aL_drv", this);
<a name="842"><q-n>     842  </q-n></a>        end
<a name="843"><q-n>     843  </q-n></a>    endfunction
<a name="844"><q-n>     844  </q-n></a>    function void connect_phase(uvm_phase phase);
<a name="845"><q-n>     845  </q-n></a>        if (get_is_active() == UVM_ACTIVE) begin
<a name="846"><q-n>     846  </q-n></a>            aL_drv.seq_item_port.connect(aL_sqr.seq_item_export);
<a name="847"><q-n>     847  </q-n></a>            aL_mon.item_collected_port.connect(item_collected_port);
<a name="848"><q-n>     848  </q-n></a>        end
<a name="849"><q-n>     849  </q-n></a>    endfunction
<a name="850"><q-n>     850  </q-n></a>endclass: axiLite_agent
<a name="851"><q-n>     851  </q-n></a>// UVM_AGENT : RGB_AGENT [RGB]
<a name="852"><q-n>     852  </q-n></a>class rgb_agent extends uvm_agent;
<a name="853"><q-n>     853  </q-n></a>    `uvm_component_utils(rgb_agent)
<a name="854"><q-n>     854  </q-n></a>    uvm_analysis_port#(rgb_transaction)  frame_ap;
<a name="855"><q-n>     855  </q-n></a>    rgb_sequencer                        frame_seqr;
<a name="856"><q-n>     856  </q-n></a>    rgb_driver                           frame_drvr;
<a name="857"><q-n>     857  </q-n></a>    rgb_monitor                          frame_mon;
<a name="858"><q-n>     858  </q-n></a>    function new(string name, uvm_component parent);
<a name="859"><q-n>     859  </q-n></a>        super.new(name, parent);
<a name="860"><q-n>     860  </q-n></a>    endfunction: new
<a name="861"><q-n>     861  </q-n></a>    function void build_phase(uvm_phase phase);
<a name="862"><q-n>     862  </q-n></a>        super.build_phase(phase);
<a name="863"><q-n>     863  </q-n></a>        frame_ap    = new(.name("frame_ap"),.parent(this));
<a name="864"><q-n>     864  </q-n></a>        frame_seqr = rgb_sequencer  ::type_id::create(.name("frame_seqr"),.parent(this));
<a name="865"><q-n>     865  </q-n></a>        frame_drvr = rgb_driver     ::type_id::create(.name("frame_drvr"),.parent(this));
<a name="866"><q-n>     866  </q-n></a>        frame_mon  = rgb_monitor    ::type_id::create(.name("frame_mon"),.parent(this));
<a name="867"><q-n>     867  </q-n></a>    endfunction: build_phase
<a name="868"><q-n>     868  </q-n></a>    function void connect_phase(uvm_phase phase);
<a name="869"><q-n>     869  </q-n></a>        super.connect_phase(phase);
<a name="870"><q-n>     870  </q-n></a>        frame_drvr.seq_item_port.connect(frame_seqr.seq_item_export);
<a name="871"><q-n>     871  </q-n></a>        frame_mon.frame_ap.connect(frame_ap);
<a name="872"><q-n>     872  </q-n></a>    endfunction: connect_phase
<a name="873"><q-n>     873  </q-n></a>endclass: rgb_agent
<a name="874"><q-n>     874  </q-n></a>// UVM_AGENT : TEMPLATE_AGENT [TEMPLATE]
<a name="875"><q-n>     875  </q-n></a>class template_agent extends uvm_agent;
<a name="876"><q-n>     876  </q-n></a>    `uvm_component_utils(template_agent)
<a name="877"><q-n>     877  </q-n></a>    uvm_analysis_port#(template_transaction) agent_ap_beforeFromDut;
<a name="878"><q-n>     878  </q-n></a>    uvm_analysis_port#(template_transaction) agent_ap_afterToDut;
<a name="879"><q-n>     879  </q-n></a>    template_sequencer                       sa_seqr;
<a name="880"><q-n>     880  </q-n></a>    template_driver                          sa_drvr;
<a name="881"><q-n>     881  </q-n></a>    template_monitor_beforeFromDut           sa_mon_beforeFromDut;
<a name="882"><q-n>     882  </q-n></a>    template_monitor_afterToDut              sa_mon_afterToDut;
<a name="883"><q-n>     883  </q-n></a>    function new(string name, uvm_component parent);
<a name="884"><q-n>     884  </q-n></a>        super.new(name, parent);
<a name="885"><q-n>     885  </q-n></a>    endfunction: new
<a name="886"><q-n>     886  </q-n></a>    function void build_phase(uvm_phase phase);
<a name="887"><q-n>     887  </q-n></a>        super.build_phase(phase);
<a name="888"><q-n>     888  </q-n></a>        agent_ap_beforeFromDut      = new(.name("agent_ap_beforeFromDut"), .parent(this));
<a name="889"><q-n>     889  </q-n></a>        agent_ap_afterToDut         = new(.name("agent_ap_afterToDut"), .parent(this));
<a name="890"><q-n>     890  </q-n></a>        sa_seqr                     = template_sequencer::type_id::create(.name("sa_seqr"), .parent(this));
<a name="891"><q-n>     891  </q-n></a>        sa_drvr                     = template_driver::type_id::create(.name("sa_drvr"), .parent(this));
<a name="892"><q-n>     892  </q-n></a>        sa_mon_beforeFromDut        = template_monitor_beforeFromDut::type_id::create(.name("sa_mon_beforeFromDut"), .parent(this));
<a name="893"><q-n>     893  </q-n></a>        sa_mon_afterToDut           = template_monitor_afterToDut::type_id::create(.name("sa_mon_afterToDut"), .parent(this));
<a name="894"><q-n>     894  </q-n></a>    endfunction: build_phase
<a name="895"><q-n>     895  </q-n></a>    function void connect_phase(uvm_phase phase);
<a name="896"><q-n>     896  </q-n></a>        super.connect_phase(phase);
<a name="897"><q-n>     897  </q-n></a>        sa_drvr.seq_item_port.connect(sa_seqr.seq_item_export);
<a name="898"><q-n>     898  </q-n></a>        sa_mon_beforeFromDut.mon_ap_beforeFromDut.connect(agent_ap_beforeFromDut);
<a name="899"><q-n>     899  </q-n></a>        sa_mon_afterToDut.mon_ap_afterToDut.connect(agent_ap_afterToDut);
<a name="900"><q-n>     900  </q-n></a>    endfunction: connect_phase
<a name="901"><q-n>     901  </q-n></a>endclass: template_agent
<a name="902"><q-n>     902  </q-n></a>
<a name="903"><q-n>     903  </q-n></a>
<a name="904"><q-n>     904  </q-n></a>
<a name="905"><q-n>     905  </q-n></a>
<a name="906"><q-n>     906  </q-n></a>//----------------------------------------------------------------------------------//
<a name="907"><q-n>     907  </q-n></a>// UVM_SUBSCRIBER
<a name="908"><q-n>     908  </q-n></a>//----------------------------------------------------------------------------------//
<a name="909"><q-n>     909  </q-n></a>// UVM_SUBSCRIBER : AXILITE_FC_SUBSCRIBER [AXILITE]
<a name="910"><q-n>     910  </q-n></a>class axiLite_fc_subscriber extends uvm_subscriber#(axiLite_transaction);
<a name="911"><q-n>     911  </q-n></a>    `uvm_component_utils(axiLite_fc_subscriber)
<a name="912"><q-n>     912  </q-n></a>    axiLite_transaction aL_txn;
<a name="913"><q-n>     913  </q-n></a>    covergroup aL_cg;
<a name="914"><q-n>     914  </q-n></a>        WDATA_cp:            coverpoint aL_txn.WDATA;
<a name="915"><q-n>     915  </q-n></a>        AWADDR_cp:           coverpoint aL_txn.RDATA;
<a name="916"><q-n>     916  </q-n></a>        // cross WDATA_cp, AWADDR_cp;
<a name="917"><q-n>     917  </q-n></a>    endgroup: aL_cg
<a name="918"><q-n>     918  </q-n></a>    function new(string name, uvm_component parent);
<a name="919"><q-n>     919  </q-n></a>        super.new(name, parent);
<a name="920"><q-n>     920  </q-n></a>        aL_cg = new;
<a name="921"><q-n>     921  </q-n></a>    endfunction: new
<a name="922"><q-n>     922  </q-n></a>    function void write(axiLite_transaction t);
<a name="923"><q-n>     923  </q-n></a>        aL_txn = t;
<a name="924"><q-n>     924  </q-n></a>        aL_cg.sample();
<a name="925"><q-n>     925  </q-n></a>    endfunction: write
<a name="926"><q-n>     926  </q-n></a>endclass: axiLite_fc_subscriber
<a name="927"><q-n>     927  </q-n></a>// UVM_SUBSCRIBER : RGB_FC_SUBSCRIBER [RGB]
<a name="928"><q-n>     928  </q-n></a>//The functional coverage subscriber (fc_sucbscriber) identifies 
<a name="929"><q-n>     929  </q-n></a>//the generated frame_tx. 
<a name="930"><q-n>     930  </q-n></a>//The rgb_transaction sent from the monitor is sampled by the write function.
<a name="931"><q-n>     931  </q-n></a>class rgb_fc_subscriber extends uvm_subscriber#(rgb_transaction);
<a name="932"><q-n>     932  </q-n></a>    `uvm_component_utils(rgb_fc_subscriber)
<a name="933"><q-n>     933  </q-n></a>    rgb_transaction frame_tx;
<a name="934"><q-n>     934  </q-n></a>    covergroup rgb_cg;
<a name="935"><q-n>     935  </q-n></a>        iRed_cp:            coverpoint frame_tx.iRed;
<a name="936"><q-n>     936  </q-n></a>        iGreen_cp:          coverpoint frame_tx.iGreen;
<a name="937"><q-n>     937  </q-n></a>        iBlue_cp:           coverpoint frame_tx.iBlue;
<a name="938"><q-n>     938  </q-n></a>        iPixelEn_cp:        coverpoint frame_tx.iPixelEn;
<a name="939"><q-n>     939  </q-n></a>        iValid_cp:          coverpoint frame_tx.iValid;
<a name="940"><q-n>     940  </q-n></a>        iEof_cp:            coverpoint frame_tx.iEof;
<a name="941"><q-n>     941  </q-n></a>        iX_cp:              coverpoint frame_tx.iX;
<a name="942"><q-n>     942  </q-n></a>        iY_cp:              coverpoint frame_tx.iY;
<a name="943"><q-n>     943  </q-n></a>        cross iRed_cp, iEof_cp;
<a name="944"><q-n>     944  </q-n></a>    endgroup: rgb_cg
<a name="945"><q-n>     945  </q-n></a>    function new(string name, uvm_component parent);
<a name="946"><q-n>     946  </q-n></a>        super.new(name, parent);
<a name="947"><q-n>     947  </q-n></a>        rgb_cg = new;
<a name="948"><q-n>     948  </q-n></a>    endfunction: new
<a name="949"><q-n>     949  </q-n></a>    function void write(rgb_transaction t);
<a name="950"><q-n>     950  </q-n></a>        frame_tx = t;
<a name="951"><q-n>     951  </q-n></a>        rgb_cg.sample();
<a name="952"><q-n>     952  </q-n></a>    endfunction: write
<a name="953"><q-n>     953  </q-n></a>endclass: rgb_fc_subscriber
<a name="954"><q-n>     954  </q-n></a>typedef class rgb_scoreboard;
<a name="955"><q-n>     955  </q-n></a>// UVM_SUBSCRIBER : RGB_SB_SUBSCRIBER [RGB]
<a name="956"><q-n>     956  </q-n></a>class rgb_sb_subscriber extends uvm_subscriber#(rgb_transaction);
<a name="957"><q-n>     957  </q-n></a>    `uvm_component_utils(rgb_sb_subscriber)
<a name="958"><q-n>     958  </q-n></a>    function new(string name, uvm_component parent);
<a name="959"><q-n>     959  </q-n></a>        super.new(name, parent);
<a name="960"><q-n>     960  </q-n></a>    endfunction: new
<a name="961"><q-n>     961  </q-n></a>    function void write(rgb_transaction t);
<a name="962"><q-n>     962  </q-n></a>        rgb_scoreboard frame_sb;
<a name="963"><q-n>     963  </q-n></a>        $cast(frame_sb, m_parent);
<a name="964"><q-n>     964  </q-n></a>        frame_sb.check_rgb_taste(t);
<a name="965"><q-n>     965  </q-n></a>    endfunction: write
<a name="966"><q-n>     966  </q-n></a>endclass: rgb_sb_subscriber
<a name="967"><q-n>     967  </q-n></a>
<a name="968"><q-n>     968  </q-n></a>
<a name="969"><q-n>     969  </q-n></a>
<a name="970"><q-n>     970  </q-n></a>
<a name="971"><q-n>     971  </q-n></a>//----------------------------------------------------------------------------------//
<a name="972"><q-n>     972  </q-n></a>// UVM_SCORECARD
<a name="973"><q-n>     973  </q-n></a>//----------------------------------------------------------------------------------//
<a name="974"><q-n>     974  </q-n></a>// UVM_SCORECARD : RGB_SCOREBOARD [RGB]
<a name="975"><q-n>     975  </q-n></a>class rgb_scoreboard extends uvm_scoreboard;
<a name="976"><q-n>     976  </q-n></a>    `uvm_component_utils(rgb_scoreboard)
<a name="977"><q-n>     977  </q-n></a>    uvm_analysis_export#(rgb_transaction)    frame_analysis_export;
<a name="978"><q-n>     978  </q-n></a>    local rgb_sb_subscriber                  frame_sb_sub;
<a name="979"><q-n>     979  </q-n></a>    function new(string name, uvm_component parent);
<a name="980"><q-n>     980  </q-n></a>        super.new(name, parent);
<a name="981"><q-n>     981  </q-n></a>    endfunction: new
<a name="982"><q-n>     982  </q-n></a>    function void build_phase(uvm_phase phase);
<a name="983"><q-n>     983  </q-n></a>        super.build_phase(phase);
<a name="984"><q-n>     984  </q-n></a>        frame_analysis_export = new(.name("frame_analysis_export"),.parent(this));
<a name="985"><q-n>     985  </q-n></a>        frame_sb_sub = rgb_sb_subscriber::type_id::create(.name("frame_sb_sub"),.parent(this));
<a name="986"><q-n>     986  </q-n></a>    endfunction: build_phase
<a name="987"><q-n>     987  </q-n></a>    function void connect_phase(uvm_phase phase);
<a name="988"><q-n>     988  </q-n></a>        super.connect_phase(phase);
<a name="989"><q-n>     989  </q-n></a>        frame_analysis_export.connect(frame_sb_sub.analysis_export);
<a name="990"><q-n>     990  </q-n></a>    endfunction: connect_phase
<a name="991"><q-n>     991  </q-n></a>    virtual function void check_rgb_taste(rgb_transaction frame_tx);
<a name="992"><q-n>     992  </q-n></a>        uvm_table_printer p = new;
<a name="993"><q-n>     993  </q-n></a>    endfunction: check_rgb_taste
<a name="994"><q-n>     994  </q-n></a>endclass: rgb_scoreboard
<a name="995"><q-n>     995  </q-n></a>// UVM_SCORECARD : TEMPLATE_SCOREBOARD [TEMPLATE]
<a name="996"><q-n>     996  </q-n></a>class template_scoreboard extends uvm_scoreboard;
<a name="997"><q-n>     997  </q-n></a>    `uvm_component_utils(template_scoreboard)
<a name="998"><q-n>     998  </q-n></a>    uvm_analysis_export #(template_transaction)     sb_export_beforeFromDut;
<a name="999"><q-n>     999  </q-n></a>    uvm_analysis_export #(template_transaction)     sb_export_afterToDut;
<a name="1000"><q-n>     1000  </q-n></a>    uvm_tlm_analysis_fifo #(template_transaction)   before_fifo;
<a name="1001"><q-n>     1001  </q-n></a>    uvm_tlm_analysis_fifo #(template_transaction)   after_fifo;
<a name="1002"><q-n>     1002  </q-n></a>    template_transaction transaction_beforeFromDut;
<a name="1003"><q-n>     1003  </q-n></a>    template_transaction transaction_afterToDut;
<a name="1004"><q-n>     1004  </q-n></a>    function new(string name, uvm_component parent);
<a name="1005"><q-n>     1005  </q-n></a>        super.new(name, parent);
<a name="1006"><q-n>     1006  </q-n></a>        transaction_beforeFromDut       = new("transaction_beforeFromDut");
<a name="1007"><q-n>     1007  </q-n></a>        transaction_afterToDut          = new("transaction_afterToDut");
<a name="1008"><q-n>     1008  </q-n></a>    endfunction: new
<a name="1009"><q-n>     1009  </q-n></a>    function void build_phase(uvm_phase phase);
<a name="1010"><q-n>     1010  </q-n></a>        super.build_phase(phase);
<a name="1011"><q-n>     1011  </q-n></a>        sb_export_beforeFromDut         = new("sb_export_beforeFromDut", this);
<a name="1012"><q-n>     1012  </q-n></a>        sb_export_afterToDut            = new("sb_export_afterToDut", this);
<a name="1013"><q-n>     1013  </q-n></a>           before_fifo                  = new("before_fifo", this);
<a name="1014"><q-n>     1014  </q-n></a>        after_fifo                      = new("after_fifo", this);
<a name="1015"><q-n>     1015  </q-n></a>    endfunction: build_phase
<a name="1016"><q-n>     1016  </q-n></a>    function void connect_phase(uvm_phase phase);
<a name="1017"><q-n>     1017  </q-n></a>        sb_export_beforeFromDut.connect(before_fifo.analysis_export);
<a name="1018"><q-n>     1018  </q-n></a>        sb_export_afterToDut.connect(after_fifo.analysis_export);
<a name="1019"><q-n>     1019  </q-n></a>    endfunction: connect_phase
<a name="1020"><q-n>     1020  </q-n></a>    task run();
<a name="1021"><q-n>     1021  </q-n></a>        forever begin
<a name="1022"><q-n>     1022  </q-n></a>            before_fifo.get(transaction_beforeFromDut);
<a name="1023"><q-n>     1023  </q-n></a>            after_fifo.get(transaction_afterToDut);
<a name="1024"><q-n>     1024  </q-n></a>            compare();
<a name="1025"><q-n>     1025  </q-n></a>        end
<a name="1026"><q-n>     1026  </q-n></a>    endtask: run
<a name="1027"><q-n>     1027  </q-n></a>    // function string convert2string();
<a name="1028"><q-n>     1028  </q-n></a>        // return $sformatf("addr");
<a name="1029"><q-n>     1029  </q-n></a>    // endfunction
<a name="1030"><q-n>     1030  </q-n></a>    virtual function void compare();
<a name="1031"><q-n>     1031  </q-n></a>    //`uvm_info("FROMDUT", transaction_beforeFromDut.sprint(), UVM_LOW);
<a name="1032"><q-n>     1032  </q-n></a>    //`uvm_info("TODUT", transaction_afterToDut.sprint(), UVM_LOW);
<a name="1033"><q-n>     1033  </q-n></a>        if(transaction_beforeFromDut.out == transaction_afterToDut.out) begin
<a name="1034"><q-n>     1034  </q-n></a>            `uvm_info("compare", {"Test: OK!"}, UVM_LOW);
<a name="1035"><q-n>     1035  </q-n></a>        end else begin
<a name="1036"><q-n>     1036  </q-n></a>            `uvm_info("compare", {"Test: Fail!"}, UVM_LOW);
<a name="1037"><q-n>     1037  </q-n></a>        end
<a name="1038"><q-n>     1038  </q-n></a>    endfunction: compare
<a name="1039"><q-n>     1039  </q-n></a>endclass: template_scoreboard
<a name="1040"><q-n>     1040  </q-n></a>
<a name="1041"><q-n>     1041  </q-n></a>`uvm_analysis_imp_decl(_beforeFromDut)
<a name="1042"><q-n>     1042  </q-n></a>`uvm_analysis_imp_decl(_afterToDut)
<a name="1043"><q-n>     1043  </q-n></a>
<a name="1044"><q-n>     1044  </q-n></a>
<a name="1045"><q-n>     1045  </q-n></a>//----------------------------------------------------------------------------------//
<a name="1046"><q-n>     1046  </q-n></a>// UVM_ENV
<a name="1047"><q-n>     1047  </q-n></a>//----------------------------------------------------------------------------------//
<a name="1048"><q-n>     1048  </q-n></a>// UVM_ENV : TEMPLATE_ENV
<a name="1049"><q-n>     1049  </q-n></a>class template_env extends uvm_env;
<a name="1050"><q-n>     1050  </q-n></a>    `uvm_component_utils(template_env)
<a name="1051"><q-n>     1051  </q-n></a>    protected virtual interface axiLite_if axiLiteVif;
<a name="1052"><q-n>     1052  </q-n></a>    template_agent              sa_agent;       //[TEMPLATE]
<a name="1053"><q-n>     1053  </q-n></a>    template_scoreboard         sa_sb;          //[TEMPLATE]
<a name="1054"><q-n>     1054  </q-n></a>    axiLite_agent               aL_agt;         //[AXILITE]
<a name="1055"><q-n>     1055  </q-n></a>    axiLite_fc_subscriber       aL_fc_sub;      //[AXILITE]
<a name="1056"><q-n>     1056  </q-n></a>    rgb_agent                   frame_agent;    //[RGB]
<a name="1057"><q-n>     1057  </q-n></a>    rgb_fc_subscriber           frame_fc_sub;   //[RGB]
<a name="1058"><q-n>     1058  </q-n></a>    rgb_scoreboard              frame_sb;       //[RGB]
<a name="1059"><q-n>     1059  </q-n></a>    function new(string name, uvm_component parent);
<a name="1060"><q-n>     1060  </q-n></a>        super.new(name, parent);
<a name="1061"><q-n>     1061  </q-n></a>    endfunction: new
<a name="1062"><q-n>     1062  </q-n></a>    function void build_phase(uvm_phase phase);
<a name="1063"><q-n>     1063  </q-n></a>        super.build_phase(phase);
<a name="1064"><q-n>     1064  </q-n></a>        sa_agent        = template_agent     ::type_id::create(.name("sa_agent"), .parent(this));
<a name="1065"><q-n>     1065  </q-n></a>        sa_sb           = template_scoreboard::type_id::create(.name("sa_sb"), .parent(this));
<a name="1066"><q-n>     1066  </q-n></a>        frame_agent     = rgb_agent          ::type_id::create(.name("frame_agent"),.parent(this));
<a name="1067"><q-n>     1067  </q-n></a>        frame_fc_sub    = rgb_fc_subscriber  ::type_id::create(.name("frame_fc_sub"),.parent(this));
<a name="1068"><q-n>     1068  </q-n></a>        frame_sb        = rgb_scoreboard     ::type_id::create(.name("frame_sb"),.parent(this));
<a name="1069"><q-n>     1069  </q-n></a>        if (!uvm_config_db#(virtual axiLite_if)::get(this, "", "axiLiteVif", axiLiteVif))
<a name="1070"><q-n>     1070  </q-n></a>        `uvm_fatal("NOVIF",{"virtual interface must be set for: ",get_full_name(),".axiLiteVif"});
<a name="1071"><q-n>     1071  </q-n></a>        aL_agt          = axiLite_agent::type_id::create("aL_agt", this);
<a name="1072"><q-n>     1072  </q-n></a>        if (!uvm_config_db#(virtual axiLite_if)::get(this, "", "axiLiteVif", axiLiteVif))
<a name="1073"><q-n>     1073  </q-n></a>        `uvm_fatal("NOVIF",{"virtual interface must be set for: ",get_full_name(),".axiLiteVif"});
<a name="1074"><q-n>     1074  </q-n></a>        aL_fc_sub       = axiLite_fc_subscriber::type_id::create("aL_fc_sub", this);
<a name="1075"><q-n>     1075  </q-n></a>    endfunction: build_phase
<a name="1076"><q-n>     1076  </q-n></a>    function void connect_phase(uvm_phase phase);
<a name="1077"><q-n>     1077  </q-n></a>        super.connect_phase(phase);
<a name="1078"><q-n>     1078  </q-n></a>        sa_agent.agent_ap_beforeFromDut.connect(sa_sb.sb_export_beforeFromDut);
<a name="1079"><q-n>     1079  </q-n></a>        sa_agent.agent_ap_afterToDut.connect(sa_sb.sb_export_afterToDut);
<a name="1080"><q-n>     1080  </q-n></a>        aL_agt.item_collected_port.connect(aL_fc_sub.analysis_export);
<a name="1081"><q-n>     1081  </q-n></a>        frame_agent.frame_ap.connect(frame_fc_sub.analysis_export);
<a name="1082"><q-n>     1082  </q-n></a>        frame_agent.frame_ap.connect(frame_sb.frame_analysis_export);
<a name="1083"><q-n>     1083  </q-n></a>    endfunction: connect_phase
<a name="1084"><q-n>     1084  </q-n></a>endclass: template_env
<a name="1085"><q-n>     1085  </q-n></a>
<a name="1086"><q-n>     1086  </q-n></a>
<a name="1087"><q-n>     1087  </q-n></a>
<a name="1088"><q-n>     1088  </q-n></a>//----------------------------------------------------------------------------------//
<a name="1089"><q-n>     1089  </q-n></a>// UVM_TEST
<a name="1090"><q-n>     1090  </q-n></a>//----------------------------------------------------------------------------------//
<a name="1091"><q-n>     1091  </q-n></a>// UVM_TEST : TEMPLATE_TEST [TEMPLATE]
<a name="1092"><q-n>     1092  </q-n></a>class template_test extends uvm_test;
<a name="1093"><q-n>     1093  </q-n></a>    `uvm_component_utils(template_test)
<a name="1094"><q-n>     1094  </q-n></a>    template_env sa_env;
<a name="1095"><q-n>     1095  </q-n></a>    function new(string name, uvm_component parent);
<a name="1096"><q-n>     1096  </q-n></a>        super.new(name, parent);
<a name="1097"><q-n>     1097  </q-n></a>    endfunction: new
<a name="1098"><q-n>     1098  </q-n></a>    function void build_phase(uvm_phase phase);
<a name="1099"><q-n>     1099  </q-n></a>        super.build_phase(phase);
<a name="1100"><q-n>     1100  </q-n></a>        sa_env = template_env::type_id::create(.name("sa_env"), .parent(this));
<a name="1101"><q-n>     1101  </q-n></a>    endfunction: build_phase
<a name="1102"><q-n>     1102  </q-n></a>    function void end_of_elaboration_phase(uvm_phase phase);
<a name="1103"><q-n>     1103  </q-n></a>        super.end_of_elaboration_phase(phase);
<a name="1104"><q-n>     1104  </q-n></a>        this.print();
<a name="1105"><q-n>     1105  </q-n></a>        factory.print();
<a name="1106"><q-n>     1106  </q-n></a>    endfunction
<a name="1107"><q-n>     1107  </q-n></a>    task run_phase(uvm_phase phase);
<a name="1108"><q-n>     1108  </q-n></a>        template_sequence sa_seq;
<a name="1109"><q-n>     1109  </q-n></a>        phase.raise_objection(.obj(this));
<a name="1110"><q-n>     1110  </q-n></a>            sa_seq = template_sequence::type_id::create(.name("sa_seq"), .contxt(get_full_name()));
<a name="1111"><q-n>     1111  </q-n></a>            assert(sa_seq.randomize());
<a name="1112"><q-n>     1112  </q-n></a>        sa_seq.start(sa_env.sa_agent.sa_seqr);
<a name="1113"><q-n>     1113  </q-n></a>        phase.drop_objection(.obj(this));
<a name="1114"><q-n>     1114  </q-n></a>    endtask: run_phase
<a name="1115"><q-n>     1115  </q-n></a>endclass: template_test
<a name="1116"><q-n>     1116  </q-n></a>// UVM_TEST : AXILITE_TEST [AXILITE]
<a name="1117"><q-n>     1117  </q-n></a>class axiLite_test extends uvm_test;
<a name="1118"><q-n>     1118  </q-n></a>    `uvm_component_utils(axiLite_test)
<a name="1119"><q-n>     1119  </q-n></a>    template_env aL_env;
<a name="1120"><q-n>     1120  </q-n></a>    function new(string name, uvm_component parent);
<a name="1121"><q-n>     1121  </q-n></a>        super.new(name, parent);
<a name="1122"><q-n>     1122  </q-n></a>    endfunction: new
<a name="1123"><q-n>     1123  </q-n></a>    function void build_phase(uvm_phase phase);
<a name="1124"><q-n>     1124  </q-n></a>        super.build_phase(phase);
<a name="1125"><q-n>     1125  </q-n></a>        begin
<a name="1126"><q-n>     1126  </q-n></a>            axiLite_configuration axiLite_cfg;
<a name="1127"><q-n>     1127  </q-n></a>            axiLite_cfg = new;
<a name="1128"><q-n>     1128  </q-n></a>            assert(axiLite_cfg.randomize());
<a name="1129"><q-n>     1129  </q-n></a>            uvm_config_db#(axiLite_configuration)::set(.cntxt(this),.inst_name("*"),.field_name("config"),.value(axiLite_cfg));
<a name="1130"><q-n>     1130  </q-n></a>            aL_env = template_env::type_id::create(.name("aL_env"),.parent(this));
<a name="1131"><q-n>     1131  </q-n></a>        end
<a name="1132"><q-n>     1132  </q-n></a>    endfunction: build_phase
<a name="1133"><q-n>     1133  </q-n></a>    function void end_of_elaboration_phase(uvm_phase phase);
<a name="1134"><q-n>     1134  </q-n></a>        super.end_of_elaboration_phase(phase);
<a name="1135"><q-n>     1135  </q-n></a>        this.print();
<a name="1136"><q-n>     1136  </q-n></a>        factory.print();
<a name="1137"><q-n>     1137  </q-n></a>    endfunction
<a name="1138"><q-n>     1138  </q-n></a>    task run_phase(uvm_phase phase);
<a name="1139"><q-n>     1139  </q-n></a>        axiLite_directed_sequence    axiLite_seq;
<a name="1140"><q-n>     1140  </q-n></a>        phase.raise_objection(.obj(this));
<a name="1141"><q-n>     1141  </q-n></a>        axiLite_seq = axiLite_directed_sequence::type_id::create(.name("axiLite_seq"));
<a name="1142"><q-n>     1142  </q-n></a>        assert(axiLite_seq.randomize());
<a name="1143"><q-n>     1143  </q-n></a>        `uvm_info("aL_env", { "\n", axiLite_seq.sprint() }, UVM_LOW)
<a name="1144"><q-n>     1144  </q-n></a>        axiLite_seq.start(aL_env.aL_agt.aL_sqr);
<a name="1145"><q-n>     1145  </q-n></a>        phase.drop_objection(.obj(this));
<a name="1146"><q-n>     1146  </q-n></a>    endtask: run_phase
<a name="1147"><q-n>     1147  </q-n></a>endclass: axiLite_test
<a name="1148"><q-n>     1148  </q-n></a>// UVM_TEST : RGB_TEST [RGB]
<a name="1149"><q-n>     1149  </q-n></a>class rgb_test extends uvm_test;
<a name="1150"><q-n>     1150  </q-n></a>    `uvm_component_utils(rgb_test)
<a name="1151"><q-n>     1151  </q-n></a>    template_env frame_env;
<a name="1152"><q-n>     1152  </q-n></a>    function new(string name, uvm_component parent);
<a name="1153"><q-n>     1153  </q-n></a>        super.new(name, parent);
<a name="1154"><q-n>     1154  </q-n></a>    endfunction
<a name="1155"><q-n>     1155  </q-n></a>    function void build_phase(uvm_phase phase);
<a name="1156"><q-n>     1156  </q-n></a>        super.build_phase(phase);
<a name="1157"><q-n>     1157  </q-n></a>        begin
<a name="1158"><q-n>     1158  </q-n></a>        rgb_configuration frame_cfg;
<a name="1159"><q-n>     1159  </q-n></a>        frame_cfg = new;
<a name="1160"><q-n>     1160  </q-n></a>        assert(frame_cfg.randomize());
<a name="1161"><q-n>     1161  </q-n></a>        uvm_config_db#(rgb_configuration)::set(.cntxt(this),.inst_name("*"),.field_name("config"),.value(frame_cfg));
<a name="1162"><q-n>     1162  </q-n></a>        frame_env = template_env::type_id::create(.name("frame_env"),.parent(this));
<a name="1163"><q-n>     1163  </q-n></a>        end
<a name="1164"><q-n>     1164  </q-n></a>    endfunction: build_phase
<a name="1165"><q-n>     1165  </q-n></a>    task run_phase(uvm_phase phase);
<a name="1166"><q-n>     1166  </q-n></a>        top_sequence        random_sqr;
<a name="1167"><q-n>     1167  </q-n></a>        uvm_component       component;
<a name="1168"><q-n>     1168  </q-n></a>        rgb_sequencer       sequencer;
<a name="1169"><q-n>     1169  </q-n></a>        random_sqr = top_sequence::type_id::create("random_sqr");
<a name="1170"><q-n>     1170  </q-n></a>        if( !random_sqr.randomize() ) 
<a name="1171"><q-n>     1171  </q-n></a>        `uvm_error("", "Randomize failed")
<a name="1172"><q-n>     1172  </q-n></a>        random_sqr.starting_phase = phase;
<a name="1173"><q-n>     1173  </q-n></a>        component = uvm_top.find("*.frame_seqr");
<a name="1174"><q-n>     1174  </q-n></a>        if ($cast(sequencer, component))
<a name="1175"><q-n>     1175  </q-n></a>        random_sqr.start(sequencer);
<a name="1176"><q-n>     1176  </q-n></a>    endtask: run_phase
<a name="1177"><q-n>     1177  </q-n></a>endclass: rgb_test
<a name="1178"><q-n>     1178  </q-n></a>class rgb_test2 extends rgb_test;
<a name="1179"><q-n>     1179  </q-n></a>    `uvm_component_utils(rgb_test2)
<a name="1180"><q-n>     1180  </q-n></a>    function new (string name, uvm_component parent);
<a name="1181"><q-n>     1181  </q-n></a>        super.new(name, parent);
<a name="1182"><q-n>     1182  </q-n></a>    endfunction : new
<a name="1183"><q-n>     1183  </q-n></a>    function void start_of_simulation_phase(uvm_phase phase);
<a name="1184"><q-n>     1184  </q-n></a>        super.start_of_simulation_phase(phase);
<a name="1185"><q-n>     1185  </q-n></a>        random_sequence_r1::type_id::set_type_override(random_sequence_r2::get_type());
<a name="1186"><q-n>     1186  </q-n></a>    endfunction : start_of_simulation_phase
<a name="1187"><q-n>     1187  </q-n></a>endclass: rgb_test2
<a name="1188"><q-n>     1188  </q-n></a>
<a name="1189"><q-n>     1189  </q-n></a>endpackage: socTest_pkg
<a name="1190"><q-n>     1190  </q-n></a>
<a name="1191"><q-n>     1191  </q-n></a>//----------------------------------------------------------------------------------//
<a name="1192"><q-n>     1192  </q-n></a>// INTERFACE
<a name="1193"><q-n>     1193  </q-n></a>//----------------------------------------------------------------------------------//
<a name="1194"><q-n>     1194  </q-n></a>// INTERFACE : TEMPLATE_IF [TEMPLATE]
<a name="1195"><q-n>     1195  </q-n></a>interface template_if;
<a name="1196"><q-n>     1196  </q-n></a>    logic        sig_clock;
<a name="1197"><q-n>     1197  </q-n></a>    logic        sig_ina;
<a name="1198"><q-n>     1198  </q-n></a>    logic        sig_inb;
<a name="1199"><q-n>     1199  </q-n></a>    logic        sig_en_i;
<a name="1200"><q-n>     1200  </q-n></a>    logic        sig_en_o;
<a name="1201"><q-n>     1201  </q-n></a>    logic        sig_out;
<a name="1202"><q-n>     1202  </q-n></a>    modport      templateSlave (input sig_clock,sig_ina,sig_inb,sig_en_i,output sig_en_o,sig_out);
<a name="1203"><q-n>     1203  </q-n></a>endinterface: template_if
<a name="1204"><q-n>     1204  </q-n></a>// INTERFACE : AXILITE_IF [AXILITE]
<a name="1205"><q-n>     1205  </q-n></a>interface axiLite_if(input bit ACLK,ARESETN);
<a name="1206"><q-n>     1206  </q-n></a>    logic [7:0]     AWADDR;
<a name="1207"><q-n>     1207  </q-n></a>    logic [ 2:0]    AWPROT;
<a name="1208"><q-n>     1208  </q-n></a>    logic           AWVALID;
<a name="1209"><q-n>     1209  </q-n></a>    logic           AWREADY;
<a name="1210"><q-n>     1210  </q-n></a>    logic [31:0]    WDATA;
<a name="1211"><q-n>     1211  </q-n></a>    logic [ 3:0]    WSTRB;
<a name="1212"><q-n>     1212  </q-n></a>    logic           WVALID;
<a name="1213"><q-n>     1213  </q-n></a>    logic           WREADY;
<a name="1214"><q-n>     1214  </q-n></a>    logic [1:0]     BRESP;
<a name="1215"><q-n>     1215  </q-n></a>    logic           BVALID;
<a name="1216"><q-n>     1216  </q-n></a>    logic           BREADY;
<a name="1217"><q-n>     1217  </q-n></a>    logic [7:0]     ARADDR;
<a name="1218"><q-n>     1218  </q-n></a>    logic [ 2:0]    ARPROT;
<a name="1219"><q-n>     1219  </q-n></a>    logic           ARVALID;
<a name="1220"><q-n>     1220  </q-n></a>    logic           ARREADY;
<a name="1221"><q-n>     1221  </q-n></a>    logic [31:0]    RDATA;
<a name="1222"><q-n>     1222  </q-n></a>    logic [ 1:0]    RRESP;
<a name="1223"><q-n>     1223  </q-n></a>    logic           RVALID;
<a name="1224"><q-n>     1224  </q-n></a>    logic           RREADY;
<a name="1225"><q-n>     1225  </q-n></a>    modport         ConfigMaster(input ACLK,ARESETN,AWADDR,AWPROT,AWVALID,WDATA,WSTRB,WVALID,BREADY,ARADDR,ARPROT,ARVALID,RREADY, output  AWREADY,ARREADY,RDATA,RRESP,RVALID,WREADY,BRESP,BVALID);
<a name="1226"><q-n>     1226  </q-n></a>endinterface: axiLite_if
<a name="1227"><q-n>     1227  </q-n></a>// INTERFACE : RGB_IF [RGB]
<a name="1228"><q-n>     1228  </q-n></a>interface rgb_if(input bit clk);
<a name="1229"><q-n>     1229  </q-n></a>    logic [7:0]  iRed;
<a name="1230"><q-n>     1230  </q-n></a>    logic [7:0]  iGreen;
<a name="1231"><q-n>     1231  </q-n></a>    logic [7:0]  iBlue;
<a name="1232"><q-n>     1232  </q-n></a>    logic        iValid;
<a name="1233"><q-n>     1233  </q-n></a>    logic        iPixelEn;
<a name="1234"><q-n>     1234  </q-n></a>    logic        iEof;
<a name="1235"><q-n>     1235  </q-n></a>    int unsigned iX;
<a name="1236"><q-n>     1236  </q-n></a>    int unsigned iY;
<a name="1237"><q-n>     1237  </q-n></a>    logic [7:0]  oRed;
<a name="1238"><q-n>     1238  </q-n></a>    logic [7:0]  oGreen;
<a name="1239"><q-n>     1239  </q-n></a>    logic [7:0]  oBlue;
<a name="1240"><q-n>     1240  </q-n></a>    logic        oValid;
<a name="1241"><q-n>     1241  </q-n></a>    clocking master_cb @ (posedge clk);
<a name="1242"><q-n>     1242  </q-n></a>        default input #1step output #1ns;
<a name="1243"><q-n>     1243  </q-n></a>        output iPixelEn,iX,iY,iRed,iGreen,iBlue,iValid,iEof;
<a name="1244"><q-n>     1244  </q-n></a>        input  oRed;
<a name="1245"><q-n>     1245  </q-n></a>    endclocking: master_cb
<a name="1246"><q-n>     1246  </q-n></a>    clocking slave_cb @ (posedge clk);
<a name="1247"><q-n>     1247  </q-n></a>        default input #1step output #1ns;
<a name="1248"><q-n>     1248  </q-n></a>        input  iX,iY,iRed,iGreen,iBlue,iPixelEn,iValid,iEof;
<a name="1249"><q-n>     1249  </q-n></a>        output oRed;
<a name="1250"><q-n>     1250  </q-n></a>    endclocking: slave_cb
<a name="1251"><q-n>     1251  </q-n></a>    modport master_mp(input clk, output  oRed,oGreen,oBlue,oValid);
<a name="1252"><q-n>     1252  </q-n></a>    modport slave_mp (input clk,iRed,iGreen,iBlue,iValid,iPixelEn,iEof,iX,iY,output oRed,oGreen,oBlue,oValid);
<a name="1253"><q-n>     1253  </q-n></a>    modport master_sync_mp(clocking master_cb);
<a name="1254"><q-n>     1254  </q-n></a>    modport slave_sync_mp (clocking slave_cb);
<a name="1255"><q-n>     1255  </q-n></a>endinterface: rgb_if
<a name="1256"><q-n>     1256  </q-n></a>
<a name="1257"><q-n>     1257  </q-n></a>
<a name="1258"><q-n>     1258  </q-n></a>
<a name="1259"><q-n>     1259  </q-n></a>//----------------------------------------------------------------------------------//
<a name="1260"><q-n>     1260  </q-n></a>// MODULE
<a name="1261"><q-n>     1261  </q-n></a>//----------------------------------------------------------------------------------//
<a name="1262"><q-n>     1262  </q-n></a>// MODULE : ADDER [TEMPLATE]
<a name="1263"><q-n>     1263  </q-n></a>module adder(template_if.templateSlave templateVif);
<a name="1264"><q-n>     1264  </q-n></a>    import socTest_pkg::*;
<a name="1265"><q-n>     1265  </q-n></a>    template dut (
<a name="1266"><q-n>     1266  </q-n></a>   .clk         (templateVif.sig_clock),
<a name="1267"><q-n>     1267  </q-n></a>   .en_i        (templateVif.sig_en_i),
<a name="1268"><q-n>     1268  </q-n></a>   .ina         (templateVif.sig_ina),
<a name="1269"><q-n>     1269  </q-n></a>   .inb         (templateVif.sig_inb),
<a name="1270"><q-n>     1270  </q-n></a>   .en_o        (templateVif.sig_en_o),
<a name="1271"><q-n>     1271  </q-n></a>   .out         (templateVif.sig_out));
<a name="1272"><q-n>     1272  </q-n></a>endmodule: adder
<a name="1273"><q-n>     1273  </q-n></a>// MODULE : VFPCONFIGDUT [AXILITE]
<a name="1274"><q-n>     1274  </q-n></a>module vfpConfigDut(axiLite_if.ConfigMaster axiLiteVif);
<a name="1275"><q-n>     1275  </q-n></a>    import socTest_pkg::*;
<a name="1276"><q-n>     1276  </q-n></a>    vfpConfig dutModuleInst (
<a name="1277"><q-n>     1277  </q-n></a>    .ACLK       (axiLiteVif.ACLK   ),
<a name="1278"><q-n>     1278  </q-n></a>    .ARESETN    (axiLiteVif.ARESETN),
<a name="1279"><q-n>     1279  </q-n></a>    .AWADDR     (axiLiteVif.AWADDR ),
<a name="1280"><q-n>     1280  </q-n></a>    .AWPROT     (axiLiteVif.AWPROT ),
<a name="1281"><q-n>     1281  </q-n></a>    .AWVALID    (axiLiteVif.AWVALID),
<a name="1282"><q-n>     1282  </q-n></a>    .AWREADY    (axiLiteVif.AWREADY),
<a name="1283"><q-n>     1283  </q-n></a>    .WDATA      (axiLiteVif.WDATA  ),
<a name="1284"><q-n>     1284  </q-n></a>    .WSTRB      (axiLiteVif.WSTRB  ),
<a name="1285"><q-n>     1285  </q-n></a>    .WVALID     (axiLiteVif.WVALID ),
<a name="1286"><q-n>     1286  </q-n></a>    .WREADY     (axiLiteVif.WREADY ),
<a name="1287"><q-n>     1287  </q-n></a>    .BRESP      (axiLiteVif.BRESP  ),
<a name="1288"><q-n>     1288  </q-n></a>    .BVALID     (axiLiteVif.BVALID ),
<a name="1289"><q-n>     1289  </q-n></a>    .BREADY     (axiLiteVif.BREADY ),
<a name="1290"><q-n>     1290  </q-n></a>    .ARADDR     (axiLiteVif.ARADDR ),
<a name="1291"><q-n>     1291  </q-n></a>    .ARPROT     (axiLiteVif.ARPROT ),
<a name="1292"><q-n>     1292  </q-n></a>    .ARVALID    (axiLiteVif.ARVALID),
<a name="1293"><q-n>     1293  </q-n></a>    .ARREADY    (axiLiteVif.ARREADY),
<a name="1294"><q-n>     1294  </q-n></a>    .RDATA      (axiLiteVif.RDATA  ),
<a name="1295"><q-n>     1295  </q-n></a>    .RRESP      (axiLiteVif.RRESP  ),
<a name="1296"><q-n>     1296  </q-n></a>    .RVALID     (axiLiteVif.RVALID ),
<a name="1297"><q-n>     1297  </q-n></a>    .RREADY     (axiLiteVif.RREADY ));
<a name="1298"><q-n>     1298  </q-n></a>endmodule: vfpConfigDut
<a name="1299"><q-n>     1299  </q-n></a>// MODULE : RGB_COLOR [RGB]
<a name="1300"><q-n>     1300  </q-n></a>module rgb_color(rgb_if.slave_mp frame_slave_if);
<a name="1301"><q-n>     1301  </q-n></a>    import socTest_pkg::*;
<a name="1302"><q-n>     1302  </q-n></a>    pixelCord dutModule2Inst (
<a name="1303"><q-n>     1303  </q-n></a>   .clk         (frame_slave_if.clk),
<a name="1304"><q-n>     1304  </q-n></a>   .iRed        (frame_slave_if.iRed),
<a name="1305"><q-n>     1305  </q-n></a>   .iGreen      (frame_slave_if.iGreen),
<a name="1306"><q-n>     1306  </q-n></a>   .iBlue       (frame_slave_if.iBlue),
<a name="1307"><q-n>     1307  </q-n></a>   .iValid      (frame_slave_if.iValid),
<a name="1308"><q-n>     1308  </q-n></a>   .iPixelEn    (frame_slave_if.iPixelEn),
<a name="1309"><q-n>     1309  </q-n></a>   .iEof        (frame_slave_if.iEof),
<a name="1310"><q-n>     1310  </q-n></a>   .iX          (frame_slave_if.iX),
<a name="1311"><q-n>     1311  </q-n></a>   .iY          (frame_slave_if.iY),
<a name="1312"><q-n>     1312  </q-n></a>   .oRed        (frame_slave_if.oRed),
<a name="1313"><q-n>     1313  </q-n></a>   .oGreen      (frame_slave_if.oGreen),
<a name="1314"><q-n>     1314  </q-n></a>   .oBlue       (frame_slave_if.oBlue),
<a name="1315"><q-n>     1315  </q-n></a>   .oValid      (frame_slave_if.oValid));
<a name="1316"><q-n>     1316  </q-n></a>endmodule: rgb_color
<a name="1317"><q-n>     1317  </q-n></a>
<a name="1318"><q-n>     1318  </q-n></a>
<a name="1319"><q-n>     1319  </q-n></a>//----------------------------------------------------------------------------------//
<a name="1320"><q-n>     1320  </q-n></a>// MODULE TOP
<a name="1321"><q-n>     1321  </q-n></a>//----------------------------------------------------------------------------------//
<a name="1322"><q-n>     1322  </q-n></a>module top;
<a name="1323"><q-n>     1323  </q-n></a>    import uvm_pkg::*;
<a name="1324"><q-n>     1324  </q-n></a>    import socTest_pkg::*;
<a name="1325"><q-n>     1325  </q-n></a>    reg ACLK;
<a name="1326"><q-n>     1326  </q-n></a>    reg ARESETN;
<a name="1327"><q-n>     1327  </q-n></a>    reg clk;
<a name="1328"><q-n>     1328  </q-n></a>    axiLite_if          axiLiteVif(ACLK,ARESETN);
<a name="1329"><q-n>     1329  </q-n></a>    vfpConfigDut        vfpConfig_test(axiLiteVif); // [AXILITE]
<a name="1330"><q-n>     1330  </q-n></a>    template_if         templateVif();
<a name="1331"><q-n>     1331  </q-n></a>    adder               templateDut(templateVif);   // [TEMPLATE]
<a name="1332"><q-n>     1332  </q-n></a>    rgb_if              frame_slave_if(clk);
<a name="1333"><q-n>     1333  </q-n></a>    rgb_color           frame_color(frame_slave_if);// [RGB]
<a name="1334"><q-n>     1334  </q-n></a>    initial begin
<a name="1335"><q-n>     1335  </q-n></a>        ARESETN = 1'b0;
<a name="1336"><q-n>     1336  </q-n></a>    #1000;
<a name="1337"><q-n>     1337  </q-n></a>        ARESETN = 1'b1;
<a name="1338"><q-n>     1338  </q-n></a>    end
<a name="1339"><q-n>     1339  </q-n></a>    initial begin
<a name="1340"><q-n>     1340  </q-n></a>        ACLK = 0;
<a name="1341"><q-n>     1341  </q-n></a>    #5ns ;
<a name="1342"><q-n>     1342  </q-n></a>    forever #5ns ACLK = ! ACLK;
<a name="1343"><q-n>     1343  </q-n></a>    end
<a name="1344"><q-n>     1344  </q-n></a>    initial begin
<a name="1345"><q-n>     1345  </q-n></a>        templateVif.sig_clock = 0;
<a name="1346"><q-n>     1346  </q-n></a>    #5ns ;
<a name="1347"><q-n>     1347  </q-n></a>    forever #5ns templateVif.sig_clock = ! templateVif.sig_clock;
<a name="1348"><q-n>     1348  </q-n></a>    end
<a name="1349"><q-n>     1349  </q-n></a>    initial begin
<a name="1350"><q-n>     1350  </q-n></a>        clk = 0;
<a name="1351"><q-n>     1351  </q-n></a>        #5ns ;
<a name="1352"><q-n>     1352  </q-n></a>        forever #5ns clk = ! clk;
<a name="1353"><q-n>     1353  </q-n></a>    end
<a name="1354"><q-n>     1354  </q-n></a>    initial begin
<a name="1355"><q-n>     1355  </q-n></a>    uvm_config_db #(virtual axiLite_if)::set(null, "*", "axiLiteVif", axiLiteVif);
<a name="1356"><q-n>     1356  </q-n></a>    uvm_resource_db#(virtual template_if)::set(.scope("ifs"), .name("template_if"), .val(templateVif));
<a name="1357"><q-n>     1357  </q-n></a>    uvm_resource_db#(virtual rgb_if)::set(.scope("ifs"),.name("rgb_if"),.val(frame_slave_if));
<a name="1358"><q-n>     1358  </q-n></a>    run_test();
<a name="1359"><q-n>     1359  </q-n></a>    end
<a name="1360"><q-n>     1360  </q-n></a>endmodule: top
<a name="1361"><q-n>     1361  </q-n></a>//----------------------------------------------------------------------------------//</pre>
</tt>
<h1>Error: Source file not available...</h1>
  <p>
  This source file could not be found. Make sure the HDL sourcefiles are visible when you generate the HTML report.</p><p>
  Contact Mentor Customer Support if you have any questions.</p>
  
</body>
</html>
