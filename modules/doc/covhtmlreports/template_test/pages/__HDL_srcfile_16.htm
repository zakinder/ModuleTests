
<html>
<head>
  <meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
  <title>Questa Coverage Report</title>
  <link rel="StyleSheet" media="screen" href="../css/hdl2html.css"/>
</head>
<body id="hdl2html">
  <tt>
<pre>
<a name="1"><q-n>     1  </q-n></a><q-m>--05022019 [05-02-2019]</q-m>
<a name="2"><q-n>     2  </q-n></a><q-w>library</q-w> ieee;
<a name="3"><q-n>     3  </q-n></a><q-w>use</q-w> ieee.std_logic_1164.<q-w>all</q-w>;
<a name="4"><q-n>     4  </q-n></a><q-w>use</q-w> ieee.numeric_std.<q-w>all</q-w>;
<a name="5"><q-n>     5  </q-n></a><q-w>use</q-w> work.constantspackage.<q-w>all</q-w>;
<a name="6"><q-n>     6  </q-n></a><q-w>use</q-w> work.vpfRecords.<q-w>all</q-w>;
<a name="7"><q-n>     7  </q-n></a><q-w>use</q-w> work.portspackage.<q-w>all</q-w>;
<a name="8"><q-n>     8  </q-n></a><q-w>entity</q-w> pointOfInterest <q-w>is</q-w>
<a name="9"><q-n>     9  </q-n></a><q-w>generic</q-w> (
<a name="10"><q-n>     10  </q-n></a>    i_data_width   : <q-t>integer</q-w> := 8;
<a name="11"><q-n>     11  </q-n></a>    s_data_width   : <q-t>integer</q-w> := 16;
<a name="12"><q-n>     12  </q-n></a>    b_data_width   : <q-t>integer</q-w> := 32);
<a name="13"><q-n>     13  </q-n></a><q-w>port</q-w> (
<a name="14"><q-n>     14  </q-n></a>    clk            : <q-a>in</q-w> <q-t>std_logic</q-w>;
<a name="15"><q-n>     15  </q-n></a>    rst_l          : <q-a>in</q-w> <q-t>std_logic</q-w>;
<a name="16"><q-n>     16  </q-n></a>    iCord          : <q-a>in</q-w> coord;
<a name="17"><q-n>     17  </q-n></a>    endOfFrame     : <q-a>in</q-w> <q-t>std_logic</q-w>;
<a name="18"><q-n>     18  </q-n></a>    pRegion        : <q-a>in</q-w> poi;
<a name="19"><q-n>     19  </q-n></a>    iRgb           : <q-a>in</q-w> channel;
<a name="20"><q-n>     20  </q-n></a>    oRgb           : <q-a>out</q-w> channel;
<a name="21"><q-n>     21  </q-n></a>    gridLockDatao  : <q-a>out</q-w> <q-t>std_logic_vector</q-w>(b_data_width-1 <q-w>downto</q-w> 0);
<a name="22"><q-n>     22  </q-n></a>    fifoStatus     : <q-a>out</q-w> <q-t>std_logic_vector</q-w>(b_data_width-1 <q-w>downto</q-w> 0);
<a name="23"><q-n>     23  </q-n></a>    oGridLocation  : <q-a>out</q-w> <q-t>std_logic</q-w>);
<a name="24"><q-n>     24  </q-n></a><q-w>end</q-w> <q-w>entity</q-w>;
<a name="25"><q-n>     25  </q-n></a><q-w>architecture</q-w> arch <q-w>of</q-w> pointOfInterest <q-w>is</q-w>
<a name="26"><q-n>     26  </q-n></a>    <q-w>constant</q-w> FIFO_ADDR_WIDTH :<q-t>integer</q-w> := 14;
<a name="27"><q-n>     27  </q-n></a>    <q-w>constant</q-w> FIFO_DATA_WIDTH :<q-t>integer</q-w> := 24;
<a name="28"><q-n>     28  </q-n></a>    <q-w>constant</q-w> FIFO_DEPTH :<q-t>integer</q-w> := 2**(FIFO_ADDR_WIDTH);<q-m>--8192</q-m>
<a name="29"><q-n>     29  </q-n></a>    <q-w>type</q-w> fState <q-w>is</q-w> (idle,lockReady,fifoFullStatus,fifoEmptyStatus,waitForNewFrame,gridEnCheck);
<a name="30"><q-n>     30  </q-n></a>    <q-w>signal</q-w> fifoControlState : fState;
<a name="31"><q-n>     31  </q-n></a>    <q-w>signal</q-w> wrAddrsGlCtr     : <q-t>integer</q-w> := 0;
<a name="32"><q-n>     32  </q-n></a>    <q-w>signal</q-w> GlEnable         : <q-t>std_logic</q-w>;
<a name="33"><q-n>     33  </q-n></a>    <q-w>signal</q-w> rdData           : <q-t>std_logic_vector</q-w>(23 <q-w>downto</q-w> 0);
<a name="34"><q-n>     34  </q-n></a>    <q-w>signal</q-w> wrDataIn         : <q-t>std_logic_vector</q-w>(23 <q-w>downto</q-w> 0);
<a name="35"><q-n>     35  </q-n></a>    <q-w>signal</q-w> clearData        : <q-t>std_logic</q-w>;
<a name="36"><q-n>     36  </q-n></a>    <q-w>signal</q-w> wrEn             : <q-t>std_logic</q-w>;
<a name="37"><q-n>     37  </q-n></a>    <q-w>signal</q-w> wrLstEn          : <q-t>std_logic</q-w>;
<a name="38"><q-n>     38  </q-n></a>    <q-w>signal</q-w> emptyO           : <q-t>std_logic</q-w>; 
<a name="39"><q-n>     39  </q-n></a>    <q-w>signal</q-w> wrDone           : <q-t>std_logic</q-w>; 
<a name="40"><q-n>     40  </q-n></a>    <q-w>signal</q-w> rdDone           : <q-t>std_logic</q-w>; 
<a name="41"><q-n>     41  </q-n></a>    <q-w>signal</q-w> fullO            : <q-t>std_logic</q-w>;
<a name="42"><q-n>     42  </q-n></a>    <q-w>signal</q-w> clrStatus        : <q-t>std_logic</q-w>;
<a name="43"><q-n>     43  </q-n></a>    <q-w>signal</q-w> wrAddress        : <q-t>std_logic_vector</q-w> (FIFO_ADDR_WIDTH-1 <q-w>downto</q-w> 0); 
<a name="44"><q-n>     44  </q-n></a>    <q-w>signal</q-w> wrAddr           : <q-t>std_logic_vector</q-w> (FIFO_ADDR_WIDTH-1 <q-w>downto</q-w> 0); 
<a name="45"><q-n>     45  </q-n></a>    <q-w>signal</q-w> gridEn           : <q-t>std_logic</q-w>;    
<a name="46"><q-n>     46  </q-n></a>    <q-w>signal</q-w> fifoIsFull       : <q-t>std_logic</q-w>;
<a name="47"><q-n>     47  </q-n></a>    <q-w>signal</q-w> fifoIsEmpty      : <q-t>std_logic</q-w>;
<a name="48"><q-n>     48  </q-n></a>    <q-w>signal</q-w> gridContMax      : <q-t>std_logic_vector</q-w> (15 <q-w>downto</q-w> 0);
<a name="49"><q-n>     49  </q-n></a>    <q-w>signal</q-w> pCont            : cord;    
<a name="50"><q-n>     50  </q-n></a><q-w>begin</q-w>
<a name="51"><q-n>     51  </q-n></a>    oGridLocation  &lt;= GlEnable;
<a name="52"><q-n>     52  </q-n></a>    fifoStatus     &lt;= <q-l>"00000000"</q-l> &amp; gridContMax &amp; <q-l>"00000"</q-l> &amp; fifoIsFull &amp; fifoIsEmpty &amp; fifoIsFull;
<a name="53"><q-n>     53  </q-n></a>    gridLockDatao  &lt;= x<q-l>"00"</q-l> &amp; rdData;
<a name="54"><q-n>     54  </q-n></a>    wrAddress      &lt;= <q-t>std_logic_vector</q-w>(to_unsigned(wrAddrsGlCtr,FIFO_ADDR_WIDTH));
<a name="55"><q-n>     55  </q-n></a>fifoControlP: <q-w>process</q-w> (clk) <q-w>begin</q-w>
<a name="56"><q-n>     56  </q-n></a><q-w>if</q-w> (rising_edge (clk)) <q-w>then</q-w>
<a name="57"><q-n>     57  </q-n></a>    <q-w>if</q-w> (rst_l = lo) <q-w>then</q-w>
<a name="58"><q-n>     58  </q-n></a>        fifoControlState &lt;= idle;
<a name="59"><q-n>     59  </q-n></a>        gridEn           &lt;= lo;
<a name="60"><q-n>     60  </q-n></a>        fifoIsFull       &lt;= lo;
<a name="61"><q-n>     61  </q-n></a>        fifoIsEmpty      &lt;= lo;
<a name="62"><q-n>     62  </q-n></a>        clrStatus        &lt;= hi;
<a name="63"><q-n>     63  </q-n></a>    <q-w>else</q-w>
<a name="64"><q-n>     64  </q-n></a>    <q-w>case</q-w> (fifoControlState) <q-w>is</q-w>
<a name="65"><q-n>     65  </q-n></a>    <q-w>when</q-w> idle =&gt;
<a name="66"><q-n>     66  </q-n></a>    <q-m>--READY</q-m>
<a name="67"><q-n>     67  </q-n></a>        fifoIsFull   &lt;= lo;
<a name="68"><q-n>     68  </q-n></a>        fifoIsEmpty  &lt;= hi;
<a name="69"><q-n>     69  </q-n></a>        clrStatus    &lt;= lo;
<a name="70"><q-n>     70  </q-n></a>        <q-m>--Enable</q-m>
<a name="71"><q-n>     71  </q-n></a>        <q-w>if</q-w> (pRegion.cpuWgridLock = hi) <q-w>then</q-w>
<a name="72"><q-n>     72  </q-n></a>            fifoControlState &lt;= waitForNewFrame;
<a name="73"><q-n>     73  </q-n></a>        <q-w>end</q-w> <q-w>if</q-w>;
<a name="74"><q-n>     74  </q-n></a>    <q-w>when</q-w> waitForNewFrame =&gt;
<a name="75"><q-n>     75  </q-n></a>    <q-m>--WAIT</q-m>
<a name="76"><q-n>     76  </q-n></a>        <q-w>if</q-w> (endOfFrame = hi) <q-w>then</q-w>
<a name="77"><q-n>     77  </q-n></a>            fifoControlState &lt;= gridEnCheck;
<a name="78"><q-n>     78  </q-n></a>        <q-w>end</q-w> <q-w>if</q-w>;
<a name="79"><q-n>     79  </q-n></a>    <q-w>when</q-w> gridEnCheck =&gt;
<a name="80"><q-n>     80  </q-n></a>        <q-w>if</q-w> (GlEnable = lo) <q-w>then</q-w>
<a name="81"><q-n>     81  </q-n></a>            fifoControlState &lt;= lockReady;
<a name="82"><q-n>     82  </q-n></a>            gridEn           &lt;= hi;
<a name="83"><q-n>     83  </q-n></a>        <q-w>end</q-w> <q-w>if</q-w>;
<a name="84"><q-n>     84  </q-n></a>    <q-w>when</q-w> lockReady =&gt;
<a name="85"><q-n>     85  </q-n></a>    <q-m>--CHECK</q-m>
<a name="86"><q-n>     86  </q-n></a>        fifoIsFull  &lt;= lo;
<a name="87"><q-n>     87  </q-n></a>        fifoIsEmpty &lt;= lo;
<a name="88"><q-n>     88  </q-n></a>        <q-m>--WriteDone Pulse</q-m>
<a name="89"><q-n>     89  </q-n></a>        <q-w>if</q-w> (wrDone = hi) <q-w>then</q-w>
<a name="90"><q-n>     90  </q-n></a>            fifoControlState &lt;= fifoFullStatus;
<a name="91"><q-n>     91  </q-n></a>            gridEn           &lt;= lo;
<a name="92"><q-n>     92  </q-n></a>        <q-w>end</q-w> <q-w>if</q-w>;
<a name="93"><q-n>     93  </q-n></a>    <q-w>when</q-w> fifoFullStatus =&gt; 
<a name="94"><q-n>     94  </q-n></a>    <q-m>--CHECK</q-m>
<a name="95"><q-n>     95  </q-n></a>        fifoIsFull   &lt;= hi;<q-m>--Full</q-m>
<a name="96"><q-n>     96  </q-n></a>        fifoIsEmpty  &lt;= lo;
<a name="97"><q-n>     97  </q-n></a>        gridContMax &lt;= <q-t>std_logic_vector</q-w>(resize(<q-t>unsigned</q-w>(wrAddr), gridContMax'<q-a>length</q-w>));
<a name="98"><q-n>     98  </q-n></a>        <q-m>--ReadDone Pulse</q-m>
<a name="99"><q-n>     99  </q-n></a>        <q-w>if</q-w> (rdDone = hi) <q-w>then</q-w>
<a name="100"><q-n>     100  </q-n></a>            fifoControlState &lt;= fifoEmptyStatus;               
<a name="101"><q-n>     101  </q-n></a>        <q-w>end</q-w> <q-w>if</q-w>;
<a name="102"><q-n>     102  </q-n></a>    <q-w>when</q-w> fifoEmptyStatus =&gt;
<a name="103"><q-n>     103  </q-n></a>    <q-m>--RESET</q-m>
<a name="104"><q-n>     104  </q-n></a>        fifoIsFull   &lt;= lo;
<a name="105"><q-n>     105  </q-n></a>        fifoIsEmpty  &lt;= hi;
<a name="106"><q-n>     106  </q-n></a>        <q-w>if</q-w> (pRegion.cpuAckGoAgain = hi) <q-w>then</q-w>
<a name="107"><q-n>     107  </q-n></a>            fifoControlState &lt;= idle;
<a name="108"><q-n>     108  </q-n></a>            clrStatus        &lt;= hi;
<a name="109"><q-n>     109  </q-n></a>        <q-w>end</q-w> <q-w>if</q-w>;
<a name="110"><q-n>     110  </q-n></a>    <q-w>when</q-w> <q-w>others</q-w> =&gt;
<a name="111"><q-n>     111  </q-n></a>        fifoControlState &lt;= idle;
<a name="112"><q-n>     112  </q-n></a>    <q-w>end</q-w> <q-w>case</q-w>;
<a name="113"><q-n>     113  </q-n></a>    <q-w>end</q-w> <q-w>if</q-w>;
<a name="114"><q-n>     114  </q-n></a><q-w>end</q-w> <q-w>if</q-w>;
<a name="115"><q-n>     115  </q-n></a><q-w>end</q-w> <q-w>process</q-w> fifoControlP;  
<a name="116"><q-n>     116  </q-n></a>enablePointerP: <q-w>process</q-w> (clk)<q-w>begin</q-w>
<a name="117"><q-n>     117  </q-n></a>    <q-w>if</q-w> rising_edge(clk) <q-w>then</q-w>
<a name="118"><q-n>     118  </q-n></a>        wrDataIn  &lt;= (iRgb.red &amp; iRgb.green &amp; iRgb.blue);
<a name="119"><q-n>     119  </q-n></a>        wrAddr    &lt;= wrAddress;
<a name="120"><q-n>     120  </q-n></a>        <q-w>if</q-w> (((pCont.x &gt;= pRegion.pointInterest) <q-w>and</q-w> (pCont.x &lt;= pRegion.pointInterest + pInterestWidth)) <q-w>and</q-w> ((pCont.y &gt;= pRegion.pointInterest) <q-w>and</q-w> (pCont.y &lt;= pRegion.pointInterest + pInterestHight))) 
<a name="121"><q-n>     121  </q-n></a>        <q-w>and</q-w> (iRgb.valid = hi) <q-w>then</q-w>
<a name="122"><q-n>     122  </q-n></a>            GlEnable     &lt;= hi;
<a name="123"><q-n>     123  </q-n></a>        <q-w>else</q-w>
<a name="124"><q-n>     124  </q-n></a>            GlEnable     &lt;= lo;
<a name="125"><q-n>     125  </q-n></a>        <q-w>end</q-w> <q-w>if</q-w>;
<a name="126"><q-n>     126  </q-n></a>        wrLstEn       &lt;= <q-w>not</q-w>(gridEn);
<a name="127"><q-n>     127  </q-n></a>        <q-w>if</q-w> (gridEn = hi <q-w>and</q-w> GlEnable = hi) <q-w>then</q-w>
<a name="128"><q-n>     128  </q-n></a>            wrEn         &lt;= hi;
<a name="129"><q-n>     129  </q-n></a>            wrAddrsGlCtr &lt;= wrAddrsGlCtr + 1;
<a name="130"><q-n>     130  </q-n></a>        <q-w>elsif</q-w> (gridEn = hi <q-w>and</q-w> GlEnable = lo)<q-w>then</q-w>
<a name="131"><q-n>     131  </q-n></a>            wrEn          &lt;= wrLstEn;
<a name="132"><q-n>     132  </q-n></a>            wrAddrsGlCtr  &lt;= wrAddrsGlCtr;
<a name="133"><q-n>     133  </q-n></a>        <q-w>else</q-w>
<a name="134"><q-n>     134  </q-n></a>            wrEn          &lt;= lo;
<a name="135"><q-n>     135  </q-n></a>            wrAddrsGlCtr  &lt;=  0;
<a name="136"><q-n>     136  </q-n></a>        <q-w>end</q-w> <q-w>if</q-w>;
<a name="137"><q-n>     137  </q-n></a>    <q-w>end</q-w> <q-w>if</q-w>;
<a name="138"><q-n>     138  </q-n></a><q-w>end</q-w> <q-w>process</q-w> enablePointerP;
<a name="139"><q-n>     139  </q-n></a>gridLockFifoInt : gridLockFifo
<a name="140"><q-n>     140  </q-n></a><q-w>generic</q-w> <q-w>map</q-w>(
<a name="141"><q-n>     141  </q-n></a>    FIFO_DEPTH      =&gt; FIFO_DEPTH,
<a name="142"><q-n>     142  </q-n></a>    FIFO_DATA_WIDTH =&gt; FIFO_DATA_WIDTH,
<a name="143"><q-n>     143  </q-n></a>    FIFO_ADDR_WIDTH =&gt; FIFO_ADDR_WIDTH)
<a name="144"><q-n>     144  </q-n></a><q-w>port</q-w> <q-w>map</q-w>(
<a name="145"><q-n>     145  </q-n></a>    clk             =&gt; clk,
<a name="146"><q-n>     146  </q-n></a>    clrStatus       =&gt; clrStatus,
<a name="147"><q-n>     147  </q-n></a>    rdEn            =&gt; pRegion.fifoReadEnable,
<a name="148"><q-n>     148  </q-n></a>    rdAddress       =&gt; pRegion.fifoReadAddress(FIFO_ADDR_WIDTH-1 <q-w>downto</q-w> 0),
<a name="149"><q-n>     149  </q-n></a>    dataO           =&gt; rdData,
<a name="150"><q-n>     150  </q-n></a>    wrEn            =&gt; wrEn,
<a name="151"><q-n>     151  </q-n></a>    wrAddress       =&gt; wrAddr,
<a name="152"><q-n>     152  </q-n></a>    dataIn          =&gt; wrDataIn,
<a name="153"><q-n>     153  </q-n></a>    wrDone          =&gt; wrDone,
<a name="154"><q-n>     154  </q-n></a>    rdDone          =&gt; rdDone,
<a name="155"><q-n>     155  </q-n></a>    emptyO          =&gt; emptyO,
<a name="156"><q-n>     156  </q-n></a>    fullO           =&gt; fullO);
<a name="157"><q-n>     157  </q-n></a><q-m>--pipCordP: process (clk)begin</q-m>
<a name="158"><q-n>     158  </q-n></a><q-m>--    if rising_edge(clk) then</q-m>
<a name="159"><q-n>     159  </q-n></a><q-m>--        pCont.x      &lt;= to_integer((unsigned(iCord.x)));</q-m>
<a name="160"><q-n>     160  </q-n></a><q-m>--        pCont.y      &lt;= to_integer((unsigned(iCord.y)));</q-m>
<a name="161"><q-n>     161  </q-n></a><q-m>--    end if;</q-m>
<a name="162"><q-n>     162  </q-n></a><q-m>--end process pipCordP;</q-m>
<a name="163"><q-n>     163  </q-n></a><q-m>--pixelCordInt : pixelCord</q-m>
<a name="164"><q-n>     164  </q-n></a><q-m>--port map(</q-m>
<a name="165"><q-n>     165  </q-n></a><q-m>--    clk      =&gt; clk,</q-m>
<a name="166"><q-n>     166  </q-n></a><q-m>--    iRgb     =&gt; iRgb,</q-m>
<a name="167"><q-n>     167  </q-n></a><q-m>--    iPixelEn =&gt; GlEnable,</q-m>
<a name="168"><q-n>     168  </q-n></a><q-m>--    iEof     =&gt; endOfFrame,</q-m>
<a name="169"><q-n>     169  </q-n></a><q-m>--    iCord    =&gt; pCont,</q-m>
<a name="170"><q-n>     170  </q-n></a><q-m>--    oRgb     =&gt; oRgb);</q-m>
<a name="171"><q-n>     171  </q-n></a><q-w>end</q-w> <q-w>architecture</q-w>;</pre>
</tt>

  
</body>
</html>
