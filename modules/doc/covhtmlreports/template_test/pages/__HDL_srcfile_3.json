var g_sourceLines = [
'--01062019 [01-06-2019]',
'library ieee;',
'use ieee.std_logic_1164.all;',
'use ieee.numeric_std.all;',
'use work.constantspackage.all;',
'use work.vpfRecords.all;',
'use work.portspackage.all;',
'entity CameraRawData is',
'generic (',
'    img_width         : integer := 8);',
'port (',
'    m_axis_aclk       : in std_logic;',
'    m_axis_aresetn    : in std_logic;',
'    pixclk            : in std_logic;',
'    ifval             : in std_logic;',
'    ilval             : in std_logic;',
'    idata             : in std_logic_vector(11 downto 0);',
'    oRawData          : out rData);',
'end CameraRawData;',
'architecture arch_imp of CameraRawData is',
'    --PIXCLK SIDE',
'    signal pLine          : std_logic :=lo;',
'    signal pFrame         : std_logic :=lo;',
'    signal pLineSyn       : std_logic :=lo;',
'    signal pDataWrAddress : integer   := zero;',
'    signal pSof           : std_logic :=lo;',
'    signal pSol           : std_logic :=lo;',
'    signal pEof           : std_logic :=lo;',
'    signal pEol           : std_logic :=lo;',
'    --M_AXIS_ACLK SIDE',
'    signal ilvalSync1     : std_logic :=lo;',
'    signal ilvalSync2     : std_logic :=lo;',
'    signal ilvalSync3     : std_logic :=lo;',
'    signal ilvalSync4     : std_logic :=lo;',
'    signal ifvalSync1     : std_logic :=lo;',
'    signal ifvalSync2     : std_logic :=lo;',
'    signal endOfLine      : std_logic :=lo;',
'    ----',
'    signal rVdata         : std_logic_vector(11 downto 0):= (others =&gt; lo);',
'    signal rLine          : std_logic :=lo;',
'    type d5mSt is (readLineState,eolState,eofState,sofState);',
'    signal d5mStates : d5mSt; ',
'    signal cordx          : integer :=zero;',
'    signal cordy          : integer :=zero;',
'	signal imgWidth       : integer := 3071;',
'    type plineRam is array (0 to img_width) of std_logic_vector (11 downto 0);',
'    signal d5mLine        : plineRam := (others =&gt; (others =&gt; lo));',
'begin',
'-----------------------------------------------------------------------------------------',
'--pixclk',
'-----------------------------------------------------------------------------------------',
'endOfLine &lt;= hi when (pLineSyn = hi and ilval = lo) else lo;',
'd5mDataSyncP: process(pixclk) begin',
'    if rising_edge(pixclk) then',
'        pLine       &lt;= ilval;',
'		pLineSyn    &lt;= pLine;',
'        pFrame      &lt;= ifval;',
'        if (pFrame = hi and pLine = hi) then',
'            pDataWrAddress  &lt;= pDataWrAddress + one;',
'        else',
'            pDataWrAddress &lt;= zero;',
'        end if;',
'        if (endOfLine = hi) then',
'            imgWidth  &lt;= pDataWrAddress;',
'        else',
'            imgWidth  &lt;= imgWidth;',
'        end if;',
'        d5mLine(pDataWrAddress) &lt;= idata;',
'    end if;',
'end process d5mDataSyncP;',
'-----------------------------------------------------------------------------------------',
'cdcSignals: process (m_axis_aclk) begin',
'    if rising_edge(m_axis_aclk) then',
'        ilvalSync1  &lt;= ilval;',
'        ilvalSync2  &lt;= ilvalSync1;',
'		ifvalSync1  &lt;= ifval;',
'        ifvalSync2  &lt;= ifvalSync1;',
'    end if;',
'end process cdcSignals;',
'edgeDetect: process (m_axis_aclk) begin',
'    if rising_edge(m_axis_aclk) then',
'        ilvalSync3  &lt;= ilvalSync2;',
'        ilvalSync4  &lt;= ilvalSync3;',
'    end if;',
'end process edgeDetect;',
'pSol &lt;= hi when (ilvalSync4 = lo and ilvalSync2 = hi) else lo;--risingEdge Detect',
'pEol &lt;= hi when (ilvalSync4 = hi and ilvalSync2 = lo) else lo;--fallingEdge Detect',
'readLineP: process (m_axis_aclk) begin',
'    if (rising_edge (m_axis_aclk)) then',
'        if (m_axis_aresetn = lo) then',
'            d5mStates &lt;= sofState;',
'			pSof      &lt;= lo;',
'			pEof      &lt;= lo;',
'			rLine     &lt;= lo;',
'			cordx     &lt;= zero;',
'			cordy     &lt;= zero;',
'        else',
'        case (d5mStates) is',
'        when sofState =&gt;',
'            pEof      &lt;= lo;',
'            if (ifvalSync2 = hi) and (pEol = hi) then --endOfLine and Sof',
'                pSof      &lt;= hi;',
'                d5mStates &lt;= readLineState;',
'            end if;',
'        when readLineState =&gt;',
'            if (cordx = imgWidth) then',
'                rLine         &lt;= lo;',
'                d5mStates     &lt;= eolState;',
'                cordx         &lt;= zero;',
'			else',
'                cordx         &lt;= cordx + one;--start reading',
'				rLine         &lt;= hi;',
'				pSof          &lt;= lo;',
'				d5mStates     &lt;= readLineState;',
'            end if;',
'        when eolState =&gt;',
'            if (ifvalSync2 = lo)  then --endOfLine and Sof',
'                cordy     &lt;= zero;',
'                d5mStates &lt;= eofState;',
'		    elsif(pEol = hi) then',
'                d5mStates &lt;= readLineState;',
'                cordy     &lt;= cordy + one;',
'			else',
'                d5mStates &lt;= eolState;',
'            end if;',
'        when eofState =&gt;	',
'			d5mStates &lt;= sofState;',
'            pEof      &lt;= hi;',
'        when others =&gt;',
'            d5mStates &lt;= sofState;',
'        end case;',
'        end if;',
'    end if;',
'end process readLineP;',
'd5mLineRamP: process (m_axis_aclk) begin',
'    if rising_edge(m_axis_aclk) then',
'        rVdata &lt;= d5mLine(cordx);',
'    end if;',
'end process d5mLineRamP;',
'd5mP: process (m_axis_aclk) begin',
'    if rising_edge(m_axis_aclk) then',
'        oRawData.valid  &lt;= rLine;',
'        oRawData.pEof   &lt;= pEof;',
'        oRawData.pSof   &lt;= pSof;',
'        oRawData.cord.x &lt;= std_logic_vector(to_unsigned(cordx, 16)); ',
'        oRawData.cord.y &lt;= std_logic_vector(to_unsigned(cordy, 16)); ',
'        if (rLine = hi) then',
'            oRawData.data &lt;= rVdata;',
'        else',
'            oRawData.data &lt;= (others =&gt;lo);',
'        end if;',
'    end if;',
'end process d5mP;',
'end arch_imp;'
];
countinueBuildStmtTable(g_sourceLines);
