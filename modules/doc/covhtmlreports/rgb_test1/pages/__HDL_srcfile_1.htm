
<html>
<head>
  <meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
  <title>Questa Coverage Report</title>
  <link rel="StyleSheet" media="screen" href="../css/hdl2html.css"/>
</head>
<body id="hdl2html">
  <tt>
<pre>
<a name="1"><q-n>     1  </q-n></a>`<q-i>include</q-w> <q-l>"uvm_macros.svh"</q-l>
<a name="2"><q-n>     2  </q-n></a><q-w>package</q-w> socTest_pkg;
<a name="3"><q-n>     3  </q-n></a><q-w>import</q-w> uvm_pkg::*;
<a name="4"><q-n>     4  </q-n></a><q-m>//====================================================================================</q-m>
<a name="5"><q-n>     5  </q-n></a><q-m>//------------------------------------------------------------------------------------</q-m>
<a name="6"><q-n>     6  </q-n></a><q-m>//--------------------------------- DEFINES</q-m>
<a name="7"><q-n>     7  </q-n></a><q-m>//------------------------------------------------------------------------------------</q-m>
<a name="8"><q-n>     8  </q-n></a><q-m>//====================================================================================</q-m>
<a name="9"><q-n>     9  </q-n></a><q-w>typedef</q-w> <q-w>struct</q-w> <q-w>packed</q-w> {
<a name="10"><q-n>     10  </q-n></a>   <q-w>byte</q-w> <q-w>unsigned</q-w> addr_width;
<a name="11"><q-n>     11  </q-n></a>   <q-w>byte</q-w> <q-w>unsigned</q-w> data_width;
<a name="12"><q-n>     12  </q-n></a>} width_confg1_t;
<a name="13"><q-n>     13  </q-n></a><q-w>typedef</q-w> <q-w>struct</q-w> <q-w>packed</q-w> {
<a name="14"><q-n>     14  </q-n></a>   <q-w>int</q-w> <q-w>unsigned</q-w> payload_length;
<a name="15"><q-n>     15  </q-n></a>} width_confg2_t;
<a name="16"><q-n>     16  </q-n></a><q-w>typedef</q-w> <q-w>struct</q-w> <q-w>packed</q-w> {
<a name="17"><q-n>     17  </q-n></a>   width_confg1_t w_p1;
<a name="18"><q-n>     18  </q-n></a>   width_confg2_t w_p2;
<a name="19"><q-n>     19  </q-n></a>} set_config;
<a name="20"><q-n>     20  </q-n></a><q-w>typedef</q-w> <q-w>enum</q-w> { READ, WRITE } axiLite_txn_e;
<a name="21"><q-n>     21  </q-n></a><q-w>parameter</q-w> set_config par_1 = '{ '{ addr_width: 11, data_width: 8 }, '{ payload_length: 2 } };
<a name="22"><q-n>     22  </q-n></a><q-w>parameter</q-w> set_config par_2 = '{ '{ addr_width: 11, data_width: 8 }, '{ payload_length: 4 } };
<a name="23"><q-n>     23  </q-n></a><q-w>parameter</q-w> set_config par_3 = '{ '{ addr_width: 11, data_width: 8 }, '{ payload_length: 3 } };
<a name="24"><q-n>     24  </q-n></a><q-w>typedef</q-w> <q-w>enum</q-w> <q-w>bit</q-w> [5:0] {
<a name="25"><q-n>     25  </q-n></a>	AX_FLOW_TYPE				= 6'h00,
<a name="26"><q-n>     26  </q-n></a>	AX_WRITE_TYPE				= 6'h08,
<a name="27"><q-n>     27  </q-n></a>	AX_MISC_WRITE_TYPE			= 6'h10,
<a name="28"><q-n>     28  </q-n></a>	AX_POSTED_WRITE_TYPE		= 6'h18,
<a name="29"><q-n>     29  </q-n></a>	AX_POSTED_MISC_WRITE_TYPE	= 6'h20,
<a name="30"><q-n>     30  </q-n></a>	AX_MODE_READ_TYPE			= 6'h28,
<a name="31"><q-n>     31  </q-n></a>	AX_READ_TYPE				= 6'h30,
<a name="32"><q-n>     32  </q-n></a>	AX_RESPONSE_TYPE			= 6'h38
<a name="33"><q-n>     33  </q-n></a>} ax_command_type;
<a name="34"><q-n>     34  </q-n></a><q-w>typedef</q-w> <q-w>enum</q-w> <q-w>bit</q-w> [5:0] {
<a name="35"><q-n>     35  </q-n></a>    AX_NULL                = 6'h00,
<a name="36"><q-n>     36  </q-n></a>    AX_PRET                = 6'h01,
<a name="37"><q-n>     37  </q-n></a>    AX_TRET                = 6'h02,
<a name="38"><q-n>     38  </q-n></a>    AX_IRTRY                = 6'h03,
<a name="39"><q-n>     39  </q-n></a>    AX_WRITE_16            = 6'h08,
<a name="40"><q-n>     40  </q-n></a>    AX_WRITE_32            = 6'h09,
<a name="41"><q-n>     41  </q-n></a>    AX_WRITE_48            = 6'h0a,
<a name="42"><q-n>     42  </q-n></a>    AX_WRITE_64            = 6'h0b,
<a name="43"><q-n>     43  </q-n></a>    AX_WRITE_80            = 6'h0c,
<a name="44"><q-n>     44  </q-n></a>    AX_WRITE_96            = 6'h0d,
<a name="45"><q-n>     45  </q-n></a>    AX_WRITE_112            = 6'h0e,
<a name="46"><q-n>     46  </q-n></a>    AX_WRITE_128            = 6'h0f,
<a name="47"><q-n>     47  </q-n></a>    <q-m>//-- misc write</q-m>
<a name="48"><q-n>     48  </q-n></a>    AX_MODE_WRITE            = 6'h10,
<a name="49"><q-n>     49  </q-n></a>    AX_BIT_WRITE            = 6'h11,
<a name="50"><q-n>     50  </q-n></a>    AX_DUAL_8B_ADDI        = 6'h12,
<a name="51"><q-n>     51  </q-n></a>    AX_SINGLE_16B_ADDI        = 6'h13,
<a name="52"><q-n>     52  </q-n></a>    AX_POSTED_WRITE_16        = 6'h18,
<a name="53"><q-n>     53  </q-n></a>    AX_POSTED_WRITE_32        = 6'h19,
<a name="54"><q-n>     54  </q-n></a>    AX_POSTED_WRITE_48        = 6'h1a,
<a name="55"><q-n>     55  </q-n></a>    AX_POSTED_WRITE_64        = 6'h1b,
<a name="56"><q-n>     56  </q-n></a>    AX_POSTED_WRITE_80        = 6'h1c,
<a name="57"><q-n>     57  </q-n></a>    AX_POSTED_WRITE_96        = 6'h1d,
<a name="58"><q-n>     58  </q-n></a>    AX_POSTED_WRITE_112    = 6'h1e,
<a name="59"><q-n>     59  </q-n></a>    AX_POSTED_WRITE_128    = 6'h1f,
<a name="60"><q-n>     60  </q-n></a>    AX_POSTED_BIT_WRIT            = 6'h21,
<a name="61"><q-n>     61  </q-n></a>    AX_POSTED_DUAL_8B_ADDI        = 6'h22,
<a name="62"><q-n>     62  </q-n></a>    AX_POSTED_SINGLE_16B_ADDI    = 6'h23,
<a name="63"><q-n>     63  </q-n></a>    AX_MODE_READ            = 6'h28,
<a name="64"><q-n>     64  </q-n></a>    AX_READ_16                = 6'h30,
<a name="65"><q-n>     65  </q-n></a>    AX_READ_32                = 6'h31,
<a name="66"><q-n>     66  </q-n></a>    AX_READ_48                = 6'h32,
<a name="67"><q-n>     67  </q-n></a>    AX_READ_64                = 6'h33,
<a name="68"><q-n>     68  </q-n></a>    AX_READ_80                = 6'h34,
<a name="69"><q-n>     69  </q-n></a>    AX_READ_96                = 6'h35,
<a name="70"><q-n>     70  </q-n></a>    AX_READ_112            = 6'h36,
<a name="71"><q-n>     71  </q-n></a>    AX_READ_128            = 6'h37,
<a name="72"><q-n>     72  </q-n></a>    AX_READ_RESPONSE        = 6'h38,
<a name="73"><q-n>     73  </q-n></a>    AX_WRITE_RESPONSE        = 6'h39,
<a name="74"><q-n>     74  </q-n></a>    AX_MODE_READ_RESPONSE    = 6'h3A,
<a name="75"><q-n>     75  </q-n></a>    AX_MODE_WRITE_RESPONSE    = 6'h3B,
<a name="76"><q-n>     76  </q-n></a>    AX_ERROR_RESPONSE        = 6'h3E
<a name="77"><q-n>     77  </q-n></a>} ax_command_encoding;
<a name="78"><q-n>     78  </q-n></a>`<q-a>define</q-w> AX_TYPE_MASK 6'h38
<a name="79"><q-n>     79  </q-n></a><q-m>//====================================================================================</q-m>
<a name="80"><q-n>     80  </q-n></a><q-m>//------------------------------------------------------------------------------------</q-m>
<a name="81"><q-n>     81  </q-n></a><q-m>//--------------------------------- UVM_CONFIGURATIONS</q-m>
<a name="82"><q-n>     82  </q-n></a><q-m>//------------------------------------------------------------------------------------</q-m>
<a name="83"><q-n>     83  </q-n></a><q-m>//====================================================================================</q-m>
<a name="84"><q-n>     84  </q-n></a><q-m>// UVM_OBJECT : TEMPLATE_CONFIGURATION [TEMPLATE]</q-m>
<a name="85"><q-n>     85  </q-n></a><q-w>class</q-w> template_configuration <q-w>extends</q-w> uvm_object;
<a name="86"><q-n>     86  </q-n></a>    `uvm_object_utils(template_configuration)
<a name="87"><q-n>     87  </q-n></a>    <q-w>function</q-w> <q-w>new</q-w>(<q-w>string</q-w> name = <q-l>""</q-l>);
<a name="88"><q-n>     88  </q-n></a>        <q-w>super</q-w>.<q-w>new</q-w>(name);
<a name="89"><q-n>     89  </q-n></a>    <q-w>endfunction</q-w>: <q-w>new</q-w>
<a name="90"><q-n>     90  </q-n></a><q-w>endclass</q-w>: template_configuration
<a name="91"><q-n>     91  </q-n></a><q-m>// UVM_OBJECT : AXILITE_CONFIGURATION [AXI4_LITE]</q-m>
<a name="92"><q-n>     92  </q-n></a><q-w>class</q-w> axiLite_configuration <q-w>extends</q-w> uvm_object;
<a name="93"><q-n>     93  </q-n></a>    `uvm_object_utils(axiLite_configuration)
<a name="94"><q-n>     94  </q-n></a>    <q-w>function</q-w> <q-w>new</q-w>(<q-w>string</q-w> name = <q-l>""</q-l>);
<a name="95"><q-n>     95  </q-n></a>        <q-w>super</q-w>.<q-w>new</q-w>(name);
<a name="96"><q-n>     96  </q-n></a>    <q-w>endfunction</q-w>: <q-w>new</q-w>
<a name="97"><q-n>     97  </q-n></a><q-w>endclass</q-w>: axiLite_configuration
<a name="98"><q-n>     98  </q-n></a><q-m>// UVM_OBJECT : RGB_CONFIGURATION [RGB]</q-m>
<a name="99"><q-n>     99  </q-n></a><q-w>class</q-w> rgb_configuration <q-w>extends</q-w> uvm_object;
<a name="100"><q-n>     100  </q-n></a>    `uvm_object_utils(rgb_configuration)
<a name="101"><q-n>     101  </q-n></a>    <q-w>function</q-w> <q-w>new</q-w>(<q-w>string</q-w> name = <q-l>""</q-l>);
<a name="102"><q-n>     102  </q-n></a>        <q-w>super</q-w>.<q-w>new</q-w>(name);
<a name="103"><q-n>     103  </q-n></a>    <q-w>endfunction</q-w>: <q-w>new</q-w>
<a name="104"><q-n>     104  </q-n></a>    <q-w>rand</q-w> <q-w>int</q-w> count;
<a name="105"><q-n>     105  </q-n></a>    <q-w>constraint</q-w> c_count    { count &gt; 0; count &lt; 128; }
<a name="106"><q-n>     106  </q-n></a><q-w>endclass</q-w>: rgb_configuration
<a name="107"><q-n>     107  </q-n></a><q-m>// UVM_OBJECT : AXI4_STREAM_CONFIG [AXI4_STREAM]</q-m>
<a name="108"><q-n>     108  </q-n></a><q-w>class</q-w> axi4_stream_config <q-w>extends</q-w> uvm_object;
<a name="109"><q-n>     109  </q-n></a>	uvm_active_passive_enum master_active = UVM_ACTIVE;
<a name="110"><q-n>     110  </q-n></a>	uvm_active_passive_enum slave_active  = UVM_ACTIVE;
<a name="111"><q-n>     111  </q-n></a>	uvm_active_passive_enum open_rsp_mode = UVM_ACTIVE;
<a name="112"><q-n>     112  </q-n></a>    <q-w>virtual</q-w> axi4s_if axi4s_vif;
<a name="113"><q-n>     113  </q-n></a>	`uvm_object_utils_begin(axi4_stream_config)
<a name="114"><q-n>     114  </q-n></a>		`uvm_field_enum(uvm_active_passive_enum, master_active, UVM_DEFAULT)
<a name="115"><q-n>     115  </q-n></a>		`uvm_field_enum(uvm_active_passive_enum, slave_active,  UVM_DEFAULT)
<a name="116"><q-n>     116  </q-n></a>		`uvm_field_enum(uvm_active_passive_enum, open_rsp_mode,  UVM_DEFAULT)
<a name="117"><q-n>     117  </q-n></a>	`uvm_object_utils_end
<a name="118"><q-n>     118  </q-n></a>    <q-w>function</q-w> <q-w>new</q-w>(<q-w>string</q-w> name = <q-l>""</q-l>);
<a name="119"><q-n>     119  </q-n></a>        <q-w>super</q-w>.<q-w>new</q-w>(name);
<a name="120"><q-n>     120  </q-n></a>    <q-w>endfunction</q-w>: <q-w>new</q-w>
<a name="121"><q-n>     121  </q-n></a>	<q-w>virtual</q-w> <q-w>function</q-w> <q-w>void</q-w> do_print (uvm_printer printer);
<a name="122"><q-n>     122  </q-n></a>		<q-w>super</q-w>.do_print(printer);
<a name="123"><q-n>     123  </q-n></a>	<q-w>endfunction</q-w> : do_print
<a name="124"><q-n>     124  </q-n></a><q-w>endclass</q-w>: axi4_stream_config
<a name="125"><q-n>     125  </q-n></a><q-m>// UVM_OBJECT : AXI4_STREAM_AGENTS_CONFIG [AXI4_STREAM]</q-m>
<a name="126"><q-n>     126  </q-n></a><q-w>class</q-w> axi4_stream_agents_config <q-w>extends</q-w> uvm_object;
<a name="127"><q-n>     127  </q-n></a>    `uvm_object_utils(axi4_stream_agents_config)
<a name="128"><q-n>     128  </q-n></a>    <q-w>bit</q-w> has_axi4_agent1 = 1; <q-m>//switch to instantiate an agent #1</q-m>
<a name="129"><q-n>     129  </q-n></a>    <q-w>bit</q-w> has_axi4_agent2 = 1; <q-m>//switch to instantiate an agent #2</q-m>
<a name="130"><q-n>     130  </q-n></a>    axi4_stream_config axi4_agent_handler1;
<a name="131"><q-n>     131  </q-n></a>    axi4_stream_config axi4_agent_handler2;
<a name="132"><q-n>     132  </q-n></a>    <q-w>function</q-w> <q-w>new</q-w>(<q-w>string</q-w> name = <q-l>""</q-l>);
<a name="133"><q-n>     133  </q-n></a>        <q-w>super</q-w>.<q-w>new</q-w>(name);
<a name="134"><q-n>     134  </q-n></a>    <q-w>endfunction</q-w>: <q-w>new</q-w>
<a name="135"><q-n>     135  </q-n></a><q-w>endclass</q-w>: axi4_stream_agents_config
<a name="136"><q-n>     136  </q-n></a><q-m>//====================================================================================</q-m>
<a name="137"><q-n>     137  </q-n></a><q-m>//------------------------------------------------------------------------------------</q-m>
<a name="138"><q-n>     138  </q-n></a><q-m>//--------------------------------- UVM_SEQUENCE_ITEMES</q-m>
<a name="139"><q-n>     139  </q-n></a><q-m>//------------------------------------------------------------------------------------</q-m>
<a name="140"><q-n>     140  </q-n></a><q-m>//====================================================================================</q-m>
<a name="141"><q-n>     141  </q-n></a><q-m>// UVM_SEQUENCE_ITEM : RGB_TRANSACTION [RGB]</q-m>
<a name="142"><q-n>     142  </q-n></a><q-w>class</q-w> rgb_transaction#(<q-w>parameter</q-w> set_config cfg = par_1) <q-w>extends</q-w> uvm_sequence_item;
<a name="143"><q-n>     143  </q-n></a>    <q-w>rand</q-w> <q-w>bit</q-w>[cfg.w_p1.data_width-1:0]       iRed;
<a name="144"><q-n>     144  </q-n></a>    <q-w>rand</q-w> <q-w>bit</q-w>[cfg.w_p1.data_width-1:0]       iGreen;
<a name="145"><q-n>     145  </q-n></a>    <q-w>rand</q-w> <q-w>bit</q-w>[cfg.w_p1.data_width-1:0]       iBlue;
<a name="146"><q-n>     146  </q-n></a>    <q-w>rand</q-w> <q-w>bit</q-w>            iPixelEn;
<a name="147"><q-n>     147  </q-n></a>    <q-w>rand</q-w> <q-w>bit</q-w>            iValid;
<a name="148"><q-n>     148  </q-n></a>    <q-w>rand</q-w> <q-w>bit</q-w>            iEof;
<a name="149"><q-n>     149  </q-n></a>    <q-w>rand</q-w> <q-w>bit</q-w> [cfg.w_p1.addr_width-1:0]      iX;
<a name="150"><q-n>     150  </q-n></a>    <q-w>rand</q-w> <q-w>bit</q-w> [cfg.w_p1.addr_width-1:0]      iY;
<a name="151"><q-n>     151  </q-n></a>    <q-w>function</q-w> <q-w>new</q-w>(<q-w>string</q-w> name = <q-l>""</q-l>);
<a name="152"><q-n>     152  </q-n></a>        <q-w>super</q-w>.<q-w>new</q-w>(name);
<a name="153"><q-n>     153  </q-n></a>    <q-w>endfunction</q-w>: <q-w>new</q-w>
<a name="154"><q-n>     154  </q-n></a>    `uvm_object_utils_begin(rgb_transaction#(cfg))
<a name="155"><q-n>     155  </q-n></a>        `uvm_field_int(iRed,         UVM_ALL_ON)
<a name="156"><q-n>     156  </q-n></a>        `uvm_field_int(iGreen,       UVM_ALL_ON)
<a name="157"><q-n>     157  </q-n></a>        `uvm_field_int(iBlue,        UVM_ALL_ON)
<a name="158"><q-n>     158  </q-n></a>        `uvm_field_int(iPixelEn,     UVM_ALL_ON)
<a name="159"><q-n>     159  </q-n></a>        `uvm_field_int(iEof,         UVM_ALL_ON)
<a name="160"><q-n>     160  </q-n></a>        `uvm_field_int(iValid,       UVM_ALL_ON)
<a name="161"><q-n>     161  </q-n></a>        `uvm_field_int(iX,           UVM_ALL_ON)
<a name="162"><q-n>     162  </q-n></a>        `uvm_field_int(iY,           UVM_ALL_ON)
<a name="163"><q-n>     163  </q-n></a>    `uvm_object_utils_end
<a name="164"><q-n>     164  </q-n></a><q-w>endclass</q-w>: rgb_transaction
<a name="165"><q-n>     165  </q-n></a><q-m>// UVM_SEQUENCE_ITEM : AXILITE_TXN [AXI4_LITE]</q-m>
<a name="166"><q-n>     166  </q-n></a><q-w>class</q-w> axiLite_transaction <q-w>extends</q-w> uvm_sequence_item;
<a name="167"><q-n>     167  </q-n></a>    <q-w>rand</q-w> <q-w>bit</q-w> [15:0]     addr;
<a name="168"><q-n>     168  </q-n></a>    <q-w>rand</q-w> <q-w>bit</q-w> [31:0]     data;
<a name="169"><q-n>     169  </q-n></a>    <q-w>rand</q-w> <q-w>bit</q-w> [31:0]     WDATA;
<a name="170"><q-n>     170  </q-n></a>    <q-w>rand</q-w> <q-w>bit</q-w> [31:0]     RDATA;
<a name="171"><q-n>     171  </q-n></a>    <q-w>rand</q-w> axiLite_txn_e  reqWriteRead;
<a name="172"><q-n>     172  </q-n></a>    <q-w>rand</q-w> <q-w>int</q-w> <q-w>unsigned</q-w>   cycles;
<a name="173"><q-n>     173  </q-n></a>    <q-w>constraint</q-w> c_cycles { 
<a name="174"><q-n>     174  </q-n></a>    cycles &lt;= 20; }
<a name="175"><q-n>     175  </q-n></a>    <q-w>function</q-w> <q-w>new</q-w> (<q-w>string</q-w> name = <q-l>""</q-l>);
<a name="176"><q-n>     176  </q-n></a>        <q-w>super</q-w>.<q-w>new</q-w>(name);
<a name="177"><q-n>     177  </q-n></a>    <q-w>endfunction</q-w>
<a name="178"><q-n>     178  </q-n></a>    <q-w>function</q-w> <q-w>string</q-w> convert2string();
<a name="179"><q-n>     179  </q-n></a>        <q-w>return</q-w> $sformatf(<q-l>"addr='h%h, data='h%0h, cycles='d%0d"</q-l>,addr, data, cycles);
<a name="180"><q-n>     180  </q-n></a>    <q-w>endfunction</q-w>
<a name="181"><q-n>     181  </q-n></a>    `uvm_object_utils_begin(axiLite_transaction)
<a name="182"><q-n>     182  </q-n></a>        `uvm_field_int  (addr,                          UVM_DEFAULT)
<a name="183"><q-n>     183  </q-n></a>        `uvm_field_int  (data,                          UVM_DEFAULT)
<a name="184"><q-n>     184  </q-n></a>        `uvm_field_int  (WDATA,                         UVM_DEFAULT)
<a name="185"><q-n>     185  </q-n></a>        `uvm_field_int  (RDATA,                         UVM_DEFAULT)
<a name="186"><q-n>     186  </q-n></a>        `uvm_field_enum (axiLite_txn_e, reqWriteRead,   UVM_DEFAULT)    
<a name="187"><q-n>     187  </q-n></a>        `uvm_field_int  (cycles,                        UVM_DEFAULT)
<a name="188"><q-n>     188  </q-n></a>    `uvm_object_utils_end
<a name="189"><q-n>     189  </q-n></a><q-w>endclass</q-w>: axiLite_transaction
<a name="190"><q-n>     190  </q-n></a><q-m>// UVM_SEQUENCE_ITEM : TEMPLATE_TRANSACTION [TEMPLATE]</q-m>
<a name="191"><q-n>     191  </q-n></a><q-w>class</q-w> tp_transaction <q-w>extends</q-w> uvm_sequence_item;
<a name="192"><q-n>     192  </q-n></a>    <q-w>rand</q-w> <q-w>bit</q-w>[1:0] ina;
<a name="193"><q-n>     193  </q-n></a>    <q-w>rand</q-w> <q-w>bit</q-w>[1:0] inb;
<a name="194"><q-n>     194  </q-n></a>    <q-w>bit</q-w>[2:0]      outValTbs;
<a name="195"><q-n>     195  </q-n></a>    <q-w>bit</q-w>[2:0]      outValDut;
<a name="196"><q-n>     196  </q-n></a>    <q-w>function</q-w> <q-w>new</q-w>(<q-w>string</q-w> name = <q-l>""</q-l>);
<a name="197"><q-n>     197  </q-n></a>        <q-w>super</q-w>.<q-w>new</q-w>(name);
<a name="198"><q-n>     198  </q-n></a>    <q-w>endfunction</q-w>: <q-w>new</q-w>
<a name="199"><q-n>     199  </q-n></a>    `uvm_object_utils_begin(tp_transaction)
<a name="200"><q-n>     200  </q-n></a>        `uvm_field_int(ina, UVM_ALL_ON)
<a name="201"><q-n>     201  </q-n></a>        `uvm_field_int(inb, UVM_ALL_ON)
<a name="202"><q-n>     202  </q-n></a>        `uvm_field_int(outValTbs, UVM_ALL_ON)
<a name="203"><q-n>     203  </q-n></a>        `uvm_field_int(outValDut, UVM_ALL_ON)
<a name="204"><q-n>     204  </q-n></a>    `uvm_object_utils_end
<a name="205"><q-n>     205  </q-n></a><q-w>endclass</q-w>: tp_transaction
<a name="206"><q-n>     206  </q-n></a><q-m>// UVM_SEQUENCE_ITEM : AXI4_STREAM_VALID_CYCLE [AXI4_STREAM]</q-m>
<a name="207"><q-n>     207  </q-n></a><q-w>class</q-w> axi4_stream_valid_cycle  <q-w>extends</q-w> uvm_sequence_item;
<a name="208"><q-n>     208  </q-n></a>    <q-w>rand</q-w> <q-w>bit</q-w> [15:0]    tdata;
<a name="209"><q-n>     209  </q-n></a>    <q-w>rand</q-w> <q-w>bit</q-w>               tuser;
<a name="210"><q-n>     210  </q-n></a>    <q-w>rand</q-w> <q-w>int</q-w> <q-w>unsigned</q-w>      delay = 0;
<a name="211"><q-n>     211  </q-n></a>    <q-w>constraint</q-w> c_packet_delay {
<a name="212"><q-n>     212  </q-n></a>        delay &lt; 20 ;
<a name="213"><q-n>     213  </q-n></a>    }
<a name="214"><q-n>     214  </q-n></a>    <q-w>function</q-w> <q-w>new</q-w>(<q-w>string</q-w> name = <q-l>""</q-l>);
<a name="215"><q-n>     215  </q-n></a>        <q-w>super</q-w>.<q-w>new</q-w>(name);
<a name="216"><q-n>     216  </q-n></a>    <q-w>endfunction</q-w>: <q-w>new</q-w>
<a name="217"><q-n>     217  </q-n></a>    `uvm_object_utils_begin(axi4_stream_valid_cycle)
<a name="218"><q-n>     218  </q-n></a>        `uvm_field_int(tdata, UVM_ALL_ON | UVM_NOPACK | UVM_HEX)
<a name="219"><q-n>     219  </q-n></a>        `uvm_field_int(tuser, UVM_ALL_ON | UVM_NOPACK | UVM_HEX)
<a name="220"><q-n>     220  </q-n></a>        `uvm_field_int(delay, UVM_DEFAULT | UVM_DEC| UVM_NOPACK)
<a name="221"><q-n>     221  </q-n></a>    `uvm_object_utils_end
<a name="222"><q-n>     222  </q-n></a><q-w>endclass</q-w>: axi4_stream_valid_cycle
<a name="223"><q-n>     223  </q-n></a><q-m>//====================================================================================</q-m>
<a name="224"><q-n>     224  </q-n></a><q-m>//------------------------------------------------------------------------------------</q-m>
<a name="225"><q-n>     225  </q-n></a><q-m>//--------------------------------- UVM_SEQUENCERS</q-m>
<a name="226"><q-n>     226  </q-n></a><q-m>//------------------------------------------------------------------------------------</q-m>
<a name="227"><q-n>     227  </q-n></a><q-m>//====================================================================================</q-m>
<a name="228"><q-n>     228  </q-n></a><q-m>// UVM_SEQUENCE : TEMPLATE_SEQUENCER [TEMPLATE]</q-m>
<a name="229"><q-n>     229  </q-n></a><q-w>class</q-w> template_sequencer <q-w>extends</q-w> uvm_sequencer #(tp_transaction);
<a name="230"><q-n>     230  </q-n></a>    `uvm_component_utils(template_sequencer)
<a name="231"><q-n>     231  </q-n></a>    <q-w>function</q-w> <q-w>new</q-w>(<q-w>string</q-w> name, uvm_component parent);
<a name="232"><q-n>     232  </q-n></a>        <q-w>super</q-w>.<q-w>new</q-w>(name, parent);
<a name="233"><q-n>     233  </q-n></a>    <q-w>endfunction</q-w>
<a name="234"><q-n>     234  </q-n></a><q-w>endclass</q-w>: template_sequencer
<a name="235"><q-n>     235  </q-n></a><q-m>// UVM_SEQUENCE : AXILITE_SEQUENCER [AXI4_LITE]</q-m>
<a name="236"><q-n>     236  </q-n></a><q-w>class</q-w> axiLite_sequencer <q-w>extends</q-w> uvm_sequencer #(axiLite_transaction);
<a name="237"><q-n>     237  </q-n></a>    <q-w>int</q-w> id;
<a name="238"><q-n>     238  </q-n></a>    `uvm_component_utils_begin(axiLite_sequencer)
<a name="239"><q-n>     239  </q-n></a>        `uvm_field_int(id, UVM_DEFAULT)
<a name="240"><q-n>     240  </q-n></a>    `uvm_component_utils_end
<a name="241"><q-n>     241  </q-n></a>    <q-w>function</q-w> <q-w>new</q-w> (<q-w>string</q-w> name, uvm_component parent);
<a name="242"><q-n>     242  </q-n></a>        <q-w>super</q-w>.<q-w>new</q-w>(name, parent);
<a name="243"><q-n>     243  </q-n></a>    <q-w>endfunction</q-w>
<a name="244"><q-n>     244  </q-n></a><q-w>endclass</q-w>: axiLite_sequencer
<a name="245"><q-n>     245  </q-n></a><q-m>// UVM_SEQUENCE : RGB_SEQUENCER [RGB]</q-m>
<a name="246"><q-n>     246  </q-n></a><q-w>class</q-w> rgb_sequencer#(<q-w>parameter</q-w> set_config cfg = par_1) <q-w>extends</q-w> uvm_sequencer#(rgb_transaction#(cfg));
<a name="247"><q-n>     247  </q-n></a>    `uvm_component_param_utils(rgb_sequencer#(cfg))
<a name="248"><q-n>     248  </q-n></a>    <q-w>function</q-w> <q-w>new</q-w>(<q-w>string</q-w> name, uvm_component parent);
<a name="249"><q-n>     249  </q-n></a>        <q-w>super</q-w>.<q-w>new</q-w>(name, parent);
<a name="250"><q-n>     250  </q-n></a>    <q-w>endfunction</q-w>
<a name="251"><q-n>     251  </q-n></a><q-w>endclass</q-w>: rgb_sequencer
<a name="252"><q-n>     252  </q-n></a><q-m>// UVM_SEQUENCE : AXI4_STREAM_MASTER_SEQUENCER [AXI4_STREAM]</q-m>
<a name="253"><q-n>     253  </q-n></a><q-w>class</q-w> axi4_stream_master_sequencer <q-w>extends</q-w> uvm_sequencer #(axi4_stream_valid_cycle);
<a name="254"><q-n>     254  </q-n></a>    `uvm_component_utils(axi4_stream_master_sequencer)
<a name="255"><q-n>     255  </q-n></a>    <q-w>function</q-w> <q-w>new</q-w>(<q-w>string</q-w> name, uvm_component parent);
<a name="256"><q-n>     256  </q-n></a>        <q-w>super</q-w>.<q-w>new</q-w>(name, parent);
<a name="257"><q-n>     257  </q-n></a>    <q-w>endfunction</q-w>
<a name="258"><q-n>     258  </q-n></a><q-w>endclass</q-w>: axi4_stream_master_sequencer
<a name="259"><q-n>     259  </q-n></a><q-m>//====================================================================================</q-m>
<a name="260"><q-n>     260  </q-n></a><q-m>//------------------------------------------------------------------------------------</q-m>
<a name="261"><q-n>     261  </q-n></a><q-m>//--------------------------------- UVM_SEQUENCES</q-m>
<a name="262"><q-n>     262  </q-n></a><q-m>//------------------------------------------------------------------------------------</q-m>
<a name="263"><q-n>     263  </q-n></a><q-m>//====================================================================================</q-m>
<a name="264"><q-n>     264  </q-n></a><q-m>// UVM_SEQUENCE : RGB_RANDOM_SEQUENCE [RGB]</q-m>
<a name="265"><q-n>     265  </q-n></a><q-w>class</q-w> rgb_random_sequence#(<q-w>parameter</q-w> set_config cfg = par_1) <q-w>extends</q-w> uvm_sequence#(rgb_transaction#(cfg));
<a name="266"><q-n>     266  </q-n></a>    `uvm_object_param_utils(rgb_random_sequence#(cfg));
<a name="267"><q-n>     267  </q-n></a>    <q-w>function</q-w> <q-w>new</q-w>(<q-w>string</q-w> name = <q-l>"rgb_random_sequence"</q-l>);
<a name="268"><q-n>     268  </q-n></a>        <q-w>super</q-w>.<q-w>new</q-w>(name);
<a name="269"><q-n>     269  </q-n></a>    <q-w>endfunction</q-w> : <q-w>new</q-w>
<a name="270"><q-n>     270  </q-n></a>    <q-w>task</q-w> body();
<a name="271"><q-n>     271  </q-n></a>    rgb_transaction#(cfg) frame_tx = rgb_transaction#(cfg)::type_id::create(<q-l>"frame_tx"</q-l>);
<a name="272"><q-n>     272  </q-n></a>        <q-w>repeat</q-w> (100000) <q-w>begin</q-w> : random_loop
<a name="273"><q-n>     273  </q-n></a>            start_item(frame_tx);
<a name="274"><q-n>     274  </q-n></a>            <q-w>assert</q-w>(frame_tx.randomize());
<a name="275"><q-n>     275  </q-n></a>            finish_item(frame_tx);
<a name="276"><q-n>     276  </q-n></a>        <q-w>end</q-w> : random_loop
<a name="277"><q-n>     277  </q-n></a>    <q-w>endtask</q-w> : body
<a name="278"><q-n>     278  </q-n></a><q-w>endclass</q-w>: rgb_random_sequence
<a name="279"><q-n>     279  </q-n></a><q-m>// UVM_SEQUENCE : RANDOM_SEQUENCE_R1 [RGB]</q-m>
<a name="280"><q-n>     280  </q-n></a><q-w>class</q-w> random_sequence_r1#(<q-w>parameter</q-w> set_config cfg = par_1) <q-w>extends</q-w> uvm_sequence#(rgb_transaction#(cfg));
<a name="281"><q-n>     281  </q-n></a>    `uvm_object_param_utils(random_sequence_r1#(cfg));
<a name="282"><q-n>     282  </q-n></a>    <q-w>function</q-w> <q-w>new</q-w>(<q-w>string</q-w> name = <q-l>"random_sequence_r1"</q-l>);
<a name="283"><q-n>     283  </q-n></a>        <q-w>super</q-w>.<q-w>new</q-w>(name);
<a name="284"><q-n>     284  </q-n></a>    <q-w>endfunction</q-w> : <q-w>new</q-w>
<a name="285"><q-n>     285  </q-n></a>    <q-w>task</q-w> body();
<a name="286"><q-n>     286  </q-n></a>    rgb_transaction#(cfg) frame_tx = rgb_transaction#(cfg)::type_id::create(<q-l>"frame_tx"</q-l>);
<a name="287"><q-n>     287  </q-n></a>    `uvm_info(<q-l>"random_sequence_r1"</q-l>, <q-l>"executing..."</q-l>, UVM_LOW)
<a name="288"><q-n>     288  </q-n></a>        <q-w>repeat</q-w> (100) <q-w>begin</q-w> : random_loop
<a name="289"><q-n>     289  </q-n></a>            start_item(frame_tx);
<a name="290"><q-n>     290  </q-n></a>            <q-w>assert</q-w>(frame_tx.randomize());
<a name="291"><q-n>     291  </q-n></a>            finish_item(frame_tx);
<a name="292"><q-n>     292  </q-n></a>        <q-w>end</q-w> : random_loop
<a name="293"><q-n>     293  </q-n></a>    <q-w>endtask</q-w> : body
<a name="294"><q-n>     294  </q-n></a><q-w>endclass</q-w>: random_sequence_r1
<a name="295"><q-n>     295  </q-n></a><q-m>// UVM_SEQUENCE : RANDOM_SEQUENCE_R2 [RGB]</q-m>
<a name="296"><q-n>     296  </q-n></a><q-w>class</q-w> random_sequence_r2 <q-w>extends</q-w> random_sequence_r1;
<a name="297"><q-n>     297  </q-n></a>    `uvm_object_utils(random_sequence_r2);
<a name="298"><q-n>     298  </q-n></a>    <q-w>function</q-w> <q-w>new</q-w>(<q-w>string</q-w> name = <q-l>"random_sequence_r2"</q-l>);
<a name="299"><q-n>     299  </q-n></a>        <q-w>super</q-w>.<q-w>new</q-w>(name);
<a name="300"><q-n>     300  </q-n></a>    <q-w>endfunction</q-w> : <q-w>new</q-w>
<a name="301"><q-n>     301  </q-n></a>    <q-w>task</q-w> body();
<a name="302"><q-n>     302  </q-n></a>    rgb_transaction#(cfg) frame_tx = rgb_transaction#(cfg)::type_id::create(<q-l>"frame_tx"</q-l>);
<a name="303"><q-n>     303  </q-n></a>    `uvm_info(<q-l>"random_sequence_r2"</q-l>, <q-l>"executing..."</q-l>, UVM_LOW)
<a name="304"><q-n>     304  </q-n></a>        <q-w>repeat</q-w> (1) <q-w>begin</q-w> : random_loop
<a name="305"><q-n>     305  </q-n></a>            start_item(frame_tx);
<a name="306"><q-n>     306  </q-n></a>            <q-w>assert</q-w>(frame_tx.randomize());
<a name="307"><q-n>     307  </q-n></a>            finish_item(frame_tx);
<a name="308"><q-n>     308  </q-n></a>        <q-w>end</q-w> : random_loop
<a name="309"><q-n>     309  </q-n></a>    <q-w>endtask</q-w> : body
<a name="310"><q-n>     310  </q-n></a><q-w>endclass</q-w>: random_sequence_r2
<a name="311"><q-n>     311  </q-n></a><q-m>// UVM_SEQUENCE : TOP_SEQUENCE [RGB]</q-m>
<a name="312"><q-n>     312  </q-n></a><q-w>class</q-w> top_sequence <q-w>extends</q-w> uvm_sequence #(rgb_transaction);
<a name="313"><q-n>     313  </q-n></a>    `uvm_object_utils(top_sequence)
<a name="314"><q-n>     314  </q-n></a>    `uvm_declare_p_sequencer(rgb_sequencer)
<a name="315"><q-n>     315  </q-n></a>    <q-w>function</q-w> <q-w>new</q-w> (<q-w>string</q-w> name = <q-l>""</q-l>);
<a name="316"><q-n>     316  </q-n></a>        <q-w>super</q-w>.<q-w>new</q-w>(name);
<a name="317"><q-n>     317  </q-n></a>    <q-w>endfunction</q-w>
<a name="318"><q-n>     318  </q-n></a>    <q-w>task</q-w> body;
<a name="319"><q-n>     319  </q-n></a>        rgb_configuration cfg;
<a name="320"><q-n>     320  </q-n></a>        <q-w>int</q-w> count;
<a name="321"><q-n>     321  </q-n></a>        <q-w>if</q-w> ( uvm_config_db #(rgb_configuration)::get(p_sequencer, <q-l>""</q-l>, <q-l>"config"</q-l>, cfg) ) <q-w>begin</q-w>
<a name="322"><q-n>     322  </q-n></a>            count    = cfg.count;
<a name="323"><q-n>     323  </q-n></a>        <q-w>end</q-w>
<a name="324"><q-n>     324  </q-n></a>        <q-w>else</q-w> <q-w>begin</q-w>
<a name="325"><q-n>     325  </q-n></a>            count    = 1;
<a name="326"><q-n>     326  </q-n></a>        <q-w>end</q-w>
<a name="327"><q-n>     327  </q-n></a>        <q-w>if</q-w> (starting_phase != <q-w>null</q-w>)
<a name="328"><q-n>     328  </q-n></a>            starting_phase.raise_objection(<q-w>this</q-w>);
<a name="329"><q-n>     329  </q-n></a>        <q-w>repeat</q-w>(count) <q-w>begin</q-w>
<a name="330"><q-n>     330  </q-n></a>            random_sequence_r1#(par_1) seq;
<a name="331"><q-n>     331  </q-n></a>            seq = random_sequence_r1#(par_1)::type_id::create(<q-l>"seq"</q-l>);
<a name="332"><q-n>     332  </q-n></a>            seq.start(p_sequencer, <q-w>this</q-w>);
<a name="333"><q-n>     333  </q-n></a>        <q-w>end</q-w>
<a name="334"><q-n>     334  </q-n></a>        <q-w>if</q-w> (starting_phase != <q-w>null</q-w>)
<a name="335"><q-n>     335  </q-n></a>            starting_phase.drop_objection(<q-w>this</q-w>);
<a name="336"><q-n>     336  </q-n></a>    <q-w>endtask</q-w>: body
<a name="337"><q-n>     337  </q-n></a><q-w>endclass</q-w>: top_sequence
<a name="338"><q-n>     338  </q-n></a><q-m>// UVM_SEQUENCE : AXILITE_BASE_SEQ [AXI4_LITE]</q-m>
<a name="339"><q-n>     339  </q-n></a><q-w>virtual</q-w> <q-w>class</q-w> axiLite_base_seq <q-w>extends</q-w> uvm_sequence #(axiLite_transaction);
<a name="340"><q-n>     340  </q-n></a>    <q-w>function</q-w> <q-w>new</q-w> (<q-w>string</q-w> name=<q-l>"axiLite_base_seq"</q-l>);
<a name="341"><q-n>     341  </q-n></a>        <q-w>super</q-w>.<q-w>new</q-w>(name);
<a name="342"><q-n>     342  </q-n></a>    <q-w>endfunction</q-w>
<a name="343"><q-n>     343  </q-n></a><q-w>endclass</q-w>: axiLite_base_seq
<a name="344"><q-n>     344  </q-n></a><q-m>// UVM_SEQUENCE : AXILITE_NO_ACTIVITY_SEQ [AXI4_LITE]</q-m>
<a name="345"><q-n>     345  </q-n></a><q-w>class</q-w> axiLite_no_activity_sequence <q-w>extends</q-w> axiLite_base_seq;
<a name="346"><q-n>     346  </q-n></a>    `uvm_object_utils(axiLite_no_activity_sequence)
<a name="347"><q-n>     347  </q-n></a>    <q-w>function</q-w> <q-w>new</q-w>(<q-w>string</q-w> name=<q-l>"axiLite_no_activity_sequence"</q-l>);
<a name="348"><q-n>     348  </q-n></a>        <q-w>super</q-w>.<q-w>new</q-w>(name);
<a name="349"><q-n>     349  </q-n></a>    <q-w>endfunction</q-w>
<a name="350"><q-n>     350  </q-n></a>    <q-w>virtual</q-w> <q-w>task</q-w> body();
<a name="351"><q-n>     351  </q-n></a>        `uvm_info(<q-l>"SEQ"</q-l>, <q-l>"executing"</q-l>, UVM_LOW)
<a name="352"><q-n>     352  </q-n></a>    <q-w>endtask</q-w>: body
<a name="353"><q-n>     353  </q-n></a><q-w>endclass</q-w>: axiLite_no_activity_sequence
<a name="354"><q-n>     354  </q-n></a><q-m>// UVM_SEQUENCE : AXILITE_RANDOM_SEQ [AXI4_LITE]</q-m>
<a name="355"><q-n>     355  </q-n></a><q-w>class</q-w> axiLite_random_sequence <q-w>extends</q-w> axiLite_base_seq;
<a name="356"><q-n>     356  </q-n></a>    `uvm_object_utils(axiLite_random_sequence)
<a name="357"><q-n>     357  </q-n></a>    <q-w>function</q-w> <q-w>new</q-w>(<q-w>string</q-w> name=<q-l>"axiLite_random_sequence"</q-l>);
<a name="358"><q-n>     358  </q-n></a>        <q-w>super</q-w>.<q-w>new</q-w>(name);
<a name="359"><q-n>     359  </q-n></a>    <q-w>endfunction</q-w>
<a name="360"><q-n>     360  </q-n></a>    <q-w>virtual</q-w> <q-w>task</q-w> body();
<a name="361"><q-n>     361  </q-n></a>        axiLite_transaction item;
<a name="362"><q-n>     362  </q-n></a>        <q-w>int</q-w> num_txn;
<a name="363"><q-n>     363  </q-n></a>        <q-w>bit</q-w> typ_txn;
<a name="364"><q-n>     364  </q-n></a>        `uvm_info(<q-l>"SEQ"</q-l>, <q-l>"executing..."</q-l>, UVM_LOW)
<a name="365"><q-n>     365  </q-n></a>        num_txn = $urandom_range(5,20);
<a name="366"><q-n>     366  </q-n></a>        <q-w>repeat</q-w>(num_txn) <q-w>begin</q-w>    
<a name="367"><q-n>     367  </q-n></a>        `uvm_create(item)
<a name="368"><q-n>     368  </q-n></a>        item.cycles         = $urandom_range(1,5);
<a name="369"><q-n>     369  </q-n></a>        item.addr           = $urandom();
<a name="370"><q-n>     370  </q-n></a>        item.data           = $urandom();
<a name="371"><q-n>     371  </q-n></a>        typ_txn             = $random();
<a name="372"><q-n>     372  </q-n></a>        item.reqWriteRead   = typ_txn ? WRITE : READ; 
<a name="373"><q-n>     373  </q-n></a>        `uvm_send(item);
<a name="374"><q-n>     374  </q-n></a>        <q-w>end</q-w>    
<a name="375"><q-n>     375  </q-n></a>    <q-w>endtask</q-w>: body
<a name="376"><q-n>     376  </q-n></a><q-w>endclass</q-w>: axiLite_random_sequence
<a name="377"><q-n>     377  </q-n></a><q-m>// UVM_SEQUENCE : AXILITE_DIRECTED_SEQ [AXI4_LITE]</q-m>
<a name="378"><q-n>     378  </q-n></a><q-w>class</q-w> axiLite_directed_sequence <q-w>extends</q-w> axiLite_base_seq;
<a name="379"><q-n>     379  </q-n></a>    `uvm_object_utils(axiLite_directed_sequence)
<a name="380"><q-n>     380  </q-n></a>    <q-w>function</q-w> <q-w>new</q-w>(<q-w>string</q-w> name=<q-l>"axiLite_directed_sequence"</q-l>);
<a name="381"><q-n>     381  </q-n></a>        <q-w>super</q-w>.<q-w>new</q-w>(name);
<a name="382"><q-n>     382  </q-n></a>    <q-w>endfunction</q-w>
<a name="383"><q-n>     383  </q-n></a>    <q-w>virtual</q-w> <q-w>task</q-w> body();
<a name="384"><q-n>     384  </q-n></a>        axiLite_transaction item;
<a name="385"><q-n>     385  </q-n></a>        <q-w>bit</q-w> [8:0] addr;
<a name="386"><q-n>     386  </q-n></a>        `uvm_info(<q-l>"SEQ"</q-l>, <q-l>"executing...WR-&gt;RD-&gt;WR-&gt;RD"</q-l>, UVM_LOW)
<a name="387"><q-n>     387  </q-n></a>        <q-w>for</q-w>(addr = 0; addr &lt; 256; addr ++) <q-w>begin</q-w>
<a name="388"><q-n>     388  </q-n></a>            `uvm_create(item)
<a name="389"><q-n>     389  </q-n></a>            item.addr           = {14'h0,addr[7:0]};
<a name="390"><q-n>     390  </q-n></a>            item.reqWriteRead   = addr[0] ? READ : WRITE;
<a name="391"><q-n>     391  </q-n></a>            item.cycles         = 0;
<a name="392"><q-n>     392  </q-n></a>            item.data           = addr;
<a name="393"><q-n>     393  </q-n></a>            `uvm_send(item);
<a name="394"><q-n>     394  </q-n></a>        <q-w>end</q-w>
<a name="395"><q-n>     395  </q-n></a>        `uvm_info(<q-l>"SEQ"</q-l>, <q-l>"executing...WR-&gt;WR-&gt;RD-&gt;RD"</q-l>, UVM_LOW)
<a name="396"><q-n>     396  </q-n></a>        <q-w>for</q-w>(addr = 0; addr &lt; 255; addr ++) <q-w>begin</q-w>
<a name="397"><q-n>     397  </q-n></a>            `uvm_create(item)
<a name="398"><q-n>     398  </q-n></a>            item.addr           = {14'h0,addr[7:0]};
<a name="399"><q-n>     399  </q-n></a>            item.reqWriteRead   = addr[8] ? READ : WRITE;
<a name="400"><q-n>     400  </q-n></a>            item.cycles         = 5;
<a name="401"><q-n>     401  </q-n></a>            item.data           = addr;
<a name="402"><q-n>     402  </q-n></a>            `uvm_send(item);
<a name="403"><q-n>     403  </q-n></a>        <q-w>end</q-w>
<a name="404"><q-n>     404  </q-n></a>    <q-w>endtask</q-w>: body
<a name="405"><q-n>     405  </q-n></a><q-w>endclass</q-w>: axiLite_directed_sequence
<a name="406"><q-n>     406  </q-n></a><q-m>// UVM_SEQUENCE : AXILITE_USEVAR_SEQ [AXI4_LITE]</q-m>
<a name="407"><q-n>     407  </q-n></a><q-w>class</q-w> axiLite_usevar_sequence <q-w>extends</q-w> axiLite_base_seq;
<a name="408"><q-n>     408  </q-n></a>    `uvm_object_utils(axiLite_usevar_sequence)
<a name="409"><q-n>     409  </q-n></a>    `uvm_declare_p_sequencer(axiLite_sequencer)
<a name="410"><q-n>     410  </q-n></a>    <q-w>function</q-w> <q-w>new</q-w>(<q-w>string</q-w> name=<q-l>"axiLite_usevar_sequence"</q-l>);
<a name="411"><q-n>     411  </q-n></a>        <q-w>super</q-w>.<q-w>new</q-w>(name);
<a name="412"><q-n>     412  </q-n></a>    <q-w>endfunction</q-w>
<a name="413"><q-n>     413  </q-n></a>    <q-w>virtual</q-w> <q-w>task</q-w> body();
<a name="414"><q-n>     414  </q-n></a>    axiLite_transaction item;
<a name="415"><q-n>     415  </q-n></a>    <q-w>int</q-w> id;
<a name="416"><q-n>     416  </q-n></a>    `uvm_info(<q-l>"SEQ"</q-l>, <q-l>"executing..."</q-l>, UVM_LOW)
<a name="417"><q-n>     417  </q-n></a>    id = p_sequencer.id;
<a name="418"><q-n>     418  </q-n></a>    `uvm_info(<q-l>"SEQ"</q-l>, $sformatf(<q-l>"using id=%0hh from sequencer"</q-l>, id), UVM_LOW)
<a name="419"><q-n>     419  </q-n></a>    `uvm_create(item)
<a name="420"><q-n>     420  </q-n></a>    item.cycles = $urandom_range(1,5);
<a name="421"><q-n>     421  </q-n></a>    item.data = id;
<a name="422"><q-n>     422  </q-n></a>    `uvm_send(item);
<a name="423"><q-n>     423  </q-n></a>    <q-w>endtask</q-w>
<a name="424"><q-n>     424  </q-n></a><q-w>endclass</q-w>: axiLite_usevar_sequence
<a name="425"><q-n>     425  </q-n></a><q-m>// UVM_SEQUENCE : TEMPLATE_BASE_SEQ [TEMPLATE]</q-m>
<a name="426"><q-n>     426  </q-n></a><q-w>virtual</q-w> <q-w>class</q-w> template_base_sequence <q-w>extends</q-w> uvm_sequence #(tp_transaction);
<a name="427"><q-n>     427  </q-n></a>    <q-w>function</q-w> <q-w>new</q-w> (<q-w>string</q-w> name=<q-l>"template_base_sequence"</q-l>);
<a name="428"><q-n>     428  </q-n></a>        <q-w>super</q-w>.<q-w>new</q-w>(name);
<a name="429"><q-n>     429  </q-n></a>    <q-w>endfunction</q-w>
<a name="430"><q-n>     430  </q-n></a><q-w>endclass</q-w>: template_base_sequence
<a name="431"><q-n>     431  </q-n></a><q-m>// UVM_SEQUENCE : TEMPLATE_SEQUENCE [TEMPLATE]</q-m>
<a name="432"><q-n>     432  </q-n></a><q-w>class</q-w> template_sequence <q-w>extends</q-w> uvm_sequence#(tp_transaction);
<a name="433"><q-n>     433  </q-n></a>    `uvm_object_utils(template_sequence)
<a name="434"><q-n>     434  </q-n></a>    <q-w>function</q-w> <q-w>new</q-w>(<q-w>string</q-w> name = <q-l>""</q-l>);
<a name="435"><q-n>     435  </q-n></a>        <q-w>super</q-w>.<q-w>new</q-w>(name);
<a name="436"><q-n>     436  </q-n></a>    <q-w>endfunction</q-w>: <q-w>new</q-w>
<a name="437"><q-n>     437  </q-n></a>    <q-w>task</q-w> body();
<a name="438"><q-n>     438  </q-n></a>        tp_transaction tx;
<a name="439"><q-n>     439  </q-n></a>        <q-w>repeat</q-w>(100) <q-w>begin</q-w>
<a name="440"><q-n>     440  </q-n></a>        tx = tp_transaction::type_id::create(.name(<q-l>"tx"</q-l>), .contxt(get_full_name()));
<a name="441"><q-n>     441  </q-n></a>        start_item(tx);
<a name="442"><q-n>     442  </q-n></a>            <q-w>assert</q-w>(tx.randomize());
<a name="443"><q-n>     443  </q-n></a>            <q-m>//`uvm_info("sa_sequence", tx.sprint(), UVM_LOW);</q-m>
<a name="444"><q-n>     444  </q-n></a>        finish_item(tx);
<a name="445"><q-n>     445  </q-n></a>        <q-w>end</q-w>
<a name="446"><q-n>     446  </q-n></a>    <q-w>endtask</q-w>: body
<a name="447"><q-n>     447  </q-n></a><q-w>endclass</q-w>: template_sequence
<a name="448"><q-n>     448  </q-n></a><q-m>// UVM_SEQUENCE_ITEM : AX_PACKET [AXI4_STREAM]</q-m>
<a name="449"><q-n>     449  </q-n></a><q-w>class</q-w> ax_packet <q-w>extends</q-w> uvm_sequence_item;
<a name="450"><q-n>     450  </q-n></a><q-w>parameter</q-w> AX_TYPE_MASK = 6'h38;
<a name="451"><q-n>     451  </q-n></a>	<q-m>// request header fields</q-m>
<a name="452"><q-n>     452  </q-n></a>	<q-w>rand</q-w> <q-w>bit</q-w> [2:0]			cube_ID;				<q-m>// CUB</q-m>
<a name="453"><q-n>     453  </q-n></a>	<q-w>rand</q-w> <q-w>bit</q-w> [33:0]		    address;				<q-m>// ADRS</q-m>
<a name="454"><q-n>     454  </q-n></a>	<q-w>rand</q-w> <q-w>bit</q-w> [8:0]			tag;					<q-m>// TAG</q-m>
<a name="455"><q-n>     455  </q-n></a>	<q-w>rand</q-w> <q-w>bit</q-w> [3:0]			packet_length;			<q-m>// LNG 128-bit (16-byte) flits</q-m>
<a name="456"><q-n>     456  </q-n></a>	<q-w>rand</q-w> <q-w>bit</q-w> [3:0]			duplicate_length;		<q-m>// DLN</q-m>
<a name="457"><q-n>     457  </q-n></a>	<q-w>rand</q-w> ax_command_encoding 	command;			<q-m>// CMD</q-m>
<a name="458"><q-n>     458  </q-n></a>	<q-w>bit</q-w> [127:0]				payload[$];				<q-m>// 16-byte granularity</q-m>
<a name="459"><q-n>     459  </q-n></a>	<q-m>// request tail fields</q-m>
<a name="460"><q-n>     460  </q-n></a>	<q-w>rand</q-w> <q-w>bit</q-w> [4:0]			return_token_count;		<q-m>// RTC</q-m>
<a name="461"><q-n>     461  </q-n></a>	<q-w>rand</q-w> <q-w>bit</q-w> [2:0]			source_link_ID;			<q-m>// SLID</q-m>
<a name="462"><q-n>     462  </q-n></a>	<q-w>rand</q-w> <q-w>bit</q-w> [2:0]			sequence_number;		<q-m>// SEQ</q-m>
<a name="463"><q-n>     463  </q-n></a>	<q-w>rand</q-w> <q-w>bit</q-w> [7:0]			forward_retry_pointer;	<q-m>// FRP</q-m>
<a name="464"><q-n>     464  </q-n></a>	<q-w>rand</q-w> <q-w>bit</q-w> [7:0]			return_retry_pointer;	<q-m>// RRP</q-m>
<a name="465"><q-n>     465  </q-n></a>	<q-w>rand</q-w> <q-w>bit</q-w> [31:0]		packet_crc;				<q-m>// CRC</q-m>
<a name="466"><q-n>     466  </q-n></a>	<q-m>// response header fields not used before</q-m>
<a name="467"><q-n>     467  </q-n></a>	<q-w>rand</q-w> <q-w>bit</q-w> [8:0]			return_tag;				<q-m>// TGA (Optional)</q-m>
<a name="468"><q-n>     468  </q-n></a>	<q-m>// response tail fields not used before</q-m>
<a name="469"><q-n>     469  </q-n></a>	<q-w>rand</q-w> <q-w>bit</q-w> [6:0]			error_status;			<q-m>// ERRSTAT</q-m>
<a name="470"><q-n>     470  </q-n></a>	<q-w>rand</q-w> <q-w>bit</q-w>				data_invalid;			<q-m>// DINV</q-m>
<a name="471"><q-n>     471  </q-n></a>	<q-m>// special bits for IRTRY</q-m>
<a name="472"><q-n>     472  </q-n></a>	<q-w>rand</q-w> <q-w>bit</q-w>				start_retry;
<a name="473"><q-n>     473  </q-n></a>	<q-w>rand</q-w> <q-w>bit</q-w>				clear_error_abort;
<a name="474"><q-n>     474  </q-n></a>	<q-m>// CRC status fields</q-m>
<a name="475"><q-n>     475  </q-n></a>	<q-w>rand</q-w> <q-w>bit</q-w>				poisoned;				<q-m>// Inverted CRC</q-m>
<a name="476"><q-n>     476  </q-n></a>	<q-w>rand</q-w> <q-w>bit</q-w>				crc_error;
<a name="477"><q-n>     477  </q-n></a>	<q-m>// helper fields</q-m>
<a name="478"><q-n>     478  </q-n></a>	<q-w>rand</q-w> <q-w>int</q-w>				flit_delay;
<a name="479"><q-n>     479  </q-n></a>	<q-w>int</q-w>						timestamp;
<a name="480"><q-n>     480  </q-n></a>	`uvm_object_utils_begin(ax_packet)
<a name="481"><q-n>     481  </q-n></a>		`uvm_field_int(flit_delay, UVM_ALL_ON | UVM_NOPACK | UVM_DEC | UVM_NOCOMPARE | UVM_DEC)
<a name="482"><q-n>     482  </q-n></a>		`uvm_field_int(cube_ID, UVM_ALL_ON | UVM_NOPACK | UVM_DEC)
<a name="483"><q-n>     483  </q-n></a>		`uvm_field_int(address, UVM_ALL_ON | UVM_NOPACK | UVM_HEX)
<a name="484"><q-n>     484  </q-n></a>		`uvm_field_int(tag, UVM_ALL_ON | UVM_NOPACK | UVM_DEC)
<a name="485"><q-n>     485  </q-n></a>		`uvm_field_int(packet_length, UVM_ALL_ON | UVM_NOPACK | UVM_DEC)
<a name="486"><q-n>     486  </q-n></a>		`uvm_field_int(duplicate_length, UVM_ALL_ON | UVM_NOPACK | UVM_DEC)
<a name="487"><q-n>     487  </q-n></a>		`uvm_field_enum(ax_command_encoding, command, UVM_ALL_ON | UVM_NOPACK )
<a name="488"><q-n>     488  </q-n></a>		`uvm_field_queue_int(payload, UVM_ALL_ON | UVM_NOPACK)
<a name="489"><q-n>     489  </q-n></a>		`uvm_field_int(return_token_count, UVM_ALL_ON | UVM_NOPACK | UVM_DEC)
<a name="490"><q-n>     490  </q-n></a>		`uvm_field_int(source_link_ID, UVM_ALL_ON | UVM_NOPACK | UVM_DEC)
<a name="491"><q-n>     491  </q-n></a>		`uvm_field_int(sequence_number, UVM_ALL_ON | UVM_NOPACK | UVM_DEC)
<a name="492"><q-n>     492  </q-n></a>		`uvm_field_int(forward_retry_pointer, UVM_ALL_ON | UVM_NOPACK | UVM_DEC)
<a name="493"><q-n>     493  </q-n></a>		`uvm_field_int(return_retry_pointer, UVM_ALL_ON | UVM_NOPACK | UVM_DEC)
<a name="494"><q-n>     494  </q-n></a>		`uvm_field_int(packet_crc, UVM_ALL_ON | UVM_NOPACK | UVM_HEX)
<a name="495"><q-n>     495  </q-n></a>		`uvm_field_int(return_tag, UVM_ALL_ON | UVM_NOPACK | UVM_DEC)
<a name="496"><q-n>     496  </q-n></a>		`uvm_field_int(error_status, UVM_ALL_ON | UVM_NOPACK | UVM_DEC)
<a name="497"><q-n>     497  </q-n></a>		`uvm_field_int(data_invalid, UVM_ALL_ON | UVM_NOPACK | UVM_DEC)
<a name="498"><q-n>     498  </q-n></a>		`uvm_field_int(poisoned, UVM_ALL_ON | UVM_NOPACK | UVM_DEC)
<a name="499"><q-n>     499  </q-n></a>		`uvm_field_int(crc_error, UVM_ALL_ON | UVM_NOPACK | UVM_DEC)
<a name="500"><q-n>     500  </q-n></a>	`uvm_object_utils_end
<a name="501"><q-n>     501  </q-n></a>	<q-w>constraint</q-w> c_poisoned { poisoned == 0; }
<a name="502"><q-n>     502  </q-n></a>	<q-w>constraint</q-w> c_cube_id {cube_ID ==0;}
<a name="503"><q-n>     503  </q-n></a>	<q-w>constraint</q-w> c_address {
<a name="504"><q-n>     504  </q-n></a>		soft address &lt; 80000000;
<a name="505"><q-n>     505  </q-n></a>		((command &amp; AX_TYPE_MASK) == AX_FLOW_TYPE) -&gt; address == 0;	
<a name="506"><q-n>     506  </q-n></a>		soft address[3:0]==4'h0;
<a name="507"><q-n>     507  </q-n></a>	}
<a name="508"><q-n>     508  </q-n></a>	<q-w>constraint</q-w> c_source_link_ID {source_link_ID ==0;}
<a name="509"><q-n>     509  </q-n></a>	<q-w>constraint</q-w> c_crc_error { crc_error == 0; }
<a name="510"><q-n>     510  </q-n></a>	<q-w>constraint</q-w> c_matching_length { packet_length == duplicate_length; }
<a name="511"><q-n>     511  </q-n></a>	<q-w>constraint</q-w> c_return_tag { return_tag == 0; }
<a name="512"><q-n>     512  </q-n></a>	<q-w>constraint</q-w> c_packet_length { (
<a name="513"><q-n>     513  </q-n></a>						(packet_length == 2 &amp;&amp; command == AX_POSTED_WRITE_16) ||
<a name="514"><q-n>     514  </q-n></a>						(packet_length == 3 &amp;&amp; command == AX_POSTED_WRITE_32) ||
<a name="515"><q-n>     515  </q-n></a>						(packet_length == 4 &amp;&amp; command == AX_POSTED_WRITE_48) ||
<a name="516"><q-n>     516  </q-n></a>						(packet_length == 5 &amp;&amp; command == AX_POSTED_WRITE_64) ||
<a name="517"><q-n>     517  </q-n></a>						(packet_length == 6 &amp;&amp; command == AX_POSTED_WRITE_80) ||
<a name="518"><q-n>     518  </q-n></a>						(packet_length == 7 &amp;&amp; command == AX_POSTED_WRITE_96) ||
<a name="519"><q-n>     519  </q-n></a>						(packet_length == 8 &amp;&amp; command == AX_POSTED_WRITE_112) ||
<a name="520"><q-n>     520  </q-n></a>						(packet_length == 9 &amp;&amp; command == AX_POSTED_WRITE_128) ||
<a name="521"><q-n>     521  </q-n></a>						(packet_length == 2 &amp;&amp; command == AX_WRITE_16) ||
<a name="522"><q-n>     522  </q-n></a>						(packet_length == 3 &amp;&amp; command == AX_WRITE_32) ||
<a name="523"><q-n>     523  </q-n></a>						(packet_length == 4 &amp;&amp; command == AX_WRITE_48) ||
<a name="524"><q-n>     524  </q-n></a>						(packet_length == 5 &amp;&amp; command == AX_WRITE_64) ||
<a name="525"><q-n>     525  </q-n></a>						(packet_length == 6 &amp;&amp; command == AX_WRITE_80) ||
<a name="526"><q-n>     526  </q-n></a>						(packet_length == 7 &amp;&amp; command == AX_WRITE_96) ||
<a name="527"><q-n>     527  </q-n></a>						(packet_length == 8 &amp;&amp; command == AX_WRITE_112) ||
<a name="528"><q-n>     528  </q-n></a>						(packet_length == 9 &amp;&amp; command == AX_WRITE_128) ||
<a name="529"><q-n>     529  </q-n></a>						(packet_length &gt; 1 &amp;&amp; packet_length &lt;= 9 &amp;&amp; command == AX_READ_RESPONSE) ||
<a name="530"><q-n>     530  </q-n></a>						(packet_length == 1 &amp;&amp; command == AX_WRITE_RESPONSE) ||
<a name="531"><q-n>     531  </q-n></a>						(packet_length == 1 &amp;&amp; command == AX_MODE_WRITE_RESPONSE) ||
<a name="532"><q-n>     532  </q-n></a>						(packet_length == 1 &amp;&amp; command == AX_ERROR_RESPONSE) ||
<a name="533"><q-n>     533  </q-n></a>						(packet_length == 2 &amp;&amp; (command &amp; AX_TYPE_MASK) == AX_MISC_WRITE_TYPE) ||
<a name="534"><q-n>     534  </q-n></a>						(packet_length == 2 &amp;&amp; (command &amp; AX_TYPE_MASK) == AX_POSTED_MISC_WRITE_TYPE) ||
<a name="535"><q-n>     535  </q-n></a>						(packet_length == 1 &amp;&amp; (command &amp; AX_TYPE_MASK) == AX_MODE_READ_TYPE) ||
<a name="536"><q-n>     536  </q-n></a>						(packet_length == 1 &amp;&amp; (command &amp; AX_TYPE_MASK) == AX_READ_TYPE) ||
<a name="537"><q-n>     537  </q-n></a>						(packet_length == 1 &amp;&amp; (command &amp; AX_TYPE_MASK) == AX_FLOW_TYPE)
<a name="538"><q-n>     538  </q-n></a>		); }
<a name="539"><q-n>     539  </q-n></a>	<q-w>constraint</q-w> c_flit_delay {
<a name="540"><q-n>     540  </q-n></a>		soft flit_delay <q-w>dist</q-w>{0:/90, [1:8]:/8, [8:200]:/2  };
<a name="541"><q-n>     541  </q-n></a>	}
<a name="542"><q-n>     542  </q-n></a>	<q-w>constraint</q-w> c_error_status {
<a name="543"><q-n>     543  </q-n></a>		soft error_status == 0;
<a name="544"><q-n>     544  </q-n></a>	}
<a name="545"><q-n>     545  </q-n></a>	<q-w>constraint</q-w> c_data_invalid {
<a name="546"><q-n>     546  </q-n></a>		soft data_invalid == 0;
<a name="547"><q-n>     547  </q-n></a>	}
<a name="548"><q-n>     548  </q-n></a>	<q-w>constraint</q-w> c_pret {
<a name="549"><q-n>     549  </q-n></a>		(command == AX_PRET)-&gt; forward_retry_pointer	==0;
<a name="550"><q-n>     550  </q-n></a>		(command == AX_PRET)-&gt; sequence_number			==0;
<a name="551"><q-n>     551  </q-n></a>	}
<a name="552"><q-n>     552  </q-n></a>	<q-w>constraint</q-w> c_irtry{
<a name="553"><q-n>     553  </q-n></a>		(command == AX_IRTRY) 							-&gt; start_retry 			!= clear_error_abort;
<a name="554"><q-n>     554  </q-n></a>		((command == AX_IRTRY)&amp;&amp;(start_retry)) 		-&gt;forward_retry_pointer == 1;
<a name="555"><q-n>     555  </q-n></a>		((command == AX_IRTRY)&amp;&amp;(clear_error_abort))	-&gt;forward_retry_pointer == 2;
<a name="556"><q-n>     556  </q-n></a>		(command == AX_IRTRY)							-&gt; sequence_number		== 0;
<a name="557"><q-n>     557  </q-n></a>	}
<a name="558"><q-n>     558  </q-n></a>	<q-w>constraint</q-w> c_flow {
<a name="559"><q-n>     559  </q-n></a>		((command &amp; AX_TYPE_MASK) == AX_FLOW_TYPE) -&gt; tag == 0;
<a name="560"><q-n>     560  </q-n></a>		((command &amp; AX_TYPE_MASK) == AX_FLOW_TYPE) -&gt; cube_ID == 0;
<a name="561"><q-n>     561  </q-n></a>	}
<a name="562"><q-n>     562  </q-n></a>	<q-w>function</q-w> <q-w>new</q-w> (<q-w>string</q-w> name = <q-l>"ax_packet"</q-l>);
<a name="563"><q-n>     563  </q-n></a>		<q-w>super</q-w>.<q-w>new</q-w>(name);
<a name="564"><q-n>     564  </q-n></a>	<q-w>endfunction</q-w> : <q-w>new</q-w>
<a name="565"><q-n>     565  </q-n></a>    <q-w>function</q-w> <q-w>void</q-w> post_randomize();
<a name="566"><q-n>     566  </q-n></a>		<q-w>bit</q-w> [127:0] rand_flit;
<a name="567"><q-n>     567  </q-n></a>        <q-w>super</q-w>.post_randomize();
<a name="568"><q-n>     568  </q-n></a>		<q-w>if</q-w> (packet_length &gt; 9)
<a name="569"><q-n>     569  </q-n></a>			`uvm_fatal(get_type_name(),$psprintf(<q-l>"post_randomize packet_length = %0d"</q-l>,packet_length))
<a name="570"><q-n>     570  </q-n></a>		`uvm_info(<q-l>"AXI Packet queued"</q-l>,$psprintf(<q-l>"%0s packet_length = %0d"</q-l>,command.name(), packet_length), UVM_HIGH)
<a name="571"><q-n>     571  </q-n></a>		<q-w>if</q-w> (packet_length &lt; 2)
<a name="572"><q-n>     572  </q-n></a>			<q-w>return</q-w>;
<a name="573"><q-n>     573  </q-n></a>		<q-w>for</q-w> (<q-w>int</q-w> i=0; i&lt;packet_length-1; i++) <q-w>begin</q-w>
<a name="574"><q-n>     574  </q-n></a>			randomize_flit_successful : <q-w>assert</q-w> (std::randomize(rand_flit));
<a name="575"><q-n>     575  </q-n></a>			payload.push_back(rand_flit);
<a name="576"><q-n>     576  </q-n></a>		<q-w>end</q-w>
<a name="577"><q-n>     577  </q-n></a>		<q-w>if</q-w> ((command == AX_POSTED_DUAL_8B_ADDI)||
<a name="578"><q-n>     578  </q-n></a>			(command == AX_DUAL_8B_ADDI)) <q-w>begin</q-w>
<a name="579"><q-n>     579  </q-n></a>			payload[0] [63:32] = 32'b0;
<a name="580"><q-n>     580  </q-n></a>			payload[0][127:96] = 32'b0;
<a name="581"><q-n>     581  </q-n></a>		<q-w>end</q-w>
<a name="582"><q-n>     582  </q-n></a>		<q-w>if</q-w> ((command == AX_MODE_WRITE)|| (command == AX_MODE_READ)) <q-w>begin</q-w>
<a name="583"><q-n>     583  </q-n></a>			payload[0][127:32] = 96'b0;
<a name="584"><q-n>     584  </q-n></a>		<q-w>end</q-w>
<a name="585"><q-n>     585  </q-n></a>    <q-w>endfunction</q-w>
<a name="586"><q-n>     586  </q-n></a>	<q-w>function</q-w> ax_command_type get_command_type();
<a name="587"><q-n>     587  </q-n></a>		<q-w>case</q-w>(command &amp; AX_TYPE_MASK)
<a name="588"><q-n>     588  </q-n></a>			AX_FLOW_TYPE:				<q-w>return</q-w> AX_FLOW_TYPE;
<a name="589"><q-n>     589  </q-n></a>			AX_READ_TYPE:				<q-w>return</q-w> AX_READ_TYPE;
<a name="590"><q-n>     590  </q-n></a>			AX_MODE_READ_TYPE:			<q-w>return</q-w> AX_MODE_READ_TYPE;
<a name="591"><q-n>     591  </q-n></a>			AX_POSTED_WRITE_TYPE:		<q-w>return</q-w> AX_POSTED_WRITE_TYPE;
<a name="592"><q-n>     592  </q-n></a>			AX_POSTED_MISC_WRITE_TYPE:	<q-w>return</q-w> AX_POSTED_MISC_WRITE_TYPE;
<a name="593"><q-n>     593  </q-n></a>			AX_WRITE_TYPE:				<q-w>return</q-w> AX_WRITE_TYPE;
<a name="594"><q-n>     594  </q-n></a>			AX_MISC_WRITE_TYPE:		<q-w>return</q-w> AX_MISC_WRITE_TYPE;
<a name="595"><q-n>     595  </q-n></a>			AX_RESPONSE_TYPE:			<q-w>return</q-w> AX_RESPONSE_TYPE;
<a name="596"><q-n>     596  </q-n></a>			<q-w>default</q-w>: uvm_report_fatal(get_type_name(), $psprintf(<q-l>"command with an illegal command type='h%0h!"</q-l>, command));
<a name="597"><q-n>     597  </q-n></a>		<q-w>endcase</q-w>
<a name="598"><q-n>     598  </q-n></a>	<q-w>endfunction</q-w> : get_command_type
<a name="599"><q-n>     599  </q-n></a><q-m>/*</q-m>
<a name="600"><q-n>     600  </q-n></a><q-m>		The CRC algorithm used on the AX is the Koopman CRC-32K. This algorithm was</q-m>
<a name="601"><q-n>     601  </q-n></a><q-m>		chosen for the AX because of its balance of coverage and ease of implementation. The</q-m>
<a name="602"><q-n>     602  </q-n></a><q-m>		polynomial for this algorithm is:</q-m>
<a name="603"><q-n>     603  </q-n></a><q-m>		x32 + x30 + x29 + x28 + x26 + x20 + x19 + x17 + x16 + x15 + x11 + x10 + x7 + x6 + x4 + x2 + x + 1</q-m>
<a name="604"><q-n>     604  </q-n></a><q-m>		bit [31:0] polynomial = 33'b1_0111_0100_0001_1011_1000_1100_1101_0111;	// Normal</q-m>
<a name="605"><q-n>     605  </q-n></a><q-m>		The CRC calculation operates on the LSB of the packet first. The packet CRC calculation</q-m>
<a name="606"><q-n>     606  </q-n></a><q-m>		must insert 0s in place of the 32-bits representing the CRC field before generating or</q-m>
<a name="607"><q-n>     607  </q-n></a><q-m>		checking the CRC. For example, when generating CRC for a packet, bits [63: 32] of the</q-m>
<a name="608"><q-n>     608  </q-n></a><q-m>		Tail presented to the CRC generator should be all zeros. The output of the CRC generator</q-m>
<a name="609"><q-n>     609  </q-n></a><q-m>		will have a 32-bit CRC value that will then be inserted in bits [63:32] of the Tail before</q-m>
<a name="610"><q-n>     610  </q-n></a><q-m>		forwarding that FLIT of the packet. When checking CRC for a packet, the CRC field</q-m>
<a name="611"><q-n>     611  </q-n></a><q-m>		should be removed from bits [63:32] of the Tail and replaced with 32-bits of zeros, then</q-m>
<a name="612"><q-n>     612  </q-n></a><q-m>		presented to the CRC checker. The output of the CRC checker will have a 32-bit CRC</q-m>
<a name="613"><q-n>     613  </q-n></a><q-m>		value that can be compared with the CRC value that was removed from the tail. If the two</q-m>
<a name="614"><q-n>     614  </q-n></a><q-m>		compare, the CRC check indicates no bit failures within the packet.</q-m>
<a name="615"><q-n>     615  </q-n></a><q-m>*/</q-m>
<a name="616"><q-n>     616  </q-n></a>	<q-w>function</q-w> <q-w>bit</q-w> [31:0] calculate_crc();
<a name="617"><q-n>     617  </q-n></a>		<q-w>bit</q-w> bitstream[];
<a name="618"><q-n>     618  </q-n></a>		packer_succeeded : <q-w>assert</q-w> (pack(bitstream) &gt; 0);
<a name="619"><q-n>     619  </q-n></a>		<q-w>return</q-w> calc_crc(bitstream);
<a name="620"><q-n>     620  </q-n></a>	<q-w>endfunction</q-w> : calculate_crc
<a name="621"><q-n>     621  </q-n></a>	<q-w>function</q-w> <q-w>bit</q-w> [31:0] calc_crc(<q-w>bit</q-w> bitstream[]);
<a name="622"><q-n>     622  </q-n></a>		<q-w>bit</q-w> [32:0] polynomial = 33'h1741B8CD7; <q-m>// Normal</q-m>
<a name="623"><q-n>     623  </q-n></a>		<q-w>bit</q-w> [32:0] remainder = 33'h0;
<a name="624"><q-n>     624  </q-n></a>		<q-w>for</q-w>( <q-w>int</q-w> i=0; i &lt; bitstream.size()-32; i++ ) <q-w>begin</q-w>	<q-m>// without the CRC</q-m>
<a name="625"><q-n>     625  </q-n></a>			remainder = {remainder[31:0], bitstream[i]};
<a name="626"><q-n>     626  </q-n></a>			<q-w>if</q-w>( remainder[32] ) <q-w>begin</q-w>
<a name="627"><q-n>     627  </q-n></a>				remainder = remainder ^ polynomial;
<a name="628"><q-n>     628  </q-n></a>			<q-w>end</q-w>
<a name="629"><q-n>     629  </q-n></a>		<q-w>end</q-w>
<a name="630"><q-n>     630  </q-n></a>		<q-w>for</q-w>( <q-w>int</q-w> i=0; i &lt; 64; i++ ) <q-w>begin</q-w>	<q-m>// zeroes for CRC and remainder</q-m>
<a name="631"><q-n>     631  </q-n></a>			remainder = {remainder[31:0], 1'b0};
<a name="632"><q-n>     632  </q-n></a>			<q-w>if</q-w>( remainder[32] ) <q-w>begin</q-w>
<a name="633"><q-n>     633  </q-n></a>				remainder = remainder ^ polynomial;
<a name="634"><q-n>     634  </q-n></a>			<q-w>end</q-w>
<a name="635"><q-n>     635  </q-n></a>		<q-w>end</q-w>
<a name="636"><q-n>     636  </q-n></a>		<q-w>return</q-w> remainder[31:0];
<a name="637"><q-n>     637  </q-n></a>	<q-w>endfunction</q-w> : calc_crc
<a name="638"><q-n>     638  </q-n></a>	<q-w>virtual</q-w> <q-w>function</q-w> <q-w>void</q-w> do_pack(uvm_packer packer);
<a name="639"><q-n>     639  </q-n></a>		<q-w>super</q-w>.do_pack(packer);
<a name="640"><q-n>     640  </q-n></a>		packer.big_endian = 0;
<a name="641"><q-n>     641  </q-n></a>		<q-m>// pack header half flit</q-m>
<a name="642"><q-n>     642  </q-n></a>		<q-w>case</q-w>(command &amp; AX_TYPE_MASK)
<a name="643"><q-n>     643  </q-n></a>			AX_FLOW_TYPE:
<a name="644"><q-n>     644  </q-n></a>				<q-w>case</q-w> (command)
<a name="645"><q-n>     645  </q-n></a>					AX_NULL:		packer.pack_field( {64'h0}, 64);
<a name="646"><q-n>     646  </q-n></a>					AX_PRET:		packer.pack_field ( {3'h0, 3'h0, 34'h0, 9'h0, duplicate_length[3:0], packet_length[3:0], 1'b0, command[5:0]}, 64);
<a name="647"><q-n>     647  </q-n></a>					AX_TRET:		packer.pack_field ( {3'h0, 3'h0, 34'h0, 9'h0, duplicate_length[3:0], packet_length[3:0], 1'b0, command[5:0]}, 64);
<a name="648"><q-n>     648  </q-n></a>					AX_IRTRY:		packer.pack_field ( {3'h0, 3'h0, 34'h0, 9'h0, duplicate_length[3:0], packet_length[3:0], 1'b0, command[5:0]}, 64);
<a name="649"><q-n>     649  </q-n></a>					<q-w>default</q-w>: uvm_report_fatal(get_type_name(), $psprintf(<q-l>"pack function called for a ax_packet with an illegal FLOW type='h%0h!"</q-l>, command));
<a name="650"><q-n>     650  </q-n></a>				<q-w>endcase</q-w>
<a name="651"><q-n>     651  </q-n></a>			AX_READ_TYPE:			packer.pack_field ( {cube_ID[2:0], 3'h0, address[33:0], tag[8:0], duplicate_length[3:0], packet_length[3:0], 1'b0, command[5:0]}, 64);
<a name="652"><q-n>     652  </q-n></a>			AX_MODE_READ_TYPE:		packer.pack_field ( {cube_ID[2:0], 3'h0, 34'h0, tag[8:0], duplicate_length[3:0], packet_length[3:0], 1'b0, command[5:0]}, 64);
<a name="653"><q-n>     653  </q-n></a>			AX_POSTED_WRITE_TYPE:	packer.pack_field ( {cube_ID[2:0], 3'h0, address[33:0], tag[8:0], duplicate_length[3:0], packet_length[3:0], 1'b0, command[5:0]}, 64);
<a name="654"><q-n>     654  </q-n></a>			AX_WRITE_TYPE:			packer.pack_field ( {cube_ID[2:0], 3'h0, address[33:0], tag[8:0], duplicate_length[3:0], packet_length[3:0], 1'b0, command[5:0]}, 64);
<a name="655"><q-n>     655  </q-n></a>			AX_POSTED_MISC_WRITE_TYPE:	packer.pack_field ( {cube_ID[2:0], 3'h0, address[33:0], tag[8:0], duplicate_length[3:0], packet_length[3:0], 1'b0, command[5:0]}, 64);
<a name="656"><q-n>     656  </q-n></a>			AX_MISC_WRITE_TYPE:	packer.pack_field ( {cube_ID[2:0], 3'h0, address[33:0], tag[8:0], duplicate_length[3:0], packet_length[3:0], 1'b0, command[5:0]}, 64);
<a name="657"><q-n>     657  </q-n></a>			AX_RESPONSE_TYPE:		packer.pack_field ( {22'h0, source_link_ID[2:0], 6'h0, return_tag[8:0], tag[8:0], duplicate_length[3:0], packet_length[3:0], 1'b0, command[5:0]}, 64);
<a name="658"><q-n>     658  </q-n></a>			<q-w>default</q-w>: uvm_report_fatal(get_type_name(), $psprintf(<q-l>"pack function called for a ax_packet with an illegal command type='h%0h!"</q-l>, command));
<a name="659"><q-n>     659  </q-n></a>		<q-w>endcase</q-w>
<a name="660"><q-n>     660  </q-n></a>		<q-m>// Allow for errors when packet_length != duplicate_length</q-m>
<a name="661"><q-n>     661  </q-n></a>		<q-w>if</q-w> ((packet_length == duplicate_length) &amp;&amp; payload.size() + 1 != packet_length &amp;&amp; command != AX_NULL)
<a name="662"><q-n>     662  </q-n></a>			uvm_report_fatal(get_type_name(), $psprintf(<q-l>"pack function size mismatch payload.size=%0d packet_length=%0d!"</q-l>, payload.size(), packet_length));
<a name="663"><q-n>     663  </q-n></a>		<q-m>// pack payload</q-m>
<a name="664"><q-n>     664  </q-n></a>		<q-w>for</q-w>( <q-w>int</q-w> i=0; i&lt;payload.size(); i++ ) packer.pack_field ( payload[i], 128);
<a name="665"><q-n>     665  </q-n></a>		<q-m>// pack tail half flit</q-m>
<a name="666"><q-n>     666  </q-n></a>		<q-w>case</q-w>(command &amp; AX_TYPE_MASK)
<a name="667"><q-n>     667  </q-n></a>			AX_FLOW_TYPE:
<a name="668"><q-n>     668  </q-n></a>				<q-w>case</q-w> (command)
<a name="669"><q-n>     669  </q-n></a>					AX_NULL:		packer.pack_field( {64'h0}, 64);
<a name="670"><q-n>     670  </q-n></a>					AX_PRET:		packer.pack_field ( {packet_crc[31:0], 5'h0, 3'h0, 5'h0, 3'h0, 8'h0, return_retry_pointer[7:0]}, 64);
<a name="671"><q-n>     671  </q-n></a>					AX_TRET:		packer.pack_field ( {packet_crc[31:0], return_token_count[4:0], 3'h0, 5'h0, sequence_number[2:0], forward_retry_pointer[7:0], return_retry_pointer[7:0]}, 64);
<a name="672"><q-n>     672  </q-n></a>					AX_IRTRY:		packer.pack_field ( {packet_crc[31:0], 5'h0, 3'h0, 5'h0, 3'h0, 6'h0, clear_error_abort, start_retry, return_retry_pointer[7:0]}, 64);
<a name="673"><q-n>     673  </q-n></a>					<q-w>default</q-w>: uvm_report_fatal(get_type_name(), $psprintf(<q-l>"pack function (tail) called for a ax_packet with an illegal FLOW type='h%0h!"</q-l>, command));
<a name="674"><q-n>     674  </q-n></a>				<q-w>endcase</q-w>
<a name="675"><q-n>     675  </q-n></a>			AX_READ_TYPE:			packer.pack_field ( {packet_crc[31:0], return_token_count[4:0], source_link_ID[2:0], 5'h0, sequence_number[2:0], forward_retry_pointer[7:0], return_retry_pointer[7:0]}, 64);
<a name="676"><q-n>     676  </q-n></a>			AX_POSTED_WRITE_TYPE:	packer.pack_field ( {packet_crc[31:0], return_token_count[4:0], source_link_ID[2:0], 5'h0, sequence_number[2:0], forward_retry_pointer[7:0], return_retry_pointer[7:0]}, 64);
<a name="677"><q-n>     677  </q-n></a>			AX_WRITE_TYPE:			packer.pack_field ( {packet_crc[31:0], return_token_count[4:0], source_link_ID[2:0], 5'h0, sequence_number[2:0], forward_retry_pointer[7:0], return_retry_pointer[7:0]}, 64);
<a name="678"><q-n>     678  </q-n></a>			AX_MODE_READ_TYPE:		packer.pack_field ( {packet_crc[31:0], return_token_count[4:0], source_link_ID[2:0], 5'h0, sequence_number[2:0], forward_retry_pointer[7:0], return_retry_pointer[7:0]}, 64);
<a name="679"><q-n>     679  </q-n></a>			AX_POSTED_MISC_WRITE_TYPE:	packer.pack_field ( {packet_crc[31:0], return_token_count[4:0], source_link_ID[2:0], 5'h0, sequence_number[2:0], forward_retry_pointer[7:0], return_retry_pointer[7:0]}, 64);
<a name="680"><q-n>     680  </q-n></a>			AX_MISC_WRITE_TYPE:	packer.pack_field ( {packet_crc[31:0], return_token_count[4:0], source_link_ID[2:0], 5'h0, sequence_number[2:0], forward_retry_pointer[7:0], return_retry_pointer[7:0]}, 64);
<a name="681"><q-n>     681  </q-n></a>			AX_RESPONSE_TYPE:		packer.pack_field ( {packet_crc[31:0], return_token_count[4:0], error_status[6:0], data_invalid, sequence_number[2:0], forward_retry_pointer[7:0], return_retry_pointer[7:0]}, 64);
<a name="682"><q-n>     682  </q-n></a>			<q-w>default</q-w>: uvm_report_fatal(get_type_name(), $psprintf(<q-l>"pack function (tail) called for a ax_packet with an illegal command type='h%0h!"</q-l>, command));
<a name="683"><q-n>     683  </q-n></a>		<q-w>endcase</q-w>
<a name="684"><q-n>     684  </q-n></a>	<q-w>endfunction</q-w> : do_pack
<a name="685"><q-n>     685  </q-n></a>	<q-w>virtual</q-w> <q-w>function</q-w> <q-w>void</q-w> do_unpack(uvm_packer packer);
<a name="686"><q-n>     686  </q-n></a>		<q-w>bit</q-w> [63:0]	header;
<a name="687"><q-n>     687  </q-n></a>		<q-w>bit</q-w> [63:0]	tail;
<a name="688"><q-n>     688  </q-n></a>		<q-w>bit</q-w> [31:0]	calculated_crc;
<a name="689"><q-n>     689  </q-n></a>		<q-w>bit</q-w> [21:0]	rsvd22;
<a name="690"><q-n>     690  </q-n></a>		<q-w>bit</q-w> [5:0]	rsvd6;
<a name="691"><q-n>     691  </q-n></a>		<q-w>bit</q-w> [4:0]	rsvd5;
<a name="692"><q-n>     692  </q-n></a>		<q-w>bit</q-w> [2:0]	rsvd3;
<a name="693"><q-n>     693  </q-n></a>		<q-w>bit</q-w> 		rsvd1;
<a name="694"><q-n>     694  </q-n></a>		<q-w>bit</q-w> bitstream[];
<a name="695"><q-n>     695  </q-n></a>		<q-w>super</q-w>.do_unpack(packer);
<a name="696"><q-n>     696  </q-n></a>		packer.big_endian = 0;
<a name="697"><q-n>     697  </q-n></a>		packer.get_bits(bitstream);
<a name="698"><q-n>     698  </q-n></a>		<q-w>for</q-w> (<q-w>int</q-w> i = 0; i &lt;32; i++)<q-w>begin</q-w>
<a name="699"><q-n>     699  </q-n></a>			packet_crc[i] = bitstream[bitstream.size()-32 +i];
<a name="700"><q-n>     700  </q-n></a>		<q-w>end</q-w>
<a name="701"><q-n>     701  </q-n></a>		calculated_crc = calc_crc(bitstream);
<a name="702"><q-n>     702  </q-n></a>		<q-m>// header</q-m>
<a name="703"><q-n>     703  </q-n></a>		header = packer.unpack_field(64);
<a name="704"><q-n>     704  </q-n></a>		command[5:0] = header[5:0];<q-m>//-- doppelt?</q-m>
<a name="705"><q-n>     705  </q-n></a>		<q-w>if</q-w> (get_command_type != AX_RESPONSE_TYPE)
<a name="706"><q-n>     706  </q-n></a>			{cube_ID[2:0], rsvd3, address[33:0], tag[8:0], duplicate_length[3:0], packet_length[3:0], rsvd1, command[5:0]}	= header;
<a name="707"><q-n>     707  </q-n></a>		<q-w>else</q-w>
<a name="708"><q-n>     708  </q-n></a>			{rsvd22[21:0], source_link_ID[2:0], rsvd6[5:0], return_tag[8:0], tag[8:0], duplicate_length[3:0], packet_length[3:0], rsvd1, command[5:0]}	= header;
<a name="709"><q-n>     709  </q-n></a>		<q-m>// Unpack should not be called with length errors</q-m>
<a name="710"><q-n>     710  </q-n></a>		<q-w>if</q-w> (duplicate_length != packet_length || packet_length == 0)
<a name="711"><q-n>     711  </q-n></a>			`uvm_fatal(get_type_name(), $psprintf(<q-l>"do_unpack: length mismatch dln=%0d len=%0d cmd=%0d!"</q-l>, duplicate_length, packet_length, command));
<a name="712"><q-n>     712  </q-n></a>		<q-m>// payload</q-m>
<a name="713"><q-n>     713  </q-n></a>		<q-w>for</q-w> (<q-w>int</q-w> i = 0; i &lt; packet_length-1; i++)
<a name="714"><q-n>     714  </q-n></a>			payload.push_back(packer.unpack_field(128));
<a name="715"><q-n>     715  </q-n></a>		<q-m>// tail</q-m>
<a name="716"><q-n>     716  </q-n></a>		tail = packer.unpack_field(64);
<a name="717"><q-n>     717  </q-n></a>		<q-w>if</q-w> (get_command_type != AX_RESPONSE_TYPE) 
<a name="718"><q-n>     718  </q-n></a>			{packet_crc[31:0], return_token_count[4:0], source_link_ID[2:0], rsvd5, sequence_number[2:0], forward_retry_pointer[7:0], return_retry_pointer[7:0]}	= tail;
<a name="719"><q-n>     719  </q-n></a>		<q-w>else</q-w>
<a name="720"><q-n>     720  </q-n></a>			{packet_crc[31:0], return_token_count[4:0], error_status[6:0], data_invalid, sequence_number[2:0], forward_retry_pointer[7:0], return_retry_pointer[7:0]}	= tail;
<a name="721"><q-n>     721  </q-n></a>		start_retry			= (command == AX_IRTRY ? forward_retry_pointer[0] : 1'b0);
<a name="722"><q-n>     722  </q-n></a>		clear_error_abort	= (command == AX_IRTRY ? forward_retry_pointer[1] : 1'b0);
<a name="723"><q-n>     723  </q-n></a>		crc_error = 0;
<a name="724"><q-n>     724  </q-n></a>		poisoned = (packet_crc == ~calculated_crc) ? 1'b1 : 1'b0;
<a name="725"><q-n>     725  </q-n></a>		<q-w>if</q-w> (packet_crc != calculated_crc &amp;&amp;  !poisoned )
<a name="726"><q-n>     726  </q-n></a>		<q-w>begin</q-w>
<a name="727"><q-n>     727  </q-n></a>			crc_error = 1;
<a name="728"><q-n>     728  </q-n></a>		<q-w>end</q-w>
<a name="729"><q-n>     729  </q-n></a>	<q-w>endfunction</q-w> : do_unpack
<a name="730"><q-n>     730  </q-n></a>	<q-w>virtual</q-w> <q-w>function</q-w> <q-w>bit</q-w> compare_adaptive_packet(ax_packet rhs, uvm_comparer comparer);
<a name="731"><q-n>     731  </q-n></a>		<q-w>string</q-w> name_string;
<a name="732"><q-n>     732  </q-n></a>		compare_adaptive_packet &amp;= comparer.compare_field(<q-l>"packet_length"</q-l>, packet_length, rhs.packet_length, 64, UVM_DEC);
<a name="733"><q-n>     733  </q-n></a>		compare_adaptive_packet &amp;= comparer.compare_field(<q-l>"payload.size()"</q-l>, payload.size(), rhs.payload.size(), 64, UVM_DEC);
<a name="734"><q-n>     734  </q-n></a>		<q-w>for</q-w> (<q-w>int</q-w> i=0; i&lt;packet_length; i++)
<a name="735"><q-n>     735  </q-n></a>		<q-w>begin</q-w>
<a name="736"><q-n>     736  </q-n></a>			<q-w>if</q-w> (!compare_adaptive_packet)
<a name="737"><q-n>     737  </q-n></a>				<q-w>return</q-w> 0;
<a name="738"><q-n>     738  </q-n></a>			$sformat(name_string, <q-l>"payload[%0d]"</q-l>, i);
<a name="739"><q-n>     739  </q-n></a>			compare_adaptive_packet &amp;= comparer.compare_field(name_string, payload[i], rhs.payload[i], 128, UVM_HEX);
<a name="740"><q-n>     740  </q-n></a>		<q-w>end</q-w>
<a name="741"><q-n>     741  </q-n></a>		compare_adaptive_packet &amp;= comparer.compare_field(<q-l>"cube_ID"</q-l>, cube_ID, rhs.cube_ID, 64, UVM_DEC);
<a name="742"><q-n>     742  </q-n></a>		compare_adaptive_packet &amp;= comparer.compare_field(<q-l>"address"</q-l>, address, rhs.address, 64, UVM_DEC);
<a name="743"><q-n>     743  </q-n></a>		compare_adaptive_packet &amp;= comparer.compare_field(<q-l>"tag"</q-l>, tag, rhs.tag, 64, UVM_DEC);
<a name="744"><q-n>     744  </q-n></a>		compare_adaptive_packet &amp;= comparer.compare_field(<q-l>"packet_length"</q-l>, packet_length, rhs.packet_length, 64, UVM_DEC);
<a name="745"><q-n>     745  </q-n></a>		compare_adaptive_packet &amp;= comparer.compare_field(<q-l>"duplicate_length"</q-l>, duplicate_length, rhs.duplicate_length, 64, UVM_DEC);
<a name="746"><q-n>     746  </q-n></a>		compare_adaptive_packet &amp;= comparer.compare_field(<q-l>"command"</q-l>, command, rhs.command, 64, UVM_DEC);
<a name="747"><q-n>     747  </q-n></a>		compare_adaptive_packet &amp;= comparer.compare_field(<q-l>"return_token_count"</q-l>, return_token_count, rhs.return_token_count, 64, UVM_DEC);
<a name="748"><q-n>     748  </q-n></a>		compare_adaptive_packet &amp;= comparer.compare_field(<q-l>"source_link_ID"</q-l>, source_link_ID, rhs.source_link_ID, 64, UVM_DEC);
<a name="749"><q-n>     749  </q-n></a>		compare_adaptive_packet &amp;= comparer.compare_field(<q-l>"sequence_number"</q-l>, sequence_number, rhs.sequence_number, 64, UVM_DEC);
<a name="750"><q-n>     750  </q-n></a>		compare_adaptive_packet &amp;= comparer.compare_field(<q-l>"forward_retry_pointer"</q-l>, forward_retry_pointer, rhs.forward_retry_pointer, 64, UVM_DEC);
<a name="751"><q-n>     751  </q-n></a>		compare_adaptive_packet &amp;= comparer.compare_field(<q-l>"return_tag"</q-l>, return_tag, rhs.return_tag, 64, UVM_DEC);
<a name="752"><q-n>     752  </q-n></a>		compare_adaptive_packet &amp;= comparer.compare_field(<q-l>"error_status"</q-l>, error_status, rhs.error_status, 64, UVM_DEC);
<a name="753"><q-n>     753  </q-n></a>		compare_adaptive_packet &amp;= comparer.compare_field(<q-l>"data_invalid"</q-l>, data_invalid, rhs.data_invalid, 64, UVM_DEC);
<a name="754"><q-n>     754  </q-n></a>		compare_adaptive_packet &amp;= comparer.compare_field(<q-l>"start_retry"</q-l>, start_retry, rhs.start_retry, 64, UVM_DEC);
<a name="755"><q-n>     755  </q-n></a>		compare_adaptive_packet &amp;= comparer.compare_field(<q-l>"clear_error_abort"</q-l>, clear_error_abort, rhs.clear_error_abort, 64, UVM_DEC);
<a name="756"><q-n>     756  </q-n></a>	<q-w>endfunction</q-w> : compare_adaptive_packet
<a name="757"><q-n>     757  </q-n></a><q-w>endclass</q-w>: ax_packet
<a name="758"><q-n>     758  </q-n></a><q-m>// UVM_SEQUENCE : AXI4_STREAM_MASTER_SEQUENCE [AXI4_STREAM]</q-m>
<a name="759"><q-n>     759  </q-n></a><q-w>class</q-w> axi4_stream_master_sequence <q-w>extends</q-w> uvm_sequence#(axi4_stream_valid_cycle);
<a name="760"><q-n>     760  </q-n></a>	`uvm_object_utils(axi4_stream_master_sequence)
<a name="761"><q-n>     761  </q-n></a>	<q-w>rand</q-w> <q-w>int</q-w> delay;
<a name="762"><q-n>     762  </q-n></a>	<q-w>rand</q-w> ax_packet response;
<a name="763"><q-n>     763  </q-n></a>	<q-w>rand</q-w> <q-w>bit</q-w> error_response;
<a name="764"><q-n>     764  </q-n></a>    <q-w>event</q-w> item_available;
<a name="765"><q-n>     765  </q-n></a>	<q-w>constraint</q-w> delay_c {
<a name="766"><q-n>     766  </q-n></a>		delay <q-w>dist</q-w> {0:=4, [0:9]:=8, [10:30]:=2, [31:100]:=1};
<a name="767"><q-n>     767  </q-n></a>	}
<a name="768"><q-n>     768  </q-n></a>    <q-w>function</q-w> <q-w>new</q-w>(<q-w>string</q-w> name = <q-l>""</q-l>);
<a name="769"><q-n>     769  </q-n></a>        <q-w>super</q-w>.<q-w>new</q-w>(name);
<a name="770"><q-n>     770  </q-n></a>    <q-w>endfunction</q-w>: <q-w>new</q-w>
<a name="771"><q-n>     771  </q-n></a>    <q-w>task</q-w> body();
<a name="772"><q-n>     772  </q-n></a>        axi4_stream_valid_cycle vc;
<a name="773"><q-n>     773  </q-n></a>        <q-w>repeat</q-w>(100) <q-w>begin</q-w>
<a name="774"><q-n>     774  </q-n></a>        vc = axi4_stream_valid_cycle::type_id::create(.name(<q-l>"vc"</q-l>), .contxt(get_full_name()));
<a name="775"><q-n>     775  </q-n></a>        start_item(vc);
<a name="776"><q-n>     776  </q-n></a>            <q-w>assert</q-w>(vc.randomize());
<a name="777"><q-n>     777  </q-n></a>        finish_item(vc);
<a name="778"><q-n>     778  </q-n></a>        <q-w>end</q-w>
<a name="779"><q-n>     779  </q-n></a>    <q-w>endtask</q-w> : body
<a name="780"><q-n>     780  </q-n></a><q-w>endclass</q-w>: axi4_stream_master_sequence
<a name="781"><q-n>     781  </q-n></a><q-m>//====================================================================================</q-m>
<a name="782"><q-n>     782  </q-n></a><q-m>//------------------------------------------------------------------------------------</q-m>
<a name="783"><q-n>     783  </q-n></a><q-m>//--------------------------------- UVM_DRIVERS</q-m>
<a name="784"><q-n>     784  </q-n></a><q-m>//------------------------------------------------------------------------------------</q-m>
<a name="785"><q-n>     785  </q-n></a><q-m>//====================================================================================</q-m>
<a name="786"><q-n>     786  </q-n></a><q-m>// UVM_DRIVER : AXILITE_DRV [AXI4_LITE]</q-m>
<a name="787"><q-n>     787  </q-n></a><q-w>class</q-w> axiLite_driver <q-w>extends</q-w> uvm_driver #(axiLite_transaction);
<a name="788"><q-n>     788  </q-n></a>    protected virtual axi4l_if axi4l_vif;
<a name="789"><q-n>     789  </q-n></a>    protected int     id;
<a name="790"><q-n>     790  </q-n></a>    `uvm_component_utils_begin(axiLite_driver)
<a name="791"><q-n>     791  </q-n></a>        `uvm_field_int(id, UVM_DEFAULT)
<a name="792"><q-n>     792  </q-n></a>    `uvm_component_utils_end
<a name="793"><q-n>     793  </q-n></a>    function new (string name, uvm_component parent);
<a name="794"><q-n>     794  </q-n></a>        super.new(name, parent);
<a name="795"><q-n>     795  </q-n></a>    endfunction
<a name="796"><q-n>     796  </q-n></a>    function void build_phase (uvm_phase phase);
<a name="797"><q-n>     797  </q-n></a>        super.build_phase(phase);
<a name="798"><q-n>     798  </q-n></a>        if (!uvm_config_db#(virtual axi4l_if)::get(this, "", "axi4l_vif", axi4l_vif))
<a name="799"><q-n>     799  </q-n></a>        `uvm_fatal("NOVIF", {"virtual interface must be set for: ",get_full_name(), ".axi4l_vif"});
<a name="800"><q-n>     800  </q-n></a>    endfunction
<a name="801"><q-n>     801  </q-n></a>    virtual task run_phase (uvm_phase phase);
<a name="802"><q-n>     802  </q-n></a>        fork
<a name="803"><q-n>     803  </q-n></a>            get_and_drive();
<a name="804"><q-n>     804  </q-n></a>            reset_signals();
<a name="805"><q-n>     805  </q-n></a>        join
<a name="806"><q-n>     806  </q-n></a>    endtask: run_phase
<a name="807"><q-n>     807  </q-n></a>    virtual protected task get_and_drive();
<a name="808"><q-n>     808  </q-n></a>        forever begin
<a name="809"><q-n>     809  </q-n></a>            @(posedge axi4l_vif.ACLK);
<a name="810"><q-n>     810  </q-n></a>            if (axi4l_vif.ARESETN == 1'b0) begin
<a name="811"><q-n>     811  </q-n></a>                @(posedge axi4l_vif.ARESETN);
<a name="812"><q-n>     812  </q-n></a>                @(posedge axi4l_vif.ACLK);
<a name="813"><q-n>     813  </q-n></a>            end
<a name="814"><q-n>     814  </q-n></a>            seq_item_port.get_next_item(req);
<a name="815"><q-n>     815  </q-n></a>            //`uvm_info("DRV", req.convert2string(), UVM_LOW)
<a name="816"><q-n>     816  </q-n></a>            repeat(req.cycles) begin
<a name="817"><q-n>     817  </q-n></a>                @(posedge axi4l_vif.ACLK);
<a name="818"><q-n>     818  </q-n></a>            end
<a name="819"><q-n>     819  </q-n></a>            drive_transfer(req);
<a name="820"><q-n>     820  </q-n></a>            seq_item_port.item_done();
<a name="821"><q-n>     821  </q-n></a>        end
<a name="822"><q-n>     822  </q-n></a>    endtask: get_and_drive
<a name="823"><q-n>     823  </q-n></a>    virtual protected task reset_signals();
<a name="824"><q-n>     824  </q-n></a>        forever begin
<a name="825"><q-n>     825  </q-n></a>            @(negedge axi4l_vif.ARESETN);
<a name="826"><q-n>     826  </q-n></a>            axi4l_vif.AWADDR  &lt;=  8'h0;
<a name="827"><q-n>     827  </q-n></a>            axi4l_vif.AWPROT  &lt;=  3'h0;
<a name="828"><q-n>     828  </q-n></a>            axi4l_vif.AWVALID &lt;=  1'b0;
<a name="829"><q-n>     829  </q-n></a>            axi4l_vif.WDATA   &lt;= 32'h0;
<a name="830"><q-n>     830  </q-n></a>            axi4l_vif.WSTRB   &lt;=  4'h0;
<a name="831"><q-n>     831  </q-n></a>            axi4l_vif.WVALID  &lt;=  1'b0;
<a name="832"><q-n>     832  </q-n></a>            axi4l_vif.BREADY  &lt;=  1'b1;
<a name="833"><q-n>     833  </q-n></a>            axi4l_vif.ARADDR  &lt;=  8'h0;
<a name="834"><q-n>     834  </q-n></a>            axi4l_vif.ARPROT  &lt;=  3'h0;
<a name="835"><q-n>     835  </q-n></a>            axi4l_vif.ARVALID &lt;=  1'b0;
<a name="836"><q-n>     836  </q-n></a>            axi4l_vif.RREADY  &lt;=  1'b1;
<a name="837"><q-n>     837  </q-n></a>        end
<a name="838"><q-n>     838  </q-n></a>    endtask: reset_signals
<a name="839"><q-n>     839  </q-n></a>    virtual protected task drive_transfer (axiLite_transaction aL_txn);
<a name="840"><q-n>     840  </q-n></a>        drive_address_phase(aL_txn);
<a name="841"><q-n>     841  </q-n></a>        drive_data_phase(aL_txn);
<a name="842"><q-n>     842  </q-n></a>    endtask: drive_transfer
<a name="843"><q-n>     843  </q-n></a>    virtual protected task drive_address_phase (axiLite_transaction aL_txn);
<a name="844"><q-n>     844  </q-n></a>        //`uvm_info("axiLite_master_driver", "drive_address_phase",UVM_HIGH)
<a name="845"><q-n>     845  </q-n></a>        case (aL_txn.reqWriteRead)
<a name="846"><q-n>     846  </q-n></a>            READ : drive_read_address_channel(aL_txn);
<a name="847"><q-n>     847  </q-n></a>            WRITE: drive_write_address_channel(aL_txn);
<a name="848"><q-n>     848  </q-n></a>        endcase
<a name="849"><q-n>     849  </q-n></a>    endtask: drive_address_phase
<a name="850"><q-n>     850  </q-n></a>    virtual protected task drive_data_phase (axiLite_transaction aL_txn);
<a name="851"><q-n>     851  </q-n></a>        bit[31:0] rw_data;
<a name="852"><q-n>     852  </q-n></a>        bit err;
<a name="853"><q-n>     853  </q-n></a>        rw_data = aL_txn.data;
<a name="854"><q-n>     854  </q-n></a>        case (aL_txn.reqWriteRead)
<a name="855"><q-n>     855  </q-n></a>        READ : drive_read_data_channel(rw_data, err);
<a name="856"><q-n>     856  </q-n></a>        WRITE: drive_write_data_channel(rw_data, err);
<a name="857"><q-n>     857  </q-n></a>        endcase    
<a name="858"><q-n>     858  </q-n></a>    endtask: drive_data_phase
<a name="859"><q-n>     859  </q-n></a>    virtual protected task drive_write_address_channel (axiLite_transaction aL_txn);
<a name="860"><q-n>     860  </q-n></a>        int axiLite_ctr;
<a name="861"><q-n>     861  </q-n></a>        axi4l_vif.AWADDR  &lt;= {8'h0, aL_txn.addr};
<a name="862"><q-n>     862  </q-n></a>        axi4l_vif.AWPROT  &lt;= 3'h0;
<a name="863"><q-n>     863  </q-n></a>        axi4l_vif.AWVALID &lt;= 1'b1;
<a name="864"><q-n>     864  </q-n></a>        for(axiLite_ctr = 0; axiLite_ctr &lt;= 31; axiLite_ctr ++) begin
<a name="865"><q-n>     865  </q-n></a>            @(posedge axi4l_vif.ACLK);
<a name="866"><q-n>     866  </q-n></a>            if (axi4l_vif.AWREADY) break;
<a name="867"><q-n>     867  </q-n></a>        end
<a name="868"><q-n>     868  </q-n></a>        if (axiLite_ctr == 31) begin
<a name="869"><q-n>     869  </q-n></a>            `uvm_error("axiLite_master_driver","AWVALID timeout");
<a name="870"><q-n>     870  </q-n></a>        end    
<a name="871"><q-n>     871  </q-n></a>        @(posedge axi4l_vif.ACLK);
<a name="872"><q-n>     872  </q-n></a>        // axi4l_vif.AWADDR  &lt;= 8'h0;
<a name="873"><q-n>     873  </q-n></a>        // axi4l_vif.AWPROT  &lt;= 3'h0;
<a name="874"><q-n>     874  </q-n></a>        // axi4l_vif.AWVALID &lt;= 1'b0;    
<a name="875"><q-n>     875  </q-n></a>    endtask: drive_write_address_channel
<a name="876"><q-n>     876  </q-n></a>    virtual protected task drive_read_address_channel (axiLite_transaction aL_txn);
<a name="877"><q-n>     877  </q-n></a>        int axiLite_ctr;
<a name="878"><q-n>     878  </q-n></a>        axi4l_vif.ARADDR  &lt;= {8'h0, aL_txn.addr};
<a name="879"><q-n>     879  </q-n></a>        axi4l_vif.ARPROT  &lt;= 3'h0;
<a name="880"><q-n>     880  </q-n></a>        axi4l_vif.ARVALID &lt;= 1'b1;
<a name="881"><q-n>     881  </q-n></a>        for(axiLite_ctr = 0; axiLite_ctr &lt;= 31; axiLite_ctr ++) begin
<a name="882"><q-n>     882  </q-n></a>            @(posedge axi4l_vif.ACLK);
<a name="883"><q-n>     883  </q-n></a>            if (axi4l_vif.ARREADY) break;
<a name="884"><q-n>     884  </q-n></a>        end
<a name="885"><q-n>     885  </q-n></a>        if (axiLite_ctr == 31) begin
<a name="886"><q-n>     886  </q-n></a>            `uvm_error("axiLite_master_driver","ARVALID timeout");
<a name="887"><q-n>     887  </q-n></a>        end
<a name="888"><q-n>     888  </q-n></a>        @(posedge axi4l_vif.ACLK);
<a name="889"><q-n>     889  </q-n></a>        axi4l_vif.ARADDR  &lt;= 8'h0;
<a name="890"><q-n>     890  </q-n></a>        axi4l_vif.ARPROT  &lt;= 3'h0;
<a name="891"><q-n>     891  </q-n></a>        axi4l_vif.ARVALID &lt;= 1'b0;    
<a name="892"><q-n>     892  </q-n></a>    endtask: drive_read_address_channel
<a name="893"><q-n>     893  </q-n></a>    virtual protected task drive_write_data_channel (bit[31:0] data, output bit error);
<a name="894"><q-n>     894  </q-n></a>        int axiLite_ctr;
<a name="895"><q-n>     895  </q-n></a>        axi4l_vif.WDATA  &lt;= data;
<a name="896"><q-n>     896  </q-n></a>        axi4l_vif.WSTRB  &lt;= 4'hf;
<a name="897"><q-n>     897  </q-n></a>        axi4l_vif.WVALID &lt;= 1'b1;
<a name="898"><q-n>     898  </q-n></a>        @(posedge axi4l_vif.ACLK);
<a name="899"><q-n>     899  </q-n></a>            for(axiLite_ctr = 0; axiLite_ctr &lt;= 31; axiLite_ctr ++) begin
<a name="900"><q-n>     900  </q-n></a>            @(posedge axi4l_vif.ACLK);
<a name="901"><q-n>     901  </q-n></a>            if (axi4l_vif.WREADY) 
<a name="902"><q-n>     902  </q-n></a>                    axi4l_vif.AWADDR  &lt;= 8'h0;
<a name="903"><q-n>     903  </q-n></a>        axi4l_vif.AWPROT  &lt;= 3'h0;
<a name="904"><q-n>     904  </q-n></a>        axi4l_vif.AWVALID &lt;= 1'b0; 
<a name="905"><q-n>     905  </q-n></a>            break;
<a name="906"><q-n>     906  </q-n></a>        end
<a name="907"><q-n>     907  </q-n></a>        if (axiLite_ctr == 31) begin
<a name="908"><q-n>     908  </q-n></a>            `uvm_error("axiLite_master_driver","AWVALID timeout");
<a name="909"><q-n>     909  </q-n></a>        end
<a name="910"><q-n>     910  </q-n></a>        @(posedge axi4l_vif.ACLK);
<a name="911"><q-n>     911  </q-n></a>        axi4l_vif.WDATA  &lt;= 32'h0;
<a name="912"><q-n>     912  </q-n></a>        axi4l_vif.WSTRB  &lt;= 4'h0;
<a name="913"><q-n>     913  </q-n></a>        axi4l_vif.WVALID &lt;= 1'b0;
<a name="914"><q-n>     914  </q-n></a>        //wait for write response
<a name="915"><q-n>     915  </q-n></a>        for(axiLite_ctr = 0; axiLite_ctr &lt;= 31; axiLite_ctr ++) begin
<a name="916"><q-n>     916  </q-n></a>            @(posedge axi4l_vif.ACLK);
<a name="917"><q-n>     917  </q-n></a>            if (axi4l_vif.BVALID) break;
<a name="918"><q-n>     918  </q-n></a>        end
<a name="919"><q-n>     919  </q-n></a>        if (axiLite_ctr == 31) begin
<a name="920"><q-n>     920  </q-n></a>            `uvm_error("axiLite_master_driver","BVALID timeout");
<a name="921"><q-n>     921  </q-n></a>        end
<a name="922"><q-n>     922  </q-n></a>        else begin
<a name="923"><q-n>     923  </q-n></a>            if (axi4l_vif.BVALID == 1'b1 &amp;&amp; axi4l_vif.BRESP != 2'h0)
<a name="924"><q-n>     924  </q-n></a>            `uvm_error("axiLite_master_driver","Received ERROR Write Response");
<a name="925"><q-n>     925  </q-n></a>            axi4l_vif.BREADY &lt;= axi4l_vif.BVALID;
<a name="926"><q-n>     926  </q-n></a>         @(posedge axi4l_vif.ACLK);
<a name="927"><q-n>     927  </q-n></a>        end
<a name="928"><q-n>     928  </q-n></a>    endtask: drive_write_data_channel
<a name="929"><q-n>     929  </q-n></a>    // drive read data channel
<a name="930"><q-n>     930  </q-n></a>    virtual protected task drive_read_data_channel (output bit [31:0] data, output bit error);
<a name="931"><q-n>     931  </q-n></a>        int axiLite_ctr;
<a name="932"><q-n>     932  </q-n></a>        for(axiLite_ctr = 0; axiLite_ctr &lt;= 31; axiLite_ctr ++) begin
<a name="933"><q-n>     933  </q-n></a>            @(posedge axi4l_vif.ACLK);
<a name="934"><q-n>     934  </q-n></a>            if (axi4l_vif.RVALID) break;
<a name="935"><q-n>     935  </q-n></a>        end
<a name="936"><q-n>     936  </q-n></a>        data = axi4l_vif.RDATA;
<a name="937"><q-n>     937  </q-n></a>        if (axiLite_ctr == 31) begin
<a name="938"><q-n>     938  </q-n></a>            `uvm_error("axiLite_master_driver","RVALID timeout");
<a name="939"><q-n>     939  </q-n></a>        end
<a name="940"><q-n>     940  </q-n></a>        else begin
<a name="941"><q-n>     941  </q-n></a>        if (axi4l_vif.RVALID == 1'b1 &amp;&amp; axi4l_vif.RRESP != 2'h0)
<a name="942"><q-n>     942  </q-n></a>            `uvm_error("axiLite_master_driver","Received ERROR Read Response");
<a name="943"><q-n>     943  </q-n></a>            axi4l_vif.RREADY &lt;= axi4l_vif.RVALID;
<a name="944"><q-n>     944  </q-n></a>            @(posedge axi4l_vif.ACLK);
<a name="945"><q-n>     945  </q-n></a>        end
<a name="946"><q-n>     946  </q-n></a>    endtask: drive_read_data_channel
<a name="947"><q-n>     947  </q-n></a>endclass: axiLite_driver
<a name="948"><q-n>     948  </q-n></a>// UVM_DRIVER : TEMPLATE_DRIVER [TEMPLATE]
<a name="949"><q-n>     949  </q-n></a>class template_driver extends uvm_driver#(tp_transaction);
<a name="950"><q-n>     950  </q-n></a>    `uvm_component_utils(template_driver)
<a name="951"><q-n>     951  </q-n></a>    virtual tp_if tp_vif;
<a name="952"><q-n>     952  </q-n></a>    function new(string name, uvm_component parent);
<a name="953"><q-n>     953  </q-n></a>        super.new(name, parent);
<a name="954"><q-n>     954  </q-n></a>    endfunction: new
<a name="955"><q-n>     955  </q-n></a>    function void build_phase(uvm_phase phase);
<a name="956"><q-n>     956  </q-n></a>        super.build_phase(phase);
<a name="957"><q-n>     957  </q-n></a>        void'(uvm_resource_db#(virtual tp_if)::read_by_name(.scope("ifs"), .name("tp_if"), .val(tp_vif)));
<a name="958"><q-n>     958  </q-n></a>    endfunction: build_phase
<a name="959"><q-n>     959  </q-n></a>    task run_phase(uvm_phase phase);
<a name="960"><q-n>     960  </q-n></a>        drive();
<a name="961"><q-n>     961  </q-n></a>    endtask: run_phase
<a name="962"><q-n>     962  </q-n></a>    virtual task drive();
<a name="963"><q-n>     963  </q-n></a>        tp_transaction tx;
<a name="964"><q-n>     964  </q-n></a>        integer counter = 0, state = 0;
<a name="965"><q-n>     965  </q-n></a>        tp_vif.sig_ina  = 0'b0;
<a name="966"><q-n>     966  </q-n></a>        tp_vif.sig_inb  = 0'b0;
<a name="967"><q-n>     967  </q-n></a>        tp_vif.sig_en_i = 1'b0;
<a name="968"><q-n>     968  </q-n></a>        forever begin
<a name="969"><q-n>     969  </q-n></a>            if(counter==0)
<a name="970"><q-n>     970  </q-n></a>            begin
<a name="971"><q-n>     971  </q-n></a>                seq_item_port.get_next_item(tx);
<a name="972"><q-n>     972  </q-n></a>            end
<a name="973"><q-n>     973  </q-n></a>            @(posedge tp_vif.sig_clock)
<a name="974"><q-n>     974  </q-n></a>            begin
<a name="975"><q-n>     975  </q-n></a>                if(counter==0)
<a name="976"><q-n>     976  </q-n></a>                begin
<a name="977"><q-n>     977  </q-n></a>                    tp_vif.sig_en_i = 1'b1;
<a name="978"><q-n>     978  </q-n></a>                    state = 1;
<a name="979"><q-n>     979  </q-n></a>                end
<a name="980"><q-n>     980  </q-n></a>                if(counter==1)
<a name="981"><q-n>     981  </q-n></a>                begin
<a name="982"><q-n>     982  </q-n></a>                    tp_vif.sig_en_i = 1'b0;
<a name="983"><q-n>     983  </q-n></a>                end
<a name="984"><q-n>     984  </q-n></a>                case(state)
<a name="985"><q-n>     985  </q-n></a>                    1: begin
<a name="986"><q-n>     986  </q-n></a>                        tp_vif.sig_ina = tx.ina[1];
<a name="987"><q-n>     987  </q-n></a>                        tp_vif.sig_inb = tx.inb[1];
<a name="988"><q-n>     988  </q-n></a>                        tx.ina = tx.ina &lt;&lt; 1;
<a name="989"><q-n>     989  </q-n></a>                        tx.inb = tx.inb &lt;&lt; 1;
<a name="990"><q-n>     990  </q-n></a>                        counter = counter + 1;
<a name="991"><q-n>     991  </q-n></a>                        if(counter==2) state = 2;
<a name="992"><q-n>     992  </q-n></a>                    end
<a name="993"><q-n>     993  </q-n></a>                    2: begin
<a name="994"><q-n>     994  </q-n></a>                        tp_vif.sig_ina = 1'b0;
<a name="995"><q-n>     995  </q-n></a>                        tp_vif.sig_inb = 1'b0;
<a name="996"><q-n>     996  </q-n></a>                        counter = counter + 1;
<a name="997"><q-n>     997  </q-n></a>                        if(counter==6)
<a name="998"><q-n>     998  </q-n></a>                        begin
<a name="999"><q-n>     999  </q-n></a>                            counter = 0;
<a name="1000"><q-n>     1000  </q-n></a>                            state = 0;
<a name="1001"><q-n>     1001  </q-n></a>                            seq_item_port.item_done();
<a name="1002"><q-n>     1002  </q-n></a>                        end
<a name="1003"><q-n>     1003  </q-n></a>                    end
<a name="1004"><q-n>     1004  </q-n></a>                endcase
<a name="1005"><q-n>     1005  </q-n></a>            end
<a name="1006"><q-n>     1006  </q-n></a>        end
<a name="1007"><q-n>     1007  </q-n></a>    endtask: drive
<a name="1008"><q-n>     1008  </q-n></a>endclass: template_driver
<a name="1009"><q-n>     1009  </q-n></a>// UVM_DRIVER : RGB_DRIVER [RGB]
<a name="1010"><q-n>     1010  </q-n></a>class rgb_driver#(parameter set_config cfg = par_1) extends uvm_driver#(rgb_transaction#(cfg));
<a name="1011"><q-n>     1011  </q-n></a>    `uvm_component_param_utils(rgb_driver#(cfg))
<a name="1012"><q-n>     1012  </q-n></a>    virtual rgb_if#(cfg) rgb_vi;
<a name="1013"><q-n>     1013  </q-n></a>    function new(string name, uvm_component parent);
<a name="1014"><q-n>     1014  </q-n></a>        super.new(name, parent);
<a name="1015"><q-n>     1015  </q-n></a>    endfunction: new
<a name="1016"><q-n>     1016  </q-n></a>    function void build_phase(uvm_phase phase);
<a name="1017"><q-n>     1017  </q-n></a>        super.build_phase(phase);
<a name="1018"><q-n>     1018  </q-n></a>        void'(uvm_resource_db#(virtual rgb_if#(cfg))::read_by_name(.scope("ifs"),.name("rgb_if"),.val(rgb_vi)));
<a name="1019"><q-n>     1019  </q-n></a>    endfunction: build_phase
<a name="1020"><q-n>     1020  </q-n></a>    task run_phase(uvm_phase phase);
<a name="1021"><q-n>     1021  </q-n></a>        rgb_transaction#(cfg) frame_tx;
<a name="1022"><q-n>     1022  </q-n></a>        forever begin
<a name="1023"><q-n>     1023  </q-n></a>            @rgb_vi.master_cb;
<a name="1024"><q-n>     1024  </q-n></a>            seq_item_port.get_next_item(frame_tx);
<a name="1025"><q-n>     1025  </q-n></a>            @rgb_vi.master_cb;
<a name="1026"><q-n>     1026  </q-n></a>            rgb_vi.master_cb.iRed        &lt;= frame_tx.iRed;
<a name="1027"><q-n>     1027  </q-n></a>            rgb_vi.master_cb.iGreen      &lt;= frame_tx.iGreen;
<a name="1028"><q-n>     1028  </q-n></a>            rgb_vi.master_cb.iBlue       &lt;= frame_tx.iBlue;
<a name="1029"><q-n>     1029  </q-n></a>            rgb_vi.master_cb.iX          &lt;= frame_tx.iX;
<a name="1030"><q-n>     1030  </q-n></a>            rgb_vi.master_cb.iY          &lt;= frame_tx.iY;
<a name="1031"><q-n>     1031  </q-n></a>            rgb_vi.master_cb.iPixelEn    &lt;= frame_tx.iPixelEn;
<a name="1032"><q-n>     1032  </q-n></a>            rgb_vi.master_cb.iValid      &lt;= frame_tx.iValid;
<a name="1033"><q-n>     1033  </q-n></a>            rgb_vi.master_cb.iEof        &lt;= frame_tx.iEof;
<a name="1034"><q-n>     1034  </q-n></a>            seq_item_port.item_done();
<a name="1035"><q-n>     1035  </q-n></a>        end
<a name="1036"><q-n>     1036  </q-n></a>    endtask: run_phase
<a name="1037"><q-n>     1037  </q-n></a>endclass: rgb_driver
<a name="1038"><q-n>     1038  </q-n></a>// UVM_DRIVER : AXI4_STREAM_MASTER_DRIVER 
<a name="1039"><q-n>     1039  </q-n></a>class axi4_stream_master_driver  extends uvm_driver #(axi4_stream_valid_cycle);
<a name="1040"><q-n>     1040  </q-n></a>    `uvm_component_utils(axi4_stream_master_driver)
<a name="1041"><q-n>     1041  </q-n></a>    	axi4_stream_config axi4_stream_cfg;
<a name="1042"><q-n>     1042  </q-n></a>    virtual interface axi4s_if  axi4s_vif;
<a name="1043"><q-n>     1043  </q-n></a>    function new(string name, uvm_component parent);
<a name="1044"><q-n>     1044  </q-n></a>        super.new(name, parent);
<a name="1045"><q-n>     1045  </q-n></a>    endfunction: new
<a name="1046"><q-n>     1046  </q-n></a>    function void build_phase(uvm_phase phase);
<a name="1047"><q-n>     1047  </q-n></a>        super.build_phase(phase);
<a name="1048"><q-n>     1048  </q-n></a>    endfunction : build_phase
<a name="1049"><q-n>     1049  </q-n></a>	task run_phase(uvm_phase phase);
<a name="1050"><q-n>     1050  </q-n></a>		super.run_phase(phase);
<a name="1051"><q-n>     1051  </q-n></a>		forever begin
<a name="1052"><q-n>     1052  </q-n></a>			if(axi4s_vif.ARESET_N !== 1) begin
<a name="1053"><q-n>     1053  </q-n></a>				axi4s_vif.TVALID &lt;= 0;
<a name="1054"><q-n>     1054  </q-n></a>				//`uvm_info(get_type_name(),$psprintf("reset"), UVM_HIGH)
<a name="1055"><q-n>     1055  </q-n></a>				@(posedge axi4s_vif.ARESET_N);
<a name="1056"><q-n>     1056  </q-n></a>			//	`uvm_info(get_type_name(),$psprintf("coming out of reset"), UVM_HIGH)
<a name="1057"><q-n>     1057  </q-n></a>			end
<a name="1058"><q-n>     1058  </q-n></a>			fork
<a name="1059"><q-n>     1059  </q-n></a>				begin //-- Asynchronous reset
<a name="1060"><q-n>     1060  </q-n></a>					@(negedge axi4s_vif.ARESET_N);
<a name="1061"><q-n>     1061  </q-n></a>				end
<a name="1062"><q-n>     1062  </q-n></a>				begin
<a name="1063"><q-n>     1063  </q-n></a>					drive_valid_cycles();
<a name="1064"><q-n>     1064  </q-n></a>				end
<a name="1065"><q-n>     1065  </q-n></a>			join_any
<a name="1066"><q-n>     1066  </q-n></a>			disable fork;
<a name="1067"><q-n>     1067  </q-n></a>		end
<a name="1068"><q-n>     1068  </q-n></a>	endtask : run_phase
<a name="1069"><q-n>     1069  </q-n></a>	task drive_valid_cycles();
<a name="1070"><q-n>     1070  </q-n></a>		@(posedge axi4s_vif.ACLK);
<a name="1071"><q-n>     1071  </q-n></a>		forever begin
<a name="1072"><q-n>     1072  </q-n></a>			axi4_stream_valid_cycle  vc;
<a name="1073"><q-n>     1073  </q-n></a>			//-- Try next AXI4 item
<a name="1074"><q-n>     1074  </q-n></a>			seq_item_port.try_next_item(vc);
<a name="1075"><q-n>     1075  </q-n></a>			if( vc != null) begin
<a name="1076"><q-n>     1076  </q-n></a>				//`uvm_info(get_type_name(),$psprintf("There is an item to sent"), UVM_MEDIUM)
<a name="1077"><q-n>     1077  </q-n></a>				//`uvm_info(get_type_name(),$psprintf("send %0x %0x", vc.tuser, vc.tdata), UVM_MEDIUM)
<a name="1078"><q-n>     1078  </q-n></a>				//-- Wait until delay
<a name="1079"><q-n>     1079  </q-n></a>				repeat(vc.delay)
<a name="1080"><q-n>     1080  </q-n></a>					@(posedge axi4s_vif.ACLK);
<a name="1081"><q-n>     1081  </q-n></a>				//-- Send AXI4 cycle
<a name="1082"><q-n>     1082  </q-n></a>				axi4s_vif.TDATA  &lt;= vc.tdata;
<a name="1083"><q-n>     1083  </q-n></a>				axi4s_vif.TUSER  &lt;= vc.tuser;
<a name="1084"><q-n>     1084  </q-n></a>				axi4s_vif.TVALID &lt;= 1;
<a name="1085"><q-n>     1085  </q-n></a>				@(posedge axi4s_vif.ACLK)
<a name="1086"><q-n>     1086  </q-n></a>				while(axi4s_vif.TREADY == 0)
<a name="1087"><q-n>     1087  </q-n></a>					@(posedge axi4s_vif.ACLK);
<a name="1088"><q-n>     1088  </q-n></a>				axi4s_vif.TUSER  &lt;= 0;
<a name="1089"><q-n>     1089  </q-n></a>				axi4s_vif.TDATA  &lt;= 0;
<a name="1090"><q-n>     1090  </q-n></a>				axi4s_vif.TVALID &lt;= 0;
<a name="1091"><q-n>     1091  </q-n></a>				//`uvm_info(get_type_name(),$psprintf("send done: %0x %0x", vc.tuser, vc.tdata), UVM_MEDIUM)
<a name="1092"><q-n>     1092  </q-n></a>				seq_item_port.item_done();
<a name="1093"><q-n>     1093  </q-n></a>			end else //-- Else wait 1 cycle
<a name="1094"><q-n>     1094  </q-n></a>				@(posedge axi4s_vif.ACLK);
<a name="1095"><q-n>     1095  </q-n></a>		end
<a name="1096"><q-n>     1096  </q-n></a>	endtask : drive_valid_cycles
<a name="1097"><q-n>     1097  </q-n></a>endclass: axi4_stream_master_driver
<a name="1098"><q-n>     1098  </q-n></a>// UVM_DRIVER : AXI4_STREAM_SLAVE_DRIVER 
<a name="1099"><q-n>     1099  </q-n></a>class axi4_stream_slave_driver  extends uvm_driver #(ax_packet);
<a name="1100"><q-n>     1100  </q-n></a>    `uvm_component_utils(axi4_stream_slave_driver)
<a name="1101"><q-n>     1101  </q-n></a>	virtual interface axi4s_if axi4s_vif;
<a name="1102"><q-n>     1102  </q-n></a>	rand int block_cycles;
<a name="1103"><q-n>     1103  </q-n></a>	constraint c_block_cycles {
<a name="1104"><q-n>     1104  </q-n></a>		soft block_cycles dist{0:/30,[1:5]:/41, [6:15]:/25, [16:10000]:/4};
<a name="1105"><q-n>     1105  </q-n></a>	}
<a name="1106"><q-n>     1106  </q-n></a>    function new(string name, uvm_component parent);
<a name="1107"><q-n>     1107  </q-n></a>        super.new(name, parent);
<a name="1108"><q-n>     1108  </q-n></a>    endfunction: new
<a name="1109"><q-n>     1109  </q-n></a>	function void build_phase(uvm_phase phase);
<a name="1110"><q-n>     1110  </q-n></a>		super.build_phase(phase);
<a name="1111"><q-n>     1111  </q-n></a>	endfunction : build_phase
<a name="1112"><q-n>     1112  </q-n></a>    task run_phase(uvm_phase phase);
<a name="1113"><q-n>     1113  </q-n></a>        super.run_phase(phase);
<a name="1114"><q-n>     1114  </q-n></a>        forever begin
<a name="1115"><q-n>     1115  </q-n></a>			if(axi4s_vif.ARESET_N !== 1) begin
<a name="1116"><q-n>     1116  </q-n></a>				axi4s_vif.TVALID &lt;= 0;
<a name="1117"><q-n>     1117  </q-n></a>				@(posedge axi4s_vif.ARESET_N);
<a name="1118"><q-n>     1118  </q-n></a>			end
<a name="1119"><q-n>     1119  </q-n></a>			begin //-- Asynchronous reset
<a name="1120"><q-n>     1120  </q-n></a>				@(negedge axi4s_vif.ARESET_N);
<a name="1121"><q-n>     1121  </q-n></a>			end
<a name="1122"><q-n>     1122  </q-n></a>			begin
<a name="1123"><q-n>     1123  </q-n></a>			@(posedge axi4s_vif.ACLK);
<a name="1124"><q-n>     1124  </q-n></a>			forever begin
<a name="1125"><q-n>     1125  </q-n></a>                if (axi4s_vif.TVALID)
<a name="1126"><q-n>     1126  </q-n></a>                    randcase
<a name="1127"><q-n>     1127  </q-n></a>                        3 : axi4s_vif.TREADY &lt;= 1;
<a name="1128"><q-n>     1128  </q-n></a>                        1 : axi4s_vif.TREADY &lt;= 0;
<a name="1129"><q-n>     1129  </q-n></a>                    endcase
<a name="1130"><q-n>     1130  </q-n></a>                else 
<a name="1131"><q-n>     1131  </q-n></a>                    randcase
<a name="1132"><q-n>     1132  </q-n></a>                        1 : axi4s_vif.TREADY &lt;= 1;
<a name="1133"><q-n>     1133  </q-n></a>                        1 : axi4s_vif.TREADY &lt;= 0;
<a name="1134"><q-n>     1134  </q-n></a>                        1 : begin		//-- hold tready at least until tvalid is set
<a name="1135"><q-n>     1135  </q-n></a>                        axi4s_vif.TREADY &lt;= 0;
<a name="1136"><q-n>     1136  </q-n></a>                        void'(this.randomize());
<a name="1137"><q-n>     1137  </q-n></a>                        while (axi4s_vif.TVALID == 0)
<a name="1138"><q-n>     1138  </q-n></a>                        @(posedge axi4s_vif.ACLK);
<a name="1139"><q-n>     1139  </q-n></a>                        repeat(block_cycles) @(posedge axi4s_vif.ACLK); //-- wait 2 additional cycles
<a name="1140"><q-n>     1140  </q-n></a>                        end
<a name="1141"><q-n>     1141  </q-n></a>                    endcase
<a name="1142"><q-n>     1142  </q-n></a>			end
<a name="1143"><q-n>     1143  </q-n></a>			end
<a name="1144"><q-n>     1144  </q-n></a>        end
<a name="1145"><q-n>     1145  </q-n></a>    endtask : run_phase
<a name="1146"><q-n>     1146  </q-n></a>endclass: axi4_stream_slave_driver
<a name="1147"><q-n>     1147  </q-n></a>//====================================================================================
<a name="1148"><q-n>     1148  </q-n></a>//------------------------------------------------------------------------------------
<a name="1149"><q-n>     1149  </q-n></a>//--------------------------------- UVM_MONITORS
<a name="1150"><q-n>     1150  </q-n></a>//------------------------------------------------------------------------------------
<a name="1151"><q-n>     1151  </q-n></a>//====================================================================================
<a name="1152"><q-n>     1152  </q-n></a>// UVM_MONITOR : AXILITE_MONITOR [AXI4_LITE]
<a name="1153"><q-n>     1153  </q-n></a>class axiLite_monitor extends uvm_monitor;
<a name="1154"><q-n>     1154  </q-n></a>    protected virtual   axi4l_if axi4l_vif;
<a name="1155"><q-n>     1155  </q-n></a>    protected int       id;
<a name="1156"><q-n>     1156  </q-n></a>    uvm_analysis_port #(axiLite_transaction) item_collected_port;
<a name="1157"><q-n>     1157  </q-n></a>    uvm_analysis_port #(axiLite_transaction) dut_inputs_port; // analysis port for DUT inputs
<a name="1158"><q-n>     1158  </q-n></a>    uvm_analysis_port #(axiLite_transaction) dut_outputs_port; // analysis port for DUT outputs
<a name="1159"><q-n>     1159  </q-n></a>    protected axiLite_transaction aL_txn;
<a name="1160"><q-n>     1160  </q-n></a>    `uvm_component_utils_begin(axiLite_monitor)
<a name="1161"><q-n>     1161  </q-n></a>        `uvm_field_int(id, UVM_DEFAULT)
<a name="1162"><q-n>     1162  </q-n></a>    `uvm_component_utils_end
<a name="1163"><q-n>     1163  </q-n></a>    function new (string name, uvm_component parent);
<a name="1164"><q-n>     1164  </q-n></a>        super.new(name, parent);
<a name="1165"><q-n>     1165  </q-n></a>        aL_txn = new();
<a name="1166"><q-n>     1166  </q-n></a>        item_collected_port = new("item_collected_port", this);
<a name="1167"><q-n>     1167  </q-n></a>       // dut_inputs_port = new("dut_inputs_port", this); // construct the analysis port
<a name="1168"><q-n>     1168  </q-n></a>        //dut_outputs_port = new("dut_outputs_port", this); // construct the analysis port
<a name="1169"><q-n>     1169  </q-n></a>    endfunction
<a name="1170"><q-n>     1170  </q-n></a>    function void build_phase (uvm_phase phase);
<a name="1171"><q-n>     1171  </q-n></a>        super.build_phase(phase);
<a name="1172"><q-n>     1172  </q-n></a>        if(!uvm_config_db#(virtual axi4l_if)::get(this, "", "axi4l_vif", axi4l_vif))
<a name="1173"><q-n>     1173  </q-n></a>        `uvm_fatal("NOVIF",{"virtual interface must be set for: ",get_full_name(), ".axi4l_vif"});
<a name="1174"><q-n>     1174  </q-n></a>        dut_inputs_port = new(.name("dut_inputs_port"),.parent(this));
<a name="1175"><q-n>     1175  </q-n></a>        dut_outputs_port = new(.name("dut_outputs_port"),.parent(this));
<a name="1176"><q-n>     1176  </q-n></a>    endfunction // build_phase
<a name="1177"><q-n>     1177  </q-n></a>    virtual task run_phase (uvm_phase phase);
<a name="1178"><q-n>     1178  </q-n></a>        fork
<a name="1179"><q-n>     1179  </q-n></a>            collect_transactions();
<a name="1180"><q-n>     1180  </q-n></a>        join
<a name="1181"><q-n>     1181  </q-n></a>    endtask: run_phase
<a name="1182"><q-n>     1182  </q-n></a>    virtual protected task collect_transactions();
<a name="1183"><q-n>     1183  </q-n></a>        bit valid_txn = 0;
<a name="1184"><q-n>     1184  </q-n></a>        forever begin
<a name="1185"><q-n>     1185  </q-n></a>            axiLite_transaction tx_in,tx_out,tx_copy;
<a name="1186"><q-n>     1186  </q-n></a>            tx_in       = axiLite_transaction::type_id::create("tx_in"); 
<a name="1187"><q-n>     1187  </q-n></a>            tx_out      = axiLite_transaction::type_id::create("tx_out");
<a name="1188"><q-n>     1188  </q-n></a>            aL_txn      = new();
<a name="1189"><q-n>     1189  </q-n></a>            if (axi4l_vif.ARESETN == 'b0)
<a name="1190"><q-n>     1190  </q-n></a>            @(posedge axi4l_vif.ARESETN);
<a name="1191"><q-n>     1191  </q-n></a>                if (axi4l_vif.AWVALID == 'b1) begin
<a name="1192"><q-n>     1192  </q-n></a>                    tx_in.WDATA = axi4l_vif.WDATA; 
<a name="1193"><q-n>     1193  </q-n></a>                    aL_txn.reqWriteRead = WRITE;    
<a name="1194"><q-n>     1194  </q-n></a>                    aL_txn.addr  = axi4l_vif.AWADDR[7:0];
<a name="1195"><q-n>     1195  </q-n></a>                    @(posedge axi4l_vif.WVALID);
<a name="1196"><q-n>     1196  </q-n></a>                    aL_txn.data  = axi4l_vif.WDATA;
<a name="1197"><q-n>     1197  </q-n></a>                    @(negedge axi4l_vif.WVALID);
<a name="1198"><q-n>     1198  </q-n></a>                    valid_txn = 1;
<a name="1199"><q-n>     1199  </q-n></a>                end
<a name="1200"><q-n>     1200  </q-n></a>            else if (axi4l_vif.ARVALID == 'b1) begin
<a name="1201"><q-n>     1201  </q-n></a>                tx_out.RDATA = axi4l_vif.RDATA; 
<a name="1202"><q-n>     1202  </q-n></a>                aL_txn.reqWriteRead = READ;    
<a name="1203"><q-n>     1203  </q-n></a>                aL_txn.addr  = axi4l_vif.ARADDR[7:0];
<a name="1204"><q-n>     1204  </q-n></a>                @(posedge axi4l_vif.RVALID);
<a name="1205"><q-n>     1205  </q-n></a>                aL_txn.data  = axi4l_vif.RDATA;
<a name="1206"><q-n>     1206  </q-n></a>                @(negedge axi4l_vif.RVALID);
<a name="1207"><q-n>     1207  </q-n></a>                valid_txn = 1;
<a name="1208"><q-n>     1208  </q-n></a>            end
<a name="1209"><q-n>     1209  </q-n></a>            @(posedge axi4l_vif.ACLK);
<a name="1210"><q-n>     1210  </q-n></a>            //aL_txn.data = axi4l_vif.data;
<a name="1211"><q-n>     1211  </q-n></a>            //while (axi4l_vif.valid == 'b1) begin
<a name="1212"><q-n>     1212  </q-n></a>            //@(posedge axi4l_vif.ACLK);
<a name="1213"><q-n>     1213  </q-n></a>            //aL_txn.cycles++;
<a name="1214"><q-n>     1214  </q-n></a>            //end
<a name="1215"><q-n>     1215  </q-n></a>            //aL_txn.cycles--;
<a name="1216"><q-n>     1216  </q-n></a>             //`uvm_info("axi4l_vif data", aL_txn.sprint(), UVM_LOW);
<a name="1217"><q-n>     1217  </q-n></a>                if (valid_txn == 'b1 ) begin
<a name="1218"><q-n>     1218  </q-n></a>                    //`uvm_info("MON", aL_txn.convert2string(), UVM_LOW) 
<a name="1219"><q-n>     1219  </q-n></a>                    item_collected_port.write(aL_txn);
<a name="1220"><q-n>     1220  </q-n></a>                    //item_collected_port.write(aL_txn);
<a name="1221"><q-n>     1221  </q-n></a>                end
<a name="1222"><q-n>     1222  </q-n></a>            dut_inputs_port.write(tx_in);  
<a name="1223"><q-n>     1223  </q-n></a>            $cast(tx_copy, tx_out.clone());
<a name="1224"><q-n>     1224  </q-n></a>            dut_outputs_port.write(tx_copy);             
<a name="1225"><q-n>     1225  </q-n></a>            valid_txn = 0;
<a name="1226"><q-n>     1226  </q-n></a>        end
<a name="1227"><q-n>     1227  </q-n></a>    endtask: collect_transactions
<a name="1228"><q-n>     1228  </q-n></a>endclass: axiLite_monitor
<a name="1229"><q-n>     1229  </q-n></a>// UVM_MONITOR : TEMPLATE_MONITOR_PREDICT [TEMPLATE]
<a name="1230"><q-n>     1230  </q-n></a>//The second axi4_monitor, monitor_afterToDut, will get both inputs 
<a name="1231"><q-n>     1231  </q-n></a>//and make a prediction of the expected result. 
<a name="1232"><q-n>     1232  </q-n></a>//The scoreboard will get this predicted result as well and make a comparison between the two values.
<a name="1233"><q-n>     1233  </q-n></a>class template_monitor_predict extends uvm_monitor;
<a name="1234"><q-n>     1234  </q-n></a>    `uvm_component_utils(template_monitor_predict)
<a name="1235"><q-n>     1235  </q-n></a>    uvm_analysis_port#(tp_transaction)  mon_ap_afterToDut;
<a name="1236"><q-n>     1236  </q-n></a>    virtual tp_if                       tp_vif;
<a name="1237"><q-n>     1237  </q-n></a>    tp_transaction                      tx_pred;
<a name="1238"><q-n>     1238  </q-n></a>    tp_transaction                      sa_tx_cg;
<a name="1239"><q-n>     1239  </q-n></a>    covergroup template_cg;
<a name="1240"><q-n>     1240  </q-n></a>              ina_cp:     coverpoint sa_tx_cg.ina;
<a name="1241"><q-n>     1241  </q-n></a>              inb_cp:     coverpoint sa_tx_cg.inb;
<a name="1242"><q-n>     1242  </q-n></a>        cross ina_cp, inb_cp;
<a name="1243"><q-n>     1243  </q-n></a>    endgroup: template_cg
<a name="1244"><q-n>     1244  </q-n></a>    function new(string name, uvm_component parent);
<a name="1245"><q-n>     1245  </q-n></a>        super.new(name, parent);
<a name="1246"><q-n>     1246  </q-n></a>        template_cg = new;
<a name="1247"><q-n>     1247  </q-n></a>    endfunction: new
<a name="1248"><q-n>     1248  </q-n></a>    function void build_phase(uvm_phase phase);
<a name="1249"><q-n>     1249  </q-n></a>        super.build_phase(phase);
<a name="1250"><q-n>     1250  </q-n></a>        void'(uvm_resource_db#(virtual tp_if)::read_by_name(.scope("ifs"), .name("tp_if"), .val(tp_vif)));
<a name="1251"><q-n>     1251  </q-n></a>        mon_ap_afterToDut= new(.name("mon_ap_afterToDut"), .parent(this));
<a name="1252"><q-n>     1252  </q-n></a>    endfunction: build_phase
<a name="1253"><q-n>     1253  </q-n></a>    task run_phase(uvm_phase phase);
<a name="1254"><q-n>     1254  </q-n></a>        integer counter_mon = 0, state = 0;
<a name="1255"><q-n>     1255  </q-n></a>        tx_pred = tp_transaction::type_id::create(.name("tx_pred"), .contxt(get_full_name()));
<a name="1256"><q-n>     1256  </q-n></a>        forever begin
<a name="1257"><q-n>     1257  </q-n></a>            @(posedge tp_vif.sig_clock)
<a name="1258"><q-n>     1258  </q-n></a>            begin
<a name="1259"><q-n>     1259  </q-n></a>                if(tp_vif.sig_en_i==1'b1)
<a name="1260"><q-n>     1260  </q-n></a>                begin
<a name="1261"><q-n>     1261  </q-n></a>                    state  = 1;
<a name="1262"><q-n>     1262  </q-n></a>                    tx_pred.ina = 2'b00;
<a name="1263"><q-n>     1263  </q-n></a>                    tx_pred.inb = 2'b00;
<a name="1264"><q-n>     1264  </q-n></a>                    tx_pred.outValTbs = 3'b000;
<a name="1265"><q-n>     1265  </q-n></a>                end
<a name="1266"><q-n>     1266  </q-n></a>                if(state==1)
<a name="1267"><q-n>     1267  </q-n></a>                begin
<a name="1268"><q-n>     1268  </q-n></a>                    tx_pred.ina    = tx_pred.ina &lt;&lt; 1;
<a name="1269"><q-n>     1269  </q-n></a>                    tx_pred.inb    = tx_pred.inb &lt;&lt; 1;
<a name="1270"><q-n>     1270  </q-n></a>                    tx_pred.ina[0] = tp_vif.sig_ina;
<a name="1271"><q-n>     1271  </q-n></a>                    tx_pred.inb[0] = tp_vif.sig_inb;
<a name="1272"><q-n>     1272  </q-n></a>                    counter_mon = counter_mon + 1;
<a name="1273"><q-n>     1273  </q-n></a>                    if(counter_mon==3)
<a name="1274"><q-n>     1274  </q-n></a>                    begin
<a name="1275"><q-n>     1275  </q-n></a>                        state = 0;
<a name="1276"><q-n>     1276  </q-n></a>                        counter_mon = 1;
<a name="1277"><q-n>     1277  </q-n></a>                        //Predict the result
<a name="1278"><q-n>     1278  </q-n></a>                        predictor();
<a name="1279"><q-n>     1279  </q-n></a>                        sa_tx_cg = tx_pred;
<a name="1280"><q-n>     1280  </q-n></a>                        //Coverage
<a name="1281"><q-n>     1281  </q-n></a>                        template_cg.sample();
<a name="1282"><q-n>     1282  </q-n></a>                        //Send the transaction to the analysis port
<a name="1283"><q-n>     1283  </q-n></a>                        mon_ap_afterToDut.write(tx_pred);
<a name="1284"><q-n>     1284  </q-n></a>                    end
<a name="1285"><q-n>     1285  </q-n></a>                end
<a name="1286"><q-n>     1286  </q-n></a>            end
<a name="1287"><q-n>     1287  </q-n></a>        end
<a name="1288"><q-n>     1288  </q-n></a>    endtask: run_phase
<a name="1289"><q-n>     1289  </q-n></a>    virtual function void predictor();
<a name="1290"><q-n>     1290  </q-n></a>        tx_pred.outValTbs = tx_pred.ina + tx_pred.inb;//Predicted value
<a name="1291"><q-n>     1291  </q-n></a>    endfunction: predictor
<a name="1292"><q-n>     1292  </q-n></a>endclass: template_monitor_predict
<a name="1293"><q-n>     1293  </q-n></a>// UVM_MONITOR : TEMPLATE_MONITOR_FDUT [TEMPLATE]
<a name="1294"><q-n>     1294  </q-n></a>//monitor_beforeFromDut, will look solely for the output of the device 
<a name="1295"><q-n>     1295  </q-n></a>//and it will pass the result to the scoreboard.
<a name="1296"><q-n>     1296  </q-n></a>class template_monitor_fdut extends uvm_monitor; 
<a name="1297"><q-n>     1297  </q-n></a>    `uvm_component_utils(template_monitor_fdut)
<a name="1298"><q-n>     1298  </q-n></a>    uvm_analysis_port#(tp_transaction)  mon_ap_fdut;
<a name="1299"><q-n>     1299  </q-n></a>    virtual tp_if                       tp_vif;
<a name="1300"><q-n>     1300  </q-n></a>    function new(string name, uvm_component parent);
<a name="1301"><q-n>     1301  </q-n></a>        super.new(name, parent);
<a name="1302"><q-n>     1302  </q-n></a>    endfunction: new
<a name="1303"><q-n>     1303  </q-n></a>    function void build_phase(uvm_phase phase);
<a name="1304"><q-n>     1304  </q-n></a>        super.build_phase(phase);
<a name="1305"><q-n>     1305  </q-n></a>        void'(uvm_resource_db#(virtual tp_if)::read_by_name(.scope("ifs"), .name("tp_if"), .val(tp_vif)));
<a name="1306"><q-n>     1306  </q-n></a>        mon_ap_fdut = new(.name("mon_ap_fdut"), .parent(this));
<a name="1307"><q-n>     1307  </q-n></a>    endfunction: build_phase
<a name="1308"><q-n>     1308  </q-n></a>    task run_phase(uvm_phase phase);
<a name="1309"><q-n>     1309  </q-n></a>        integer counter_mon = 0, state = 0;
<a name="1310"><q-n>     1310  </q-n></a>        tp_transaction rx_fdut;
<a name="1311"><q-n>     1311  </q-n></a>        rx_fdut = tp_transaction::type_id::create(.name("rx_fdut"), .contxt(get_full_name()));
<a name="1312"><q-n>     1312  </q-n></a>        forever begin
<a name="1313"><q-n>     1313  </q-n></a>            @(posedge tp_vif.sig_clock)
<a name="1314"><q-n>     1314  </q-n></a>            begin
<a name="1315"><q-n>     1315  </q-n></a>                if(tp_vif.sig_en_o==1'b1)begin
<a name="1316"><q-n>     1316  </q-n></a>                    state = 3;
<a name="1317"><q-n>     1317  </q-n></a>                end
<a name="1318"><q-n>     1318  </q-n></a>                if(state==3)begin
<a name="1319"><q-n>     1319  </q-n></a>                    rx_fdut.outValDut = rx_fdut.outValDut &lt;&lt; 1;
<a name="1320"><q-n>     1320  </q-n></a>                    counter_mon = counter_mon + 1;
<a name="1321"><q-n>     1321  </q-n></a>                    if (counter_mon==3)begin
<a name="1322"><q-n>     1322  </q-n></a>                        rx_fdut.outValDut[0]=tp_vif.sig_out;
<a name="1323"><q-n>     1323  </q-n></a>                    end
<a name="1324"><q-n>     1324  </q-n></a>                    if(counter_mon==4)begin
<a name="1325"><q-n>     1325  </q-n></a>                        state       = 0;
<a name="1326"><q-n>     1326  </q-n></a>                        counter_mon = 0;
<a name="1327"><q-n>     1327  </q-n></a>                        //Send the transaction to the analysis port
<a name="1328"><q-n>     1328  </q-n></a>                        mon_ap_fdut.write(rx_fdut);
<a name="1329"><q-n>     1329  </q-n></a>                    end
<a name="1330"><q-n>     1330  </q-n></a>                end
<a name="1331"><q-n>     1331  </q-n></a>            end
<a name="1332"><q-n>     1332  </q-n></a>        end
<a name="1333"><q-n>     1333  </q-n></a>    endtask: run_phase
<a name="1334"><q-n>     1334  </q-n></a>endclass: template_monitor_fdut
<a name="1335"><q-n>     1335  </q-n></a>// UVM_MONITOR : RGB_MONITOR [RGB]
<a name="1336"><q-n>     1336  </q-n></a>class rgb_monitor#(parameter set_config cfg = par_1) extends uvm_monitor;
<a name="1337"><q-n>     1337  </q-n></a>    `uvm_component_param_utils(rgb_monitor#(cfg))
<a name="1338"><q-n>     1338  </q-n></a>    uvm_analysis_port#(rgb_transaction#(cfg)) frame_ap;
<a name="1339"><q-n>     1339  </q-n></a>    int unsigned agent_id = 1;
<a name="1340"><q-n>     1340  </q-n></a>    virtual rgb_if#(cfg) rgb_vi;
<a name="1341"><q-n>     1341  </q-n></a>    function new(string name, uvm_component parent);
<a name="1342"><q-n>     1342  </q-n></a>        super.new(name, parent);
<a name="1343"><q-n>     1343  </q-n></a>    endfunction: new
<a name="1344"><q-n>     1344  </q-n></a>    function void build_phase(uvm_phase phase);
<a name="1345"><q-n>     1345  </q-n></a>        super.build_phase(phase);
<a name="1346"><q-n>     1346  </q-n></a>        void'(uvm_resource_db#(virtual rgb_if#(cfg))::read_by_name(.scope("ifs"),.name("rgb_if"),.val(rgb_vi)));
<a name="1347"><q-n>     1347  </q-n></a>        frame_ap = new(.name("frame_ap"),.parent(this));
<a name="1348"><q-n>     1348  </q-n></a>    endfunction: build_phase
<a name="1349"><q-n>     1349  </q-n></a>    task run_phase(uvm_phase phase);
<a name="1350"><q-n>     1350  </q-n></a>    $display("Detected new frame_tx on interface #%d\n", agent_id);
<a name="1351"><q-n>     1351  </q-n></a>        forever begin
<a name="1352"><q-n>     1352  </q-n></a>            rgb_transaction#(cfg) frame_tx;
<a name="1353"><q-n>     1353  </q-n></a>            @rgb_vi.slave_cb;
<a name="1354"><q-n>     1354  </q-n></a>            frame_tx               = rgb_transaction#(cfg)::type_id::create(.name("frame_tx"));
<a name="1355"><q-n>     1355  </q-n></a>            frame_tx.iRed          = rgb_vi.slave_cb.iRed;
<a name="1356"><q-n>     1356  </q-n></a>            frame_tx.iGreen        = rgb_vi.slave_cb.iGreen;
<a name="1357"><q-n>     1357  </q-n></a>            frame_tx.iBlue         = rgb_vi.slave_cb.iBlue;
<a name="1358"><q-n>     1358  </q-n></a>            frame_tx.iPixelEn      = rgb_vi.slave_cb.iPixelEn;
<a name="1359"><q-n>     1359  </q-n></a>            frame_tx.iValid        = rgb_vi.slave_cb.iValid;
<a name="1360"><q-n>     1360  </q-n></a>            frame_tx.iEof          = rgb_vi.slave_cb.iEof;
<a name="1361"><q-n>     1361  </q-n></a>            frame_tx.iX            = rgb_vi.slave_cb.iX;
<a name="1362"><q-n>     1362  </q-n></a>            frame_tx.iY            = rgb_vi.slave_cb.iY;
<a name="1363"><q-n>     1363  </q-n></a>            frame_ap.write(frame_tx);
<a name="1364"><q-n>     1364  </q-n></a>        end
<a name="1365"><q-n>     1365  </q-n></a>    endtask: run_phase
<a name="1366"><q-n>     1366  </q-n></a>endclass: rgb_monitor
<a name="1367"><q-n>     1367  </q-n></a>    parameter DATA_BYTES = 16;
<a name="1368"><q-n>     1368  </q-n></a>// UVM_MONITOR : AX_MODULE_MON [AXI4_STREAM]
<a name="1369"><q-n>     1369  </q-n></a>class ax_module_mon extends uvm_monitor;
<a name="1370"><q-n>     1370  </q-n></a>	//-- Basic Module monitor
<a name="1371"><q-n>     1371  </q-n></a>	ax_packet packet;
<a name="1372"><q-n>     1372  </q-n></a>	covergroup ax_pkt_cg;
<a name="1373"><q-n>     1373  </q-n></a>		option.per_instance = 1;
<a name="1374"><q-n>     1374  </q-n></a>		AX_PACKET_LENGTH : coverpoint packet.packet_length{
<a name="1375"><q-n>     1375  </q-n></a>			illegal_bins zero_flit_pkt = {0};
<a name="1376"><q-n>     1376  </q-n></a>			bins pkt_length[] = {[1:9]};
<a name="1377"><q-n>     1377  </q-n></a>		}
<a name="1378"><q-n>     1378  </q-n></a>		AX_COMMAND: coverpoint packet.command {
<a name="1379"><q-n>     1379  </q-n></a>			bins requests[] = {
<a name="1380"><q-n>     1380  </q-n></a>				AX_WRITE_16,
<a name="1381"><q-n>     1381  </q-n></a>				AX_WRITE_32,
<a name="1382"><q-n>     1382  </q-n></a>				AX_WRITE_48,
<a name="1383"><q-n>     1383  </q-n></a>				AX_WRITE_64,
<a name="1384"><q-n>     1384  </q-n></a>				AX_WRITE_80,
<a name="1385"><q-n>     1385  </q-n></a>				AX_WRITE_96,
<a name="1386"><q-n>     1386  </q-n></a>				AX_WRITE_112,
<a name="1387"><q-n>     1387  </q-n></a>				AX_WRITE_128,
<a name="1388"><q-n>     1388  </q-n></a>				AX_MODE_WRITE,
<a name="1389"><q-n>     1389  </q-n></a>				AX_BIT_WRITE,
<a name="1390"><q-n>     1390  </q-n></a>				AX_DUAL_8B_ADDI,
<a name="1391"><q-n>     1391  </q-n></a>				AX_SINGLE_16B_ADDI,
<a name="1392"><q-n>     1392  </q-n></a>				AX_POSTED_WRITE_16,
<a name="1393"><q-n>     1393  </q-n></a>				AX_POSTED_WRITE_32,
<a name="1394"><q-n>     1394  </q-n></a>				AX_POSTED_WRITE_48,
<a name="1395"><q-n>     1395  </q-n></a>				AX_POSTED_WRITE_64,
<a name="1396"><q-n>     1396  </q-n></a>				AX_POSTED_WRITE_80,
<a name="1397"><q-n>     1397  </q-n></a>				AX_POSTED_WRITE_96,
<a name="1398"><q-n>     1398  </q-n></a>				AX_POSTED_WRITE_112,
<a name="1399"><q-n>     1399  </q-n></a>				AX_POSTED_WRITE_128,
<a name="1400"><q-n>     1400  </q-n></a>				AX_POSTED_BIT_WRIT,
<a name="1401"><q-n>     1401  </q-n></a>				AX_POSTED_BIT_WRIT,
<a name="1402"><q-n>     1402  </q-n></a>				AX_POSTED_DUAL_8B_ADDI,
<a name="1403"><q-n>     1403  </q-n></a>				AX_POSTED_SINGLE_16B_ADDI,
<a name="1404"><q-n>     1404  </q-n></a>				AX_MODE_READ,
<a name="1405"><q-n>     1405  </q-n></a>				AX_READ_16,
<a name="1406"><q-n>     1406  </q-n></a>				AX_READ_32,
<a name="1407"><q-n>     1407  </q-n></a>				AX_READ_48,
<a name="1408"><q-n>     1408  </q-n></a>				AX_READ_64,
<a name="1409"><q-n>     1409  </q-n></a>				AX_READ_80,
<a name="1410"><q-n>     1410  </q-n></a>				AX_READ_96,
<a name="1411"><q-n>     1411  </q-n></a>				AX_READ_112, 
<a name="1412"><q-n>     1412  </q-n></a>				AX_READ_128};
<a name="1413"><q-n>     1413  </q-n></a>			bins response[] = {
<a name="1414"><q-n>     1414  </q-n></a>				AX_READ_RESPONSE,
<a name="1415"><q-n>     1415  </q-n></a>				AX_WRITE_RESPONSE,
<a name="1416"><q-n>     1416  </q-n></a>				AX_MODE_READ_RESPONSE,
<a name="1417"><q-n>     1417  </q-n></a>				AX_MODE_WRITE_RESPONSE,
<a name="1418"><q-n>     1418  </q-n></a>				AX_ERROR_RESPONSE
<a name="1419"><q-n>     1419  </q-n></a>			};
<a name="1420"><q-n>     1420  </q-n></a>			illegal_bins n_used = default;
<a name="1421"><q-n>     1421  </q-n></a>		}
<a name="1422"><q-n>     1422  </q-n></a>		FLIT_DELAY: coverpoint packet.flit_delay{
<a name="1423"><q-n>     1423  </q-n></a>			bins zero_delay = {0};
<a name="1424"><q-n>     1424  </q-n></a>			bins small_delay = {[1:3]};
<a name="1425"><q-n>     1425  </q-n></a>			bins big_delay = {[4:20]};
<a name="1426"><q-n>     1426  </q-n></a>			bins huge_delay = {[21:$]};
<a name="1427"><q-n>     1427  </q-n></a>		}
<a name="1428"><q-n>     1428  </q-n></a>		FLIT_DELAY_COMMAND : cross AX_COMMAND, FLIT_DELAY;
<a name="1429"><q-n>     1429  </q-n></a>	endgroup
<a name="1430"><q-n>     1430  </q-n></a>	uvm_analysis_port #(ax_packet) item_collected_port;
<a name="1431"><q-n>     1431  </q-n></a>	int req_rcvd = 0;
<a name="1432"><q-n>     1432  </q-n></a>	int rsp_rcvd = 0;
<a name="1433"><q-n>     1433  </q-n></a>	`uvm_component_utils(ax_module_mon)
<a name="1434"><q-n>     1434  </q-n></a>	function new ( string name = "ax_module_mon", uvm_component parent );
<a name="1435"><q-n>     1435  </q-n></a>		super.new(name, parent);
<a name="1436"><q-n>     1436  </q-n></a>		item_collected_port = new("item_collected_port", this);
<a name="1437"><q-n>     1437  </q-n></a>	endfunction : new
<a name="1438"><q-n>     1438  </q-n></a>	function void build_phase(uvm_phase phase);
<a name="1439"><q-n>     1439  </q-n></a>		super.build_phase(phase);
<a name="1440"><q-n>     1440  </q-n></a>	endfunction : build_phase
<a name="1441"><q-n>     1441  </q-n></a>endclass: ax_module_mon
<a name="1442"><q-n>     1442  </q-n></a>// UVM_MONITOR : AXI4_STREAM_MONITOR [AXI4_STREAM]
<a name="1443"><q-n>     1443  </q-n></a>class axi4_stream_monitor extends uvm_monitor;
<a name="1444"><q-n>     1444  </q-n></a>    `uvm_component_utils(axi4_stream_monitor)
<a name="1445"><q-n>     1445  </q-n></a>    virtual interface axi4s_if axi4s_vif;
<a name="1446"><q-n>     1446  </q-n></a>    uvm_analysis_port #(axi4_stream_valid_cycle)    item_collected_port;
<a name="1447"><q-n>     1447  </q-n></a>    function new(string name, uvm_component parent);
<a name="1448"><q-n>     1448  </q-n></a>        super.new(name, parent);
<a name="1449"><q-n>     1449  </q-n></a>        item_collected_port = new("item_collected_port", this);
<a name="1450"><q-n>     1450  </q-n></a>    endfunction: new
<a name="1451"><q-n>     1451  </q-n></a>    function void build_phase(uvm_phase phase);
<a name="1452"><q-n>     1452  </q-n></a>        super.build_phase(phase);
<a name="1453"><q-n>     1453  </q-n></a>    endfunction : build_phase
<a name="1454"><q-n>     1454  </q-n></a>    task run();
<a name="1455"><q-n>     1455  </q-n></a>        axi4_stream_valid_cycle  vc;
<a name="1456"><q-n>     1456  </q-n></a>        forever begin
<a name="1457"><q-n>     1457  </q-n></a>            if (axi4s_vif.ARESET_N !== 1)
<a name="1458"><q-n>     1458  </q-n></a>            begin
<a name="1459"><q-n>     1459  </q-n></a>                @(posedge axi4s_vif.ARESET_N);
<a name="1460"><q-n>     1460  </q-n></a>                `uvm_info(get_type_name(),$psprintf("coming out of reset"), UVM_LOW)
<a name="1461"><q-n>     1461  </q-n></a>            end
<a name="1462"><q-n>     1462  </q-n></a>            //fork
<a name="1463"><q-n>     1463  </q-n></a>                begin //-- Asynchronous reset
<a name="1464"><q-n>     1464  </q-n></a>                    @(negedge axi4s_vif.ARESET_N);
<a name="1465"><q-n>     1465  </q-n></a>                end
<a name="1466"><q-n>     1466  </q-n></a>                forever begin
<a name="1467"><q-n>     1467  </q-n></a>                    //-- At the positive edge of ACLK
<a name="1468"><q-n>     1468  </q-n></a>                    @(posedge axi4s_vif.ACLK);
<a name="1469"><q-n>     1469  </q-n></a>                    //-- Capture valid bus cycles
<a name="1470"><q-n>     1470  </q-n></a>                    vc = new();
<a name="1471"><q-n>     1471  </q-n></a>                    if (axi4s_vif.TVALID == 1 &amp;&amp; axi4s_vif.TREADY == 1) begin
<a name="1472"><q-n>     1472  </q-n></a>                        vc.tuser     = axi4s_vif.TUSER;
<a name="1473"><q-n>     1473  </q-n></a>                        vc.tdata     = axi4s_vif.TDATA;
<a name="1474"><q-n>     1474  </q-n></a>                        item_collected_port.write(vc);
<a name="1475"><q-n>     1475  </q-n></a>                        `uvm_info(get_type_name(),$psprintf("valid cycle tuser %0x tdata %0x", vc.tuser, vc.tdata), UVM_HIGH)
<a name="1476"><q-n>     1476  </q-n></a>                    end
<a name="1477"><q-n>     1477  </q-n></a>                    //-- used to detect the ax_pkt_delay between packets
<a name="1478"><q-n>     1478  </q-n></a>                    if (axi4s_vif.TVALID == 0) begin
<a name="1479"><q-n>     1479  </q-n></a>                        vc.tuser    = 0;
<a name="1480"><q-n>     1480  </q-n></a>                        vc.tdata    = {DATA_BYTES{16'b0}};;
<a name="1481"><q-n>     1481  </q-n></a>                        item_collected_port.write(vc);
<a name="1482"><q-n>     1482  </q-n></a>                    end
<a name="1483"><q-n>     1483  </q-n></a>                end
<a name="1484"><q-n>     1484  </q-n></a>            //join_any
<a name="1485"><q-n>     1485  </q-n></a>            //disable fork;
<a name="1486"><q-n>     1486  </q-n></a>        end
<a name="1487"><q-n>     1487  </q-n></a>    endtask : run
<a name="1488"><q-n>     1488  </q-n></a>endclass: axi4_stream_monitor
<a name="1489"><q-n>     1489  </q-n></a>// UVM_MONITOR : AXI4_STREAM_AX_MONITOR [AXI4_STREAM]
<a name="1490"><q-n>     1490  </q-n></a>class axi4_stream_ax_monitor extends  ax_module_mon ;
<a name="1491"><q-n>     1491  </q-n></a>    `uvm_component_utils(axi4_stream_ax_monitor)
<a name="1492"><q-n>     1492  </q-n></a>	int FPW ;
<a name="1493"><q-n>     1493  </q-n></a>	int HEADERS ;
<a name="1494"><q-n>     1494  </q-n></a>	int TAILS ;
<a name="1495"><q-n>     1495  </q-n></a>	int VALIDS ;
<a name="1496"><q-n>     1496  </q-n></a>	int valids_per_cycle 		= 0;
<a name="1497"><q-n>     1497  </q-n></a>	int current_packet_length 	= 0;
<a name="1498"><q-n>     1498  </q-n></a>	bit request = 1;
<a name="1499"><q-n>     1499  </q-n></a>	int flit_delay [$];
<a name="1500"><q-n>     1500  </q-n></a>	uvm_analysis_port #(ax_packet) item_collected_port;
<a name="1501"><q-n>     1501  </q-n></a>	uvm_analysis_imp #(axi4_stream_valid_cycle,axi4_stream_ax_monitor) axi4_port;
<a name="1502"><q-n>     1502  </q-n></a>	int n_valids 				= 0;
<a name="1503"><q-n>     1503  </q-n></a>	int headers_seen 	= 0;
<a name="1504"><q-n>     1504  </q-n></a>	int tails_seen 	 	= 0;
<a name="1505"><q-n>     1505  </q-n></a>	typedef bit [127:0] flit_t;
<a name="1506"><q-n>     1506  </q-n></a>	flit_t flit_queue[$];
<a name="1507"><q-n>     1507  </q-n></a>	int packets_per_cycle = 0;
<a name="1508"><q-n>     1508  </q-n></a>	ax_packet packet_queue[$];
<a name="1509"><q-n>     1509  </q-n></a>	//-- covergroup definition
<a name="1510"><q-n>     1510  </q-n></a>    function new(string name, uvm_component parent);
<a name="1511"><q-n>     1511  </q-n></a>        super.new(name, parent);
<a name="1512"><q-n>     1512  </q-n></a>        axi4_port = new("axi4_port",this);
<a name="1513"><q-n>     1513  </q-n></a>    endfunction: new
<a name="1514"><q-n>     1514  </q-n></a>	function void build_phase(uvm_phase phase);
<a name="1515"><q-n>     1515  </q-n></a>		super.build_phase(phase);
<a name="1516"><q-n>     1516  </q-n></a>		FPW 	= DATA_BYTES/16;//-- convert to variables!
<a name="1517"><q-n>     1517  </q-n></a>		HEADERS = FPW;
<a name="1518"><q-n>     1518  </q-n></a>		TAILS 	= 2*FPW;
<a name="1519"><q-n>     1519  </q-n></a>		VALIDS 	= 0;
<a name="1520"><q-n>     1520  </q-n></a>	endfunction : build_phase
<a name="1521"><q-n>     1521  </q-n></a>	//-- Stuff FLITs into a FIFO, separate control signals
<a name="1522"><q-n>     1522  </q-n></a>	function void collect_flits(input axi4_stream_valid_cycle vc);
<a name="1523"><q-n>     1523  </q-n></a>		//-- read tuser flags for valid flags
<a name="1524"><q-n>     1524  </q-n></a>		flit_t tmp_flit;
<a name="1525"><q-n>     1525  </q-n></a>		flit_t current_flit;
<a name="1526"><q-n>     1526  </q-n></a>		packets_per_cycle = 0;
<a name="1527"><q-n>     1527  </q-n></a>		valids_per_cycle =0;
<a name="1528"><q-n>     1528  </q-n></a>		for (int i = 0; i&lt;FPW; i++) begin //-- Check bitvector
<a name="1529"><q-n>     1529  </q-n></a>		//-- Check if valid
<a name="1530"><q-n>     1530  </q-n></a>			if (vc.tuser == 1) begin
<a name="1531"><q-n>     1531  </q-n></a>				valids_per_cycle ++;
<a name="1532"><q-n>     1532  </q-n></a>				//-- Write 2 flit queue
<a name="1533"><q-n>     1533  </q-n></a>				for (int b=0; b&lt;16; b++)
<a name="1534"><q-n>     1534  </q-n></a>					tmp_flit[b] = vc.tdata[16*i+b];
<a name="1535"><q-n>     1535  </q-n></a>				flit_queue.push_back(tmp_flit);
<a name="1536"><q-n>     1536  </q-n></a>				if (vc.tuser == 1'b1) begin
<a name="1537"><q-n>     1537  </q-n></a>					headers_seen++; //-- Complete ax_packets to assemble
<a name="1538"><q-n>     1538  </q-n></a>					packets_per_cycle++;
<a name="1539"><q-n>     1539  </q-n></a>					flit_delay.push_back(n_valids);
<a name="1540"><q-n>     1540  </q-n></a>					n_valids = 0;
<a name="1541"><q-n>     1541  </q-n></a>				end
<a name="1542"><q-n>     1542  </q-n></a>				//-- Check if tail for complete ax packet
<a name="1543"><q-n>     1543  </q-n></a>				if (vc.tuser == 1'b1) begin
<a name="1544"><q-n>     1544  </q-n></a>					tails_seen++; //-- Complete ax_packets to assemble
<a name="1545"><q-n>     1545  </q-n></a>					assert (n_valids == 0)
<a name="1546"><q-n>     1546  </q-n></a>					else `uvm_fatal(get_type_name(), $psprintf("Non valid flits in pkt detected!"))
<a name="1547"><q-n>     1547  </q-n></a>				end
<a name="1548"><q-n>     1548  </q-n></a>				//-- Check complete ax packets
<a name="1549"><q-n>     1549  </q-n></a>				assert (tails_seen&lt;= headers_seen) 
<a name="1550"><q-n>     1550  </q-n></a>				else  `uvm_fatal(get_type_name(), $psprintf("packet is null"))
<a name="1551"><q-n>     1551  </q-n></a>				assert (headers_seen &lt;= tails_seen+1)
<a name="1552"><q-n>     1552  </q-n></a>				else  `uvm_fatal(get_type_name(), $psprintf("Packet without Tail detected"))
<a name="1553"><q-n>     1553  </q-n></a>			end
<a name="1554"><q-n>     1554  </q-n></a>			else begin
<a name="1555"><q-n>     1555  </q-n></a>				n_valids ++;
<a name="1556"><q-n>     1556  </q-n></a>			end
<a name="1557"><q-n>     1557  </q-n></a>		end
<a name="1558"><q-n>     1558  </q-n></a>		if(|vc.tuser)
<a name="1559"><q-n>     1559  </q-n></a>			`uvm_info(get_type_name(),$psprintf("%d header and %d tails available", headers_seen, tails_seen)  ,UVM_HIGH)
<a name="1560"><q-n>     1560  </q-n></a>	endfunction : collect_flits
<a name="1561"><q-n>     1561  </q-n></a>	//-- Use FLITs to form packets
<a name="1562"><q-n>     1562  </q-n></a>	function void collect_packet();
<a name="1563"><q-n>     1563  </q-n></a>		flit_t current_flit;
<a name="1564"><q-n>     1564  </q-n></a>		bit bitstream[];
<a name="1565"><q-n>     1565  </q-n></a>		//-- Assemble 1 ax packet
<a name="1566"><q-n>     1566  </q-n></a>		flit_queue_underflow : assert (flit_queue.size() &gt; 0);
<a name="1567"><q-n>     1567  </q-n></a>		//-- First flit is always header
<a name="1568"><q-n>     1568  </q-n></a>		current_flit = flit_queue.pop_front();
<a name="1569"><q-n>     1569  </q-n></a>		no_length_mismatches_allowed : assert (current_flit[14:11] == current_flit[10:7]); 	//--check internal ax_packet length
<a name="1570"><q-n>     1570  </q-n></a>		current_packet_length = current_flit[10:7];
<a name="1571"><q-n>     1571  </q-n></a>		`uvm_info(get_type_name(),$psprintf("packet length %0d ", current_packet_length), UVM_HIGH)
<a name="1572"><q-n>     1572  </q-n></a>		`uvm_info(get_type_name(),$psprintf("queue size %0d ", flit_queue.size()), UVM_HIGH)
<a name="1573"><q-n>     1573  </q-n></a>		flit_queue_underflow2 : assert (flit_queue.size() &gt;= current_packet_length - 1);		//--check check ax_packet complete received
<a name="1574"><q-n>     1574  </q-n></a>		//-- pack flits 2 bitstream
<a name="1575"><q-n>     1575  </q-n></a>		bitstream = new[current_packet_length*16];
<a name="1576"><q-n>     1576  </q-n></a>		//-- Pack first flit
<a name="1577"><q-n>     1577  </q-n></a>		for (int i=0; i&lt;16; i=i+1)
<a name="1578"><q-n>     1578  </q-n></a>			bitstream[i] = current_flit[i];
<a name="1579"><q-n>     1579  </q-n></a>		//-- Get and pack the remaining flits
<a name="1580"><q-n>     1580  </q-n></a>		for (int flit=1; flit &lt; current_packet_length; flit ++) begin
<a name="1581"><q-n>     1581  </q-n></a>			current_flit = flit_queue.pop_front();
<a name="1582"><q-n>     1582  </q-n></a>			`uvm_info(get_type_name(),$psprintf("pop flit %0d (%0x)", flit, current_flit), UVM_HIGH)
<a name="1583"><q-n>     1583  </q-n></a>			for (int i=0; i&lt;16; i=i+1) begin
<a name="1584"><q-n>     1584  </q-n></a>				bitstream[flit*16+i] = current_flit[i];
<a name="1585"><q-n>     1585  </q-n></a>			end
<a name="1586"><q-n>     1586  </q-n></a>		end
<a name="1587"><q-n>     1587  </q-n></a>		packet = ax_packet::type_id::create("packet", this);
<a name="1588"><q-n>     1588  </q-n></a>		void'(packet.unpack(bitstream));
<a name="1589"><q-n>     1589  </q-n></a>		packet.flit_delay = flit_delay.pop_front();
<a name="1590"><q-n>     1590  </q-n></a>		ax_pkt_cg.sample(); 
<a name="1591"><q-n>     1591  </q-n></a>		//-- assembled a packet
<a name="1592"><q-n>     1592  </q-n></a>		headers_seen--;
<a name="1593"><q-n>     1593  </q-n></a>		tails_seen--; 
<a name="1594"><q-n>     1594  </q-n></a>		if (packet == null) begin
<a name="1595"><q-n>     1595  </q-n></a>		  `uvm_fatal(get_type_name(), $psprintf("packet is null"))
<a name="1596"><q-n>     1596  </q-n></a>		end
<a name="1597"><q-n>     1597  </q-n></a>		packet_queue.push_back(packet);
<a name="1598"><q-n>     1598  </q-n></a>		if(packet.get_command_type() == AX_RESPONSE_TYPE)begin
<a name="1599"><q-n>     1599  </q-n></a>		`uvm_info("RESPONSE collected",$psprintf("Rsp %0d : %s",rsp_rcvd, packet.command.name()), UVM_LOW)
<a name="1600"><q-n>     1600  </q-n></a>		rsp_rcvd++;
<a name="1601"><q-n>     1601  </q-n></a>		end else begin
<a name="1602"><q-n>     1602  </q-n></a>		`uvm_info("REQUEST collected",$psprintf("Req %0d : %s",req_rcvd, packet.command.name()), UVM_LOW)
<a name="1603"><q-n>     1603  </q-n></a>		req_rcvd++;
<a name="1604"><q-n>     1604  </q-n></a>		end
<a name="1605"><q-n>     1605  </q-n></a>		`uvm_info("AXI4 to AX Monitor",$psprintf("\n%s", packet.sprint()), UVM_HIGH)
<a name="1606"><q-n>     1606  </q-n></a>	endfunction : collect_packet
<a name="1607"><q-n>     1607  </q-n></a>	function void write(input axi4_stream_valid_cycle vc);
<a name="1608"><q-n>     1608  </q-n></a>		ax_packet packet;
<a name="1609"><q-n>     1609  </q-n></a>		collect_flits(vc);
<a name="1610"><q-n>     1610  </q-n></a>		//`uvm_info(get_type_name(),$psprintf("got %0d tails and %0d flits",tails_seen, flit_queue.size() ), UVM_HIGH)
<a name="1611"><q-n>     1611  </q-n></a>		//-- Convert flit_queue to ax_packets
<a name="1612"><q-n>     1612  </q-n></a>		while (tails_seen &gt;0) begin
<a name="1613"><q-n>     1613  </q-n></a>			collect_packet();		
<a name="1614"><q-n>     1614  </q-n></a>		end
<a name="1615"><q-n>     1615  </q-n></a>		//-- If flit queue is not empty -&gt; ax packet striped over 2 axi cycles
<a name="1616"><q-n>     1616  </q-n></a>		while (packet_queue.size()&gt;0) begin
<a name="1617"><q-n>     1617  </q-n></a>			packet = packet_queue.pop_front();
<a name="1618"><q-n>     1618  </q-n></a>			//if (packet.command != AX_ERROR_RESPONSE)
<a name="1619"><q-n>     1619  </q-n></a>				item_collected_port.write(packet);
<a name="1620"><q-n>     1620  </q-n></a>		end
<a name="1621"><q-n>     1621  </q-n></a>	endfunction
<a name="1622"><q-n>     1622  </q-n></a>	function void check_phase(uvm_phase phase);
<a name="1623"><q-n>     1623  </q-n></a>		if (flit_queue.size() &gt;0)
<a name="1624"><q-n>     1624  </q-n></a>			`uvm_fatal(get_type_name(),$psprintf("flit_queue is not empty: %0d", flit_queue.size()))
<a name="1625"><q-n>     1625  </q-n></a>	endfunction : check_phase
<a name="1626"><q-n>     1626  </q-n></a>endclass: axi4_stream_ax_monitor
<a name="1627"><q-n>     1627  </q-n></a>//====================================================================================
<a name="1628"><q-n>     1628  </q-n></a>//------------------------------------------------------------------------------------
<a name="1629"><q-n>     1629  </q-n></a>//--------------------------------- UVM_AGENTS
<a name="1630"><q-n>     1630  </q-n></a>//------------------------------------------------------------------------------------
<a name="1631"><q-n>     1631  </q-n></a>//====================================================================================
<a name="1632"><q-n>     1632  </q-n></a>// UVM_AGENT : AXILITE_AGT [AXI4_LITE]
<a name="1633"><q-n>     1633  </q-n></a>class axiLite_agent extends uvm_agent;
<a name="1634"><q-n>     1634  </q-n></a>    `uvm_component_utils(axiLite_agent)
<a name="1635"><q-n>     1635  </q-n></a>    uvm_analysis_port#(axiLite_transaction) item_collected_port;
<a name="1636"><q-n>     1636  </q-n></a>    axiLite_sequencer       aL_sqr;
<a name="1637"><q-n>     1637  </q-n></a>    axiLite_driver          aL_drv;
<a name="1638"><q-n>     1638  </q-n></a>    axiLite_monitor         aL_mon;
<a name="1639"><q-n>     1639  </q-n></a>    function new (string name, uvm_component parent);
<a name="1640"><q-n>     1640  </q-n></a>        super.new(name, parent);
<a name="1641"><q-n>     1641  </q-n></a>    endfunction
<a name="1642"><q-n>     1642  </q-n></a>    function void build_phase(uvm_phase phase);
<a name="1643"><q-n>     1643  </q-n></a>        super.build_phase(phase);
<a name="1644"><q-n>     1644  </q-n></a>        item_collected_port    = new(.name("item_collected_port"),.parent(this));
<a name="1645"><q-n>     1645  </q-n></a>        aL_mon                 = axiLite_monitor::type_id::create("aL_mon", this);
<a name="1646"><q-n>     1646  </q-n></a>        if (get_is_active() == UVM_ACTIVE) begin
<a name="1647"><q-n>     1647  </q-n></a>            aL_sqr = axiLite_sequencer::type_id::create("aL_sqr", this);
<a name="1648"><q-n>     1648  </q-n></a>            aL_drv = axiLite_driver::type_id::create("aL_drv", this);
<a name="1649"><q-n>     1649  </q-n></a>        end
<a name="1650"><q-n>     1650  </q-n></a>    endfunction
<a name="1651"><q-n>     1651  </q-n></a>    function void connect_phase(uvm_phase phase);
<a name="1652"><q-n>     1652  </q-n></a>        if (get_is_active() == UVM_ACTIVE) begin
<a name="1653"><q-n>     1653  </q-n></a>            aL_drv.seq_item_port.connect(aL_sqr.seq_item_export);
<a name="1654"><q-n>     1654  </q-n></a>            aL_mon.item_collected_port.connect(item_collected_port);
<a name="1655"><q-n>     1655  </q-n></a>        end
<a name="1656"><q-n>     1656  </q-n></a>    endfunction
<a name="1657"><q-n>     1657  </q-n></a>endclass: axiLite_agent
<a name="1658"><q-n>     1658  </q-n></a>// UVM_AGENT : RGB_AGENT [RGB]
<a name="1659"><q-n>     1659  </q-n></a>class rgb_agent#(parameter set_config cfg = par_1) extends uvm_agent;
<a name="1660"><q-n>     1660  </q-n></a>    `uvm_component_param_utils(rgb_agent#(cfg))
<a name="1661"><q-n>     1661  </q-n></a>    uvm_analysis_port#(rgb_transaction#(cfg)) frame_ap;
<a name="1662"><q-n>     1662  </q-n></a>    rgb_sequencer   #(cfg)               frame_seqr;
<a name="1663"><q-n>     1663  </q-n></a>    rgb_driver      #(cfg)               frame_drvr;
<a name="1664"><q-n>     1664  </q-n></a>    rgb_monitor     #(cfg)               frame_mon;
<a name="1665"><q-n>     1665  </q-n></a>    function new(string name, uvm_component parent);
<a name="1666"><q-n>     1666  </q-n></a>        super.new(name, parent);
<a name="1667"><q-n>     1667  </q-n></a>    endfunction: new
<a name="1668"><q-n>     1668  </q-n></a>    function void build_phase(uvm_phase phase);
<a name="1669"><q-n>     1669  </q-n></a>        super.build_phase(phase);
<a name="1670"><q-n>     1670  </q-n></a>        frame_ap    = new(.name("frame_ap"),.parent(this));
<a name="1671"><q-n>     1671  </q-n></a>        frame_seqr  = rgb_sequencer#(cfg)  ::type_id::create(.name("frame_seqr"),.parent(this));
<a name="1672"><q-n>     1672  </q-n></a>        frame_drvr  = rgb_driver   #(cfg)  ::type_id::create(.name("frame_drvr"),.parent(this));
<a name="1673"><q-n>     1673  </q-n></a>        frame_mon   = rgb_monitor  #(cfg)  ::type_id::create(.name("frame_mon"),.parent(this));
<a name="1674"><q-n>     1674  </q-n></a>    endfunction: build_phase
<a name="1675"><q-n>     1675  </q-n></a>    function void connect_phase(uvm_phase phase);
<a name="1676"><q-n>     1676  </q-n></a>        super.connect_phase(phase);
<a name="1677"><q-n>     1677  </q-n></a>        frame_drvr.seq_item_port.connect(frame_seqr.seq_item_export);
<a name="1678"><q-n>     1678  </q-n></a>        frame_mon.frame_ap.connect(frame_ap);
<a name="1679"><q-n>     1679  </q-n></a>    endfunction: connect_phase
<a name="1680"><q-n>     1680  </q-n></a>endclass: rgb_agent
<a name="1681"><q-n>     1681  </q-n></a>// UVM_AGENT : TEMPLATE_AGENT [TEMPLATE]
<a name="1682"><q-n>     1682  </q-n></a>class template_agent extends uvm_agent;
<a name="1683"><q-n>     1683  </q-n></a>    `uvm_component_utils(template_agent)
<a name="1684"><q-n>     1684  </q-n></a>    uvm_analysis_port#(tp_transaction) agent_ap_fdut;
<a name="1685"><q-n>     1685  </q-n></a>    uvm_analysis_port#(tp_transaction) agent_ap_afterToDut;
<a name="1686"><q-n>     1686  </q-n></a>    template_sequencer                       sa_seqr;
<a name="1687"><q-n>     1687  </q-n></a>    template_driver                          sa_drvr;
<a name="1688"><q-n>     1688  </q-n></a>    template_monitor_fdut                sa_mon_fdut;
<a name="1689"><q-n>     1689  </q-n></a>    template_monitor_predict              sa_mon_afterToDut;
<a name="1690"><q-n>     1690  </q-n></a>    function new(string name, uvm_component parent);
<a name="1691"><q-n>     1691  </q-n></a>        super.new(name, parent);
<a name="1692"><q-n>     1692  </q-n></a>    endfunction: new
<a name="1693"><q-n>     1693  </q-n></a>    function void build_phase(uvm_phase phase);
<a name="1694"><q-n>     1694  </q-n></a>        super.build_phase(phase);
<a name="1695"><q-n>     1695  </q-n></a>        agent_ap_fdut               = new(.name("agent_ap_fdut"), .parent(this));
<a name="1696"><q-n>     1696  </q-n></a>        agent_ap_afterToDut         = new(.name("agent_ap_afterToDut"), .parent(this));
<a name="1697"><q-n>     1697  </q-n></a>        sa_seqr                     = template_sequencer            ::type_id::create(.name("sa_seqr"), .parent(this));
<a name="1698"><q-n>     1698  </q-n></a>        sa_drvr                     = template_driver               ::type_id::create(.name("sa_drvr"), .parent(this));
<a name="1699"><q-n>     1699  </q-n></a>        sa_mon_fdut                 = template_monitor_fdut::type_id::create(.name("sa_mon_fdut"), .parent(this));
<a name="1700"><q-n>     1700  </q-n></a>        sa_mon_afterToDut           = template_monitor_predict   ::type_id::create(.name("sa_mon_afterToDut"), .parent(this));
<a name="1701"><q-n>     1701  </q-n></a>    endfunction: build_phase
<a name="1702"><q-n>     1702  </q-n></a>    function void connect_phase(uvm_phase phase);
<a name="1703"><q-n>     1703  </q-n></a>        super.connect_phase(phase);
<a name="1704"><q-n>     1704  </q-n></a>        sa_drvr.seq_item_port.connect(sa_seqr.seq_item_export);
<a name="1705"><q-n>     1705  </q-n></a>        sa_mon_fdut.mon_ap_fdut.connect(agent_ap_fdut);
<a name="1706"><q-n>     1706  </q-n></a>        sa_mon_afterToDut.mon_ap_afterToDut.connect(agent_ap_afterToDut);
<a name="1707"><q-n>     1707  </q-n></a>    endfunction: connect_phase
<a name="1708"><q-n>     1708  </q-n></a>endclass: template_agent
<a name="1709"><q-n>     1709  </q-n></a>// UVM_AGENT : AXI4_STREAM_MASTER_AGENT [AXI4_STREAM]
<a name="1710"><q-n>     1710  </q-n></a>class axi4_stream_master_agent extends uvm_agent;
<a name="1711"><q-n>     1711  </q-n></a>    `uvm_component_utils(axi4_stream_master_agent)
<a name="1712"><q-n>     1712  </q-n></a>    axi4_stream_config                  axi4_stream_master_cfg;
<a name="1713"><q-n>     1713  </q-n></a>    axi4_stream_master_driver           axi4_master_driver;
<a name="1714"><q-n>     1714  </q-n></a>    axi4_stream_master_sequencer        axi_sequencer;
<a name="1715"><q-n>     1715  </q-n></a>    //axi4_stream_monitor                 axi4_monitor;
<a name="1716"><q-n>     1716  </q-n></a>    function new(string name, uvm_component parent);
<a name="1717"><q-n>     1717  </q-n></a>        super.new(name, parent);
<a name="1718"><q-n>     1718  </q-n></a>    endfunction: new
<a name="1719"><q-n>     1719  </q-n></a>    function void build_phase(uvm_phase phase);
<a name="1720"><q-n>     1720  </q-n></a>        super.build_phase(phase);
<a name="1721"><q-n>     1721  </q-n></a>        if (! uvm_config_db#(axi4_stream_config)::get(.cntxt(this),.inst_name (""),.field_name("axi4_stream_master_cfg"),.value(axi4_stream_master_cfg))) begin
<a name="1722"><q-n>     1722  </q-n></a>        `uvm_error("axi4_stream_master_agent", "axi4_stream_master_cfg not found")
<a name="1723"><q-n>     1723  </q-n></a>        end
<a name="1724"><q-n>     1724  </q-n></a>        if (axi4_stream_master_cfg.master_active == UVM_ACTIVE) begin
<a name="1725"><q-n>     1725  </q-n></a>            axi_sequencer = axi4_stream_master_sequencer    ::type_id::create(.name("axi_sequencer"),.parent(this));
<a name="1726"><q-n>     1726  </q-n></a>            axi4_master_driver = axi4_stream_master_driver  ::type_id::create(.name("axi4_master_driver"),.parent(this));
<a name="1727"><q-n>     1727  </q-n></a>        end
<a name="1728"><q-n>     1728  </q-n></a>        //axi4_monitor = axi4_stream_monitor::type_id::create(.name("axi4_monitor"),.parent(this));
<a name="1729"><q-n>     1729  </q-n></a>    endfunction: build_phase
<a name="1730"><q-n>     1730  </q-n></a>    function void connect_phase(uvm_phase phase);
<a name="1731"><q-n>     1731  </q-n></a>        super.connect_phase(phase);
<a name="1732"><q-n>     1732  </q-n></a>        //axi4_monitor.axi4s_vif    = axi4_stream_master_cfg.axi4s_vif;
<a name="1733"><q-n>     1733  </q-n></a>        if (axi4_stream_master_cfg.master_active == UVM_ACTIVE) begin
<a name="1734"><q-n>     1734  </q-n></a>            axi4_master_driver.seq_item_port.connect(axi_sequencer.seq_item_export);
<a name="1735"><q-n>     1735  </q-n></a>            axi4_master_driver.axi4s_vif = axi4_stream_master_cfg.axi4s_vif;
<a name="1736"><q-n>     1736  </q-n></a>        end
<a name="1737"><q-n>     1737  </q-n></a>    endfunction: connect_phase
<a name="1738"><q-n>     1738  </q-n></a>endclass: axi4_stream_master_agent
<a name="1739"><q-n>     1739  </q-n></a>// UVM_AGENT : AXI4_STREAM_SLAVE_AGENT [AXI4_STREAM]
<a name="1740"><q-n>     1740  </q-n></a>class axi4_stream_slave_agent extends uvm_agent;
<a name="1741"><q-n>     1741  </q-n></a>    `uvm_component_utils(axi4_stream_slave_agent)
<a name="1742"><q-n>     1742  </q-n></a>    axi4_stream_config                  axi4_stream_slave_cfg;
<a name="1743"><q-n>     1743  </q-n></a>    axi4_stream_slave_driver            axi4_slave_driver;
<a name="1744"><q-n>     1744  </q-n></a>    function new(string name, uvm_component parent);
<a name="1745"><q-n>     1745  </q-n></a>        super.new(name, parent);
<a name="1746"><q-n>     1746  </q-n></a>    endfunction: new
<a name="1747"><q-n>     1747  </q-n></a>    function void build_phase(uvm_phase phase);
<a name="1748"><q-n>     1748  </q-n></a>        super.build_phase(phase);
<a name="1749"><q-n>     1749  </q-n></a>        if (! uvm_config_db#(axi4_stream_config)::get(.cntxt(this),.inst_name (""),.field_name("axi4_stream_slave_cfg"),.value(axi4_stream_slave_cfg))) begin
<a name="1750"><q-n>     1750  </q-n></a>        `uvm_error("axi4_stream_slave_agent", "axi4_stream_slave_cfg not found")
<a name="1751"><q-n>     1751  </q-n></a>        end
<a name="1752"><q-n>     1752  </q-n></a>        if (axi4_stream_slave_cfg.slave_active == UVM_ACTIVE) begin
<a name="1753"><q-n>     1753  </q-n></a>            axi4_slave_driver = axi4_stream_slave_driver         ::type_id::create(.name("axi4_slave_driver"),.parent(this));
<a name="1754"><q-n>     1754  </q-n></a>        end
<a name="1755"><q-n>     1755  </q-n></a>    endfunction: build_phase
<a name="1756"><q-n>     1756  </q-n></a>    function void connect_phase(uvm_phase phase);
<a name="1757"><q-n>     1757  </q-n></a>        super.connect_phase(phase);
<a name="1758"><q-n>     1758  </q-n></a>        if (axi4_stream_slave_cfg.slave_active == UVM_ACTIVE) begin
<a name="1759"><q-n>     1759  </q-n></a>            axi4_slave_driver.axi4s_vif = axi4_stream_slave_cfg.axi4s_vif;
<a name="1760"><q-n>     1760  </q-n></a>        end
<a name="1761"><q-n>     1761  </q-n></a>    endfunction: connect_phase
<a name="1762"><q-n>     1762  </q-n></a>endclass: axi4_stream_slave_agent
<a name="1763"><q-n>     1763  </q-n></a>//====================================================================================
<a name="1764"><q-n>     1764  </q-n></a>//------------------------------------------------------------------------------------
<a name="1765"><q-n>     1765  </q-n></a>//--------------------------------- UVM_SUBSCRIBERS
<a name="1766"><q-n>     1766  </q-n></a>//------------------------------------------------------------------------------------
<a name="1767"><q-n>     1767  </q-n></a>//====================================================================================
<a name="1768"><q-n>     1768  </q-n></a>// UVM_SUBSCRIBER : AXILITE_FC_SUBSCRIBER [AXI4_LITE]
<a name="1769"><q-n>     1769  </q-n></a>class axiLite_fc_subscriber extends uvm_subscriber#(axiLite_transaction);
<a name="1770"><q-n>     1770  </q-n></a>    `uvm_component_utils(axiLite_fc_subscriber)
<a name="1771"><q-n>     1771  </q-n></a>    axiLite_transaction aL_txn;
<a name="1772"><q-n>     1772  </q-n></a>    covergroup aL_cg;
<a name="1773"><q-n>     1773  </q-n></a>        WDATA_cp:            coverpoint aL_txn.WDATA;
<a name="1774"><q-n>     1774  </q-n></a>        AWADDR_cp:           coverpoint aL_txn.RDATA;
<a name="1775"><q-n>     1775  </q-n></a>        // cross WDATA_cp, AWADDR_cp;
<a name="1776"><q-n>     1776  </q-n></a>    endgroup: aL_cg
<a name="1777"><q-n>     1777  </q-n></a>    function new(string name, uvm_component parent);
<a name="1778"><q-n>     1778  </q-n></a>        super.new(name, parent);
<a name="1779"><q-n>     1779  </q-n></a>        aL_cg = new;
<a name="1780"><q-n>     1780  </q-n></a>    endfunction: new
<a name="1781"><q-n>     1781  </q-n></a>    function void write(axiLite_transaction t);
<a name="1782"><q-n>     1782  </q-n></a>        aL_txn = t;
<a name="1783"><q-n>     1783  </q-n></a>        aL_cg.sample();
<a name="1784"><q-n>     1784  </q-n></a>    endfunction: write
<a name="1785"><q-n>     1785  </q-n></a>endclass: axiLite_fc_subscriber
<a name="1786"><q-n>     1786  </q-n></a>// UVM_SUBSCRIBER : RGB_FC_SUBSCRIBER [RGB]
<a name="1787"><q-n>     1787  </q-n></a>//The functional coverage subscriber (fc_sucbscriber) identifies 
<a name="1788"><q-n>     1788  </q-n></a>//the generated frame_tx. 
<a name="1789"><q-n>     1789  </q-n></a>//The rgb_transaction sent from the axi4_monitor is sampled by the write function.
<a name="1790"><q-n>     1790  </q-n></a>class rgb_fc_subscriber extends uvm_subscriber#(rgb_transaction);
<a name="1791"><q-n>     1791  </q-n></a>    `uvm_component_utils(rgb_fc_subscriber)
<a name="1792"><q-n>     1792  </q-n></a>    rgb_transaction frame_tx;
<a name="1793"><q-n>     1793  </q-n></a>    covergroup rgb_cg;
<a name="1794"><q-n>     1794  </q-n></a>        iRed_cp:            coverpoint frame_tx.iRed;
<a name="1795"><q-n>     1795  </q-n></a>        iGreen_cp:          coverpoint frame_tx.iGreen;
<a name="1796"><q-n>     1796  </q-n></a>        iBlue_cp:           coverpoint frame_tx.iBlue;
<a name="1797"><q-n>     1797  </q-n></a>        iPixelEn_cp:        coverpoint frame_tx.iPixelEn;
<a name="1798"><q-n>     1798  </q-n></a>        iValid_cp:          coverpoint frame_tx.iValid;
<a name="1799"><q-n>     1799  </q-n></a>        iEof_cp:            coverpoint frame_tx.iEof;
<a name="1800"><q-n>     1800  </q-n></a>        iX_cp:              coverpoint frame_tx.iX;
<a name="1801"><q-n>     1801  </q-n></a>        iY_cp:              coverpoint frame_tx.iY;
<a name="1802"><q-n>     1802  </q-n></a>        cross iRed_cp, iEof_cp;
<a name="1803"><q-n>     1803  </q-n></a>    endgroup: rgb_cg
<a name="1804"><q-n>     1804  </q-n></a>    function new(string name, uvm_component parent);
<a name="1805"><q-n>     1805  </q-n></a>        super.new(name, parent);
<a name="1806"><q-n>     1806  </q-n></a>        rgb_cg = new;
<a name="1807"><q-n>     1807  </q-n></a>    endfunction: new
<a name="1808"><q-n>     1808  </q-n></a>    function void write(rgb_transaction t);
<a name="1809"><q-n>     1809  </q-n></a>        frame_tx = t;
<a name="1810"><q-n>     1810  </q-n></a>        rgb_cg.sample();
<a name="1811"><q-n>     1811  </q-n></a>    endfunction: write
<a name="1812"><q-n>     1812  </q-n></a>endclass: rgb_fc_subscriber
<a name="1813"><q-n>     1813  </q-n></a>typedef class rgb_scoreboard;
<a name="1814"><q-n>     1814  </q-n></a>// UVM_SUBSCRIBER : RGB_SB_SUBSCRIBER [RGB]
<a name="1815"><q-n>     1815  </q-n></a>class rgb_sb_subscriber extends uvm_subscriber#(rgb_transaction);
<a name="1816"><q-n>     1816  </q-n></a>    `uvm_component_utils(rgb_sb_subscriber)
<a name="1817"><q-n>     1817  </q-n></a>    function new(string name, uvm_component parent);
<a name="1818"><q-n>     1818  </q-n></a>        super.new(name, parent);
<a name="1819"><q-n>     1819  </q-n></a>    endfunction: new
<a name="1820"><q-n>     1820  </q-n></a>    function void write(rgb_transaction t);
<a name="1821"><q-n>     1821  </q-n></a>        rgb_scoreboard frame_sb;
<a name="1822"><q-n>     1822  </q-n></a>        $cast(frame_sb, m_parent);
<a name="1823"><q-n>     1823  </q-n></a>        frame_sb.check_rgb_data(t);
<a name="1824"><q-n>     1824  </q-n></a>    endfunction: write
<a name="1825"><q-n>     1825  </q-n></a>endclass: rgb_sb_subscriber
<a name="1826"><q-n>     1826  </q-n></a>//====================================================================================
<a name="1827"><q-n>     1827  </q-n></a>//------------------------------------------------------------------------------------
<a name="1828"><q-n>     1828  </q-n></a>//--------------------------------- UVM_SCORECARDS
<a name="1829"><q-n>     1829  </q-n></a>//------------------------------------------------------------------------------------
<a name="1830"><q-n>     1830  </q-n></a>//====================================================================================
<a name="1831"><q-n>     1831  </q-n></a>// UVM_SCORECARD : RGB_SCOREBOARD [RGB]
<a name="1832"><q-n>     1832  </q-n></a>class rgb_scoreboard extends uvm_scoreboard;
<a name="1833"><q-n>     1833  </q-n></a>    `uvm_component_utils(rgb_scoreboard)
<a name="1834"><q-n>     1834  </q-n></a>    uvm_analysis_export#(rgb_transaction)    frame_analysis_export;
<a name="1835"><q-n>     1835  </q-n></a>    local rgb_sb_subscriber                  frame_sb_sub;
<a name="1836"><q-n>     1836  </q-n></a>    function new(string name, uvm_component parent);
<a name="1837"><q-n>     1837  </q-n></a>        super.new(name, parent);
<a name="1838"><q-n>     1838  </q-n></a>    endfunction: new
<a name="1839"><q-n>     1839  </q-n></a>    function void build_phase(uvm_phase phase);
<a name="1840"><q-n>     1840  </q-n></a>        super.build_phase(phase);
<a name="1841"><q-n>     1841  </q-n></a>        frame_analysis_export = new(.name("frame_analysis_export"),.parent(this));
<a name="1842"><q-n>     1842  </q-n></a>        frame_sb_sub = rgb_sb_subscriber::type_id::create(.name("frame_sb_sub"),.parent(this));
<a name="1843"><q-n>     1843  </q-n></a>    endfunction: build_phase
<a name="1844"><q-n>     1844  </q-n></a>    function void connect_phase(uvm_phase phase);
<a name="1845"><q-n>     1845  </q-n></a>        super.connect_phase(phase);
<a name="1846"><q-n>     1846  </q-n></a>        frame_analysis_export.connect(frame_sb_sub.analysis_export);
<a name="1847"><q-n>     1847  </q-n></a>    endfunction: connect_phase
<a name="1848"><q-n>     1848  </q-n></a>    virtual function void check_rgb_data(rgb_transaction frame_tx);
<a name="1849"><q-n>     1849  </q-n></a>        uvm_table_printer p = new;
<a name="1850"><q-n>     1850  </q-n></a>    endfunction: check_rgb_data
<a name="1851"><q-n>     1851  </q-n></a>endclass: rgb_scoreboard
<a name="1852"><q-n>     1852  </q-n></a>// UVM_SCORECARD : TEMPLATE_SCOREBOARD [TEMPLATE]
<a name="1853"><q-n>     1853  </q-n></a>class template_scoreboard extends uvm_scoreboard;
<a name="1854"><q-n>     1854  </q-n></a>    `uvm_component_utils(template_scoreboard)
<a name="1855"><q-n>     1855  </q-n></a>    uvm_analysis_export   #(tp_transaction)     tp_fdut_sb_export;
<a name="1856"><q-n>     1856  </q-n></a>    uvm_analysis_export   #(tp_transaction)     tp_predict_sb_export;
<a name="1857"><q-n>     1857  </q-n></a>    uvm_tlm_analysis_fifo #(tp_transaction)     tp_fdut_analysis_fifo;
<a name="1858"><q-n>     1858  </q-n></a>    uvm_tlm_analysis_fifo #(tp_transaction)     tp_predict_analysis_fifo;
<a name="1859"><q-n>     1859  </q-n></a>    tp_transaction                              tp_trans_fdut;
<a name="1860"><q-n>     1860  </q-n></a>    tp_transaction                              tp_trans_predict;
<a name="1861"><q-n>     1861  </q-n></a>    function new(string name, uvm_component parent);
<a name="1862"><q-n>     1862  </q-n></a>        super.new(name, parent);
<a name="1863"><q-n>     1863  </q-n></a>        tp_trans_fdut       = new("tp_trans_fdut");
<a name="1864"><q-n>     1864  </q-n></a>        tp_trans_predict    = new("tp_trans_predict");
<a name="1865"><q-n>     1865  </q-n></a>    endfunction: new
<a name="1866"><q-n>     1866  </q-n></a>    function void build_phase(uvm_phase phase);
<a name="1867"><q-n>     1867  </q-n></a>        super.build_phase(phase);
<a name="1868"><q-n>     1868  </q-n></a>        tp_fdut_sb_export               = new("tp_fdut_sb_export", this);
<a name="1869"><q-n>     1869  </q-n></a>        tp_predict_sb_export            = new("tp_predict_sb_export", this);
<a name="1870"><q-n>     1870  </q-n></a>        tp_fdut_analysis_fifo           = new("tp_fdut_analysis_fifo", this);
<a name="1871"><q-n>     1871  </q-n></a>        tp_predict_analysis_fifo        = new("tp_predict_analysis_fifo", this);
<a name="1872"><q-n>     1872  </q-n></a>    endfunction: build_phase
<a name="1873"><q-n>     1873  </q-n></a>    function void connect_phase(uvm_phase phase);
<a name="1874"><q-n>     1874  </q-n></a>        tp_fdut_sb_export.connect(tp_fdut_analysis_fifo.analysis_export);
<a name="1875"><q-n>     1875  </q-n></a>        tp_predict_sb_export.connect(tp_predict_analysis_fifo.analysis_export);
<a name="1876"><q-n>     1876  </q-n></a>    endfunction: connect_phase
<a name="1877"><q-n>     1877  </q-n></a>    task run();
<a name="1878"><q-n>     1878  </q-n></a>        forever begin
<a name="1879"><q-n>     1879  </q-n></a>            tp_fdut_analysis_fifo.get(tp_trans_fdut);
<a name="1880"><q-n>     1880  </q-n></a>            tp_predict_analysis_fifo.get(tp_trans_predict);
<a name="1881"><q-n>     1881  </q-n></a>            compare();
<a name="1882"><q-n>     1882  </q-n></a>        end
<a name="1883"><q-n>     1883  </q-n></a>    endtask: run
<a name="1884"><q-n>     1884  </q-n></a>    virtual function void compare();
<a name="1885"><q-n>     1885  </q-n></a>        if(tp_trans_fdut.outValDut == tp_trans_predict.outValTbs) begin
<a name="1886"><q-n>     1886  </q-n></a>            `uvm_info("Test: OK",$sformatf("DUT = %d PRED = %d",tp_trans_fdut.outValDut,tp_trans_predict.outValTbs), UVM_LOW)
<a name="1887"><q-n>     1887  </q-n></a>        end else begin
<a name="1888"><q-n>     1888  </q-n></a>            `uvm_info("Test: Fail",$sformatf("DUT = %d PRED = %d",tp_trans_fdut.outValDut,tp_trans_predict.outValTbs), UVM_LOW)
<a name="1889"><q-n>     1889  </q-n></a>        end
<a name="1890"><q-n>     1890  </q-n></a>    endfunction: compare
<a name="1891"><q-n>     1891  </q-n></a>endclass: template_scoreboard
<a name="1892"><q-n>     1892  </q-n></a>`uvm_analysis_imp_decl(_beforeFromDut)
<a name="1893"><q-n>     1893  </q-n></a>`uvm_analysis_imp_decl(_afterToDut)
<a name="1894"><q-n>     1894  </q-n></a>parameter OPEN_RSP_MODE = 1;
<a name="1895"><q-n>     1895  </q-n></a>//====================================================================================
<a name="1896"><q-n>     1896  </q-n></a>//------------------------------------------------------------------------------------
<a name="1897"><q-n>     1897  </q-n></a>//--------------------------------- UVM_ENVS
<a name="1898"><q-n>     1898  </q-n></a>//------------------------------------------------------------------------------------
<a name="1899"><q-n>     1899  </q-n></a>//====================================================================================
<a name="1900"><q-n>     1900  </q-n></a>// UVM_ENV : TEMPLATE_ENV
<a name="1901"><q-n>     1901  </q-n></a>class template_env extends uvm_env;
<a name="1902"><q-n>     1902  </q-n></a>    `uvm_component_utils(template_env)
<a name="1903"><q-n>     1903  </q-n></a>    protected virtual interface axi4l_if axi4l_vif;
<a name="1904"><q-n>     1904  </q-n></a>    template_agent              sa_agent;
<a name="1905"><q-n>     1905  </q-n></a>    template_scoreboard         sa_sb;
<a name="1906"><q-n>     1906  </q-n></a>    axiLite_agent               aL_agt;
<a name="1907"><q-n>     1907  </q-n></a>    axiLite_fc_subscriber       aL_fc_sub;
<a name="1908"><q-n>     1908  </q-n></a>    rgb_agent#(par_1)           frame_agent;
<a name="1909"><q-n>     1909  </q-n></a>    rgb_fc_subscriber           frame_fc_sub;
<a name="1910"><q-n>     1910  </q-n></a>    rgb_scoreboard              frame_sb;
<a name="1911"><q-n>     1911  </q-n></a>    function new(string name, uvm_component parent);
<a name="1912"><q-n>     1912  </q-n></a>        super.new(name, parent);
<a name="1913"><q-n>     1913  </q-n></a>    endfunction: new
<a name="1914"><q-n>     1914  </q-n></a>    function void build_phase(uvm_phase phase);
<a name="1915"><q-n>     1915  </q-n></a>        super.build_phase(phase);
<a name="1916"><q-n>     1916  </q-n></a>        sa_agent        = template_agent            ::type_id::create(.name("sa_agent"), .parent(this));
<a name="1917"><q-n>     1917  </q-n></a>        sa_sb           = template_scoreboard       ::type_id::create(.name("sa_sb"), .parent(this));
<a name="1918"><q-n>     1918  </q-n></a>        frame_agent     = rgb_agent#(par_1)         ::type_id::create(.name("frame_agent"),.parent(this));
<a name="1919"><q-n>     1919  </q-n></a>        frame_fc_sub    = rgb_fc_subscriber         ::type_id::create(.name("frame_fc_sub"),.parent(this));
<a name="1920"><q-n>     1920  </q-n></a>        frame_sb        = rgb_scoreboard            ::type_id::create(.name("frame_sb"),.parent(this));
<a name="1921"><q-n>     1921  </q-n></a>        if (!uvm_config_db#(virtual axi4l_if)::get(this, "", "axi4l_vif", axi4l_vif))
<a name="1922"><q-n>     1922  </q-n></a>            `uvm_fatal("NOVIF",{"virtual interface must be set for: ",get_full_name(),".axi4l_vif"});
<a name="1923"><q-n>     1923  </q-n></a>        aL_agt          = axiLite_agent::type_id::create("aL_agt", this);
<a name="1924"><q-n>     1924  </q-n></a>        if (!uvm_config_db#(virtual axi4l_if)::get(this, "", "axi4l_vif", axi4l_vif))
<a name="1925"><q-n>     1925  </q-n></a>            `uvm_fatal("NOVIF",{"virtual interface must be set for: ",get_full_name(),".axi4l_vif"});
<a name="1926"><q-n>     1926  </q-n></a>        aL_fc_sub       = axiLite_fc_subscriber::type_id::create("aL_fc_sub", this);
<a name="1927"><q-n>     1927  </q-n></a>    endfunction: build_phase
<a name="1928"><q-n>     1928  </q-n></a>    function void connect_phase(uvm_phase phase);
<a name="1929"><q-n>     1929  </q-n></a>        super.connect_phase(phase);
<a name="1930"><q-n>     1930  </q-n></a>        sa_agent.agent_ap_fdut.connect(sa_sb.tp_fdut_sb_export);
<a name="1931"><q-n>     1931  </q-n></a>        sa_agent.agent_ap_afterToDut.connect(sa_sb.tp_predict_sb_export);
<a name="1932"><q-n>     1932  </q-n></a>        aL_agt.item_collected_port.connect(aL_fc_sub.analysis_export);
<a name="1933"><q-n>     1933  </q-n></a>        frame_agent.frame_ap.connect(frame_fc_sub.analysis_export);
<a name="1934"><q-n>     1934  </q-n></a>        frame_agent.frame_ap.connect(frame_sb.frame_analysis_export);
<a name="1935"><q-n>     1935  </q-n></a>    endfunction: connect_phase
<a name="1936"><q-n>     1936  </q-n></a>endclass: template_env
<a name="1937"><q-n>     1937  </q-n></a>// UVM_ENV : TEMPLATE_ENV
<a name="1938"><q-n>     1938  </q-n></a>class axi4_stream_env extends uvm_env;
<a name="1939"><q-n>     1939  </q-n></a>    axi4_stream_agents_config   axi4_stream_cfg;
<a name="1940"><q-n>     1940  </q-n></a>	axi4_stream_config          axi4_stream_slave_cfg;
<a name="1941"><q-n>     1941  </q-n></a>    axi4_stream_config          axi4_stream_master_cfg;
<a name="1942"><q-n>     1942  </q-n></a>    axi4_stream_config          axi4_stream_monitor_cfg;
<a name="1943"><q-n>     1943  </q-n></a>    axi4_stream_master_agent    axi4_stream_master_agt;
<a name="1944"><q-n>     1944  </q-n></a>    axi4_stream_slave_agent     axi4_stream_slave_agt;
<a name="1945"><q-n>     1945  </q-n></a>	axi4_stream_monitor 		monitor;
<a name="1946"><q-n>     1946  </q-n></a>	axi4_stream_ax_monitor 		axi4_req;
<a name="1947"><q-n>     1947  </q-n></a>    int id;
<a name="1948"><q-n>     1948  </q-n></a>    `uvm_component_utils_begin(axi4_stream_env)
<a name="1949"><q-n>     1949  </q-n></a>        `uvm_field_int(id, UVM_DEFAULT)
<a name="1950"><q-n>     1950  </q-n></a>		`uvm_field_object(axi4_stream_cfg, UVM_DEFAULT)
<a name="1951"><q-n>     1951  </q-n></a>		`uvm_field_object(axi4_stream_master_agt, UVM_DEFAULT)
<a name="1952"><q-n>     1952  </q-n></a>		`uvm_field_object(axi4_stream_slave_agt, UVM_DEFAULT)
<a name="1953"><q-n>     1953  </q-n></a>		`uvm_field_object(monitor, UVM_DEFAULT)
<a name="1954"><q-n>     1954  </q-n></a>		`uvm_field_object(axi4_req, UVM_DEFAULT)
<a name="1955"><q-n>     1955  </q-n></a>    `uvm_component_utils_end
<a name="1956"><q-n>     1956  </q-n></a>        uvm_analysis_port#(axi4_stream_ax_monitor) item_collected_port;
<a name="1957"><q-n>     1957  </q-n></a>    function new(string name, uvm_component parent);
<a name="1958"><q-n>     1958  </q-n></a>        super.new(name, parent);
<a name="1959"><q-n>     1959  </q-n></a>    endfunction: new
<a name="1960"><q-n>     1960  </q-n></a>    function void build_phase(uvm_phase phase);
<a name="1961"><q-n>     1961  </q-n></a>        super.build_phase(phase);
<a name="1962"><q-n>     1962  </q-n></a>                item_collected_port    = new(.name("item_collected_port"),.parent(this));
<a name="1963"><q-n>     1963  </q-n></a>        if (!uvm_config_db#(axi4_stream_agents_config)::get(.cntxt(this),.inst_name(""),.field_name("axi4_stream_cfg"),.value(axi4_stream_cfg)))begin
<a name="1964"><q-n>     1964  </q-n></a>            `uvm_error("axi4_stream_agents_config", "axi4_stream_cfg not found")
<a name="1965"><q-n>     1965  </q-n></a>        end
<a name="1966"><q-n>     1966  </q-n></a>        if (axi4_stream_cfg.has_axi4_agent1) begin
<a name="1967"><q-n>     1967  </q-n></a>            uvm_config_db#(axi4_stream_config)::set(.cntxt(this),.inst_name("axi4_stream_master_agt"),.field_name("axi4_stream_master_cfg"),.value(axi4_stream_cfg.axi4_agent_handler1));
<a name="1968"><q-n>     1968  </q-n></a>            axi4_stream_master_agt=axi4_stream_master_agent::type_id::create(.name("axi4_stream_master_agt"),.parent(this));
<a name="1969"><q-n>     1969  </q-n></a>            uvm_config_db#(axi4_stream_config)::set(.cntxt(this),.inst_name("axi4_stream_slave_agt"),.field_name("axi4_stream_slave_cfg"),.value(axi4_stream_cfg.axi4_agent_handler1));
<a name="1970"><q-n>     1970  </q-n></a>            axi4_stream_slave_agt=axi4_stream_slave_agent::type_id::create(.name("axi4_stream_slave_agt"),.parent(this));
<a name="1971"><q-n>     1971  </q-n></a>            uvm_config_db#(axi4_stream_config)::set(.cntxt(this),.inst_name("monitor"),.field_name("axi4_stream_cfg"),.value(axi4_stream_cfg.axi4_agent_handler1));
<a name="1972"><q-n>     1972  </q-n></a>            monitor=axi4_stream_monitor::type_id::create(.name("monitor"),.parent(this));
<a name="1973"><q-n>     1973  </q-n></a>            uvm_config_db#(axi4_stream_config)::set(.cntxt(this),.inst_name("axi4_req"),.field_name("axi4_stream_cfg"),.value(axi4_stream_cfg.axi4_agent_handler1));
<a name="1974"><q-n>     1974  </q-n></a>            axi4_req=axi4_stream_ax_monitor::type_id::create(.name("axi4_req"),.parent(this));
<a name="1975"><q-n>     1975  </q-n></a>            //uvm_config_db#(axi4_stream_config)::set(.cntxt(this),.inst_name("monitor"),.field_name("axi4_stream_slave_cfg"),.value(axi4_stream_cfg.axi4_agent_handler1));
<a name="1976"><q-n>     1976  </q-n></a>            //monitor=axi4_stream_slave_agent::type_id::create(.name("monitor"),.parent(this));
<a name="1977"><q-n>     1977  </q-n></a>            //uvm_config_db#(axi4_stream_config)::set(.cntxt(this),.inst_name("monitor"),.field_name("axi4_stream_slave_cfg"),.value(axi4_stream_cfg.axi4_agent_handler1));
<a name="1978"><q-n>     1978  </q-n></a>            //monitor=axi4_stream_monitor::type_id::create(.name("monitor"),.parent(this));
<a name="1979"><q-n>     1979  </q-n></a>            //uvm_config_db#(axi4_stream_config)::set(this, "monitor",.field_name("axi4_stream_slave_cfg"),.value(axi4_stream_cfg.axi4_agent_handler1));
<a name="1980"><q-n>     1980  </q-n></a>        end
<a name="1981"><q-n>     1981  </q-n></a>    endfunction: build_phase
<a name="1982"><q-n>     1982  </q-n></a>    function void connect_phase(uvm_phase phase);
<a name="1983"><q-n>     1983  </q-n></a>       // axi4_stream_ax_monitor	 axi4_ax_req_mon;
<a name="1984"><q-n>     1984  </q-n></a>        super.connect_phase(phase);
<a name="1985"><q-n>     1985  </q-n></a>        monitor.axi4s_vif    = axi4_stream_cfg.axi4_agent_handler1.axi4s_vif;
<a name="1986"><q-n>     1986  </q-n></a>        //axi4_req    = axi4_stream_cfg.axi4_agent_handler1.axi4s_vif;
<a name="1987"><q-n>     1987  </q-n></a>        //monitor.item_collected_port.connect(item_collected_port);
<a name="1988"><q-n>     1988  </q-n></a>        //axi4_req.item_collected_port.connect(axi4_ax_req_mon.axi4_port);	
<a name="1989"><q-n>     1989  </q-n></a>        //axi4_req.item_collected_port.connect(axi4_stream_cfg.axi4_agent_handler1.axi4s_vif);
<a name="1990"><q-n>     1990  </q-n></a>        //monitor.axi4s_vif    = axi4_stream_master_agt.axi4s_vif;
<a name="1991"><q-n>     1991  </q-n></a>    endfunction: connect_phase
<a name="1992"><q-n>     1992  </q-n></a>endclass: axi4_stream_env
<a name="1993"><q-n>     1993  </q-n></a>//====================================================================================
<a name="1994"><q-n>     1994  </q-n></a>//------------------------------------------------------------------------------------
<a name="1995"><q-n>     1995  </q-n></a>//--------------------------------- UVM_TESTS
<a name="1996"><q-n>     1996  </q-n></a>//------------------------------------------------------------------------------------
<a name="1997"><q-n>     1997  </q-n></a>//====================================================================================
<a name="1998"><q-n>     1998  </q-n></a>// UVM_TEST : TEMPLATE_TEST [TEMPLATE]
<a name="1999"><q-n>     1999  </q-n></a>class template_test extends uvm_test;
<a name="2000"><q-n>     2000  </q-n></a>    `uvm_component_utils(template_test)
<a name="2001"><q-n>     2001  </q-n></a>    template_env sa_env;
<a name="2002"><q-n>     2002  </q-n></a>    function new(string name, uvm_component parent);
<a name="2003"><q-n>     2003  </q-n></a>        super.new(name, parent);
<a name="2004"><q-n>     2004  </q-n></a>    endfunction: new
<a name="2005"><q-n>     2005  </q-n></a>    function void build_phase(uvm_phase phase);
<a name="2006"><q-n>     2006  </q-n></a>        super.build_phase(phase);
<a name="2007"><q-n>     2007  </q-n></a>        sa_env = template_env::type_id::create(.name("sa_env"), .parent(this));
<a name="2008"><q-n>     2008  </q-n></a>    endfunction: build_phase
<a name="2009"><q-n>     2009  </q-n></a>    function void end_of_elaboration_phase(uvm_phase phase);
<a name="2010"><q-n>     2010  </q-n></a>        super.end_of_elaboration_phase(phase);
<a name="2011"><q-n>     2011  </q-n></a>        this.print();
<a name="2012"><q-n>     2012  </q-n></a>        factory.print();
<a name="2013"><q-n>     2013  </q-n></a>    endfunction
<a name="2014"><q-n>     2014  </q-n></a>    task run_phase(uvm_phase phase);
<a name="2015"><q-n>     2015  </q-n></a>        template_sequence sa_seq;
<a name="2016"><q-n>     2016  </q-n></a>        phase.raise_objection(.obj(this));
<a name="2017"><q-n>     2017  </q-n></a>            sa_seq = template_sequence::type_id::create(.name("sa_seq"), .contxt(get_full_name()));
<a name="2018"><q-n>     2018  </q-n></a>            assert(sa_seq.randomize());
<a name="2019"><q-n>     2019  </q-n></a>        sa_seq.start(sa_env.sa_agent.sa_seqr);
<a name="2020"><q-n>     2020  </q-n></a>        phase.drop_objection(.obj(this));
<a name="2021"><q-n>     2021  </q-n></a>    endtask: run_phase
<a name="2022"><q-n>     2022  </q-n></a>endclass: template_test
<a name="2023"><q-n>     2023  </q-n></a>// UVM_TEST : AXILITE_TEST [AXI4_LITE]
<a name="2024"><q-n>     2024  </q-n></a>class axiLite_test extends uvm_test;
<a name="2025"><q-n>     2025  </q-n></a>    `uvm_component_utils(axiLite_test)
<a name="2026"><q-n>     2026  </q-n></a>    template_env aL_env;
<a name="2027"><q-n>     2027  </q-n></a>    function new(string name, uvm_component parent);
<a name="2028"><q-n>     2028  </q-n></a>        super.new(name, parent);
<a name="2029"><q-n>     2029  </q-n></a>    endfunction: new
<a name="2030"><q-n>     2030  </q-n></a>    function void build_phase(uvm_phase phase);
<a name="2031"><q-n>     2031  </q-n></a>        super.build_phase(phase);
<a name="2032"><q-n>     2032  </q-n></a>        begin
<a name="2033"><q-n>     2033  </q-n></a>            axiLite_configuration axiLite_cfg;
<a name="2034"><q-n>     2034  </q-n></a>            axiLite_cfg = new;
<a name="2035"><q-n>     2035  </q-n></a>            assert(axiLite_cfg.randomize());
<a name="2036"><q-n>     2036  </q-n></a>            uvm_config_db#(axiLite_configuration)::set(.cntxt(this),.inst_name("*"),.field_name("config"),.value(axiLite_cfg));
<a name="2037"><q-n>     2037  </q-n></a>            aL_env = template_env::type_id::create(.name("aL_env"),.parent(this));
<a name="2038"><q-n>     2038  </q-n></a>        end
<a name="2039"><q-n>     2039  </q-n></a>    endfunction: build_phase
<a name="2040"><q-n>     2040  </q-n></a>    function void end_of_elaboration_phase(uvm_phase phase);
<a name="2041"><q-n>     2041  </q-n></a>        super.end_of_elaboration_phase(phase);
<a name="2042"><q-n>     2042  </q-n></a>        this.print();
<a name="2043"><q-n>     2043  </q-n></a>        factory.print();
<a name="2044"><q-n>     2044  </q-n></a>    endfunction
<a name="2045"><q-n>     2045  </q-n></a>    task run_phase(uvm_phase phase);
<a name="2046"><q-n>     2046  </q-n></a>        axiLite_directed_sequence    axiLite_seq;
<a name="2047"><q-n>     2047  </q-n></a>        phase.raise_objection(.obj(this));
<a name="2048"><q-n>     2048  </q-n></a>        axiLite_seq = axiLite_directed_sequence::type_id::create(.name("axiLite_seq"));
<a name="2049"><q-n>     2049  </q-n></a>        assert(axiLite_seq.randomize());
<a name="2050"><q-n>     2050  </q-n></a>        `uvm_info("aL_env", { "\n", axiLite_seq.sprint() }, UVM_LOW)
<a name="2051"><q-n>     2051  </q-n></a>        axiLite_seq.start(aL_env.aL_agt.aL_sqr);
<a name="2052"><q-n>     2052  </q-n></a>        phase.drop_objection(.obj(this));
<a name="2053"><q-n>     2053  </q-n></a>    endtask: run_phase
<a name="2054"><q-n>     2054  </q-n></a>endclass: axiLite_test
<a name="2055"><q-n>     2055  </q-n></a>// UVM_TEST : RGB_TEST1 [RGB]
<a name="2056"><q-n>     2056  </q-n></a>class rgb_test1 extends uvm_test;
<a name="2057"><q-n>     2057  </q-n></a>    `uvm_component_utils(rgb_test1)
<a name="2058"><q-n>     2058  </q-n></a>    template_env frame_env;
<a name="2059"><q-n>     2059  </q-n></a>    function new(string name, uvm_component parent);
<a name="2060"><q-n>     2060  </q-n></a>        super.new(name, parent);
<a name="2061"><q-n>     2061  </q-n></a>    endfunction
<a name="2062"><q-n>     2062  </q-n></a>    function void build_phase(uvm_phase phase);
<a name="2063"><q-n>     2063  </q-n></a>        super.build_phase(phase);
<a name="2064"><q-n>     2064  </q-n></a>        begin
<a name="2065"><q-n>     2065  </q-n></a>            rgb_configuration frame_cfg;
<a name="2066"><q-n>     2066  </q-n></a>            frame_cfg = new;
<a name="2067"><q-n>     2067  </q-n></a>            assert(frame_cfg.randomize());
<a name="2068"><q-n>     2068  </q-n></a>            uvm_config_db#(rgb_configuration)::set(.cntxt(this),.inst_name("*"),.field_name("config"),.value(frame_cfg));
<a name="2069"><q-n>     2069  </q-n></a>            frame_env = template_env::type_id::create(.name("frame_env"),.parent(this));
<a name="2070"><q-n>     2070  </q-n></a>        end
<a name="2071"><q-n>     2071  </q-n></a>    endfunction: build_phase
<a name="2072"><q-n>     2072  </q-n></a>    task run_phase(uvm_phase phase);
<a name="2073"><q-n>     2073  </q-n></a>        top_sequence        random_sqr;
<a name="2074"><q-n>     2074  </q-n></a>        uvm_component       component;
<a name="2075"><q-n>     2075  </q-n></a>        rgb_sequencer       sequencer;
<a name="2076"><q-n>     2076  </q-n></a>        random_sqr = top_sequence::type_id::create("random_sqr");
<a name="2077"><q-n>     2077  </q-n></a>        if( !random_sqr.randomize() ) 
<a name="2078"><q-n>     2078  </q-n></a>            `uvm_error("", "Randomize failed")
<a name="2079"><q-n>     2079  </q-n></a>        random_sqr.starting_phase = phase;
<a name="2080"><q-n>     2080  </q-n></a>        component = uvm_top.find("*.frame_seqr");
<a name="2081"><q-n>     2081  </q-n></a>        if ($cast(sequencer, component))
<a name="2082"><q-n>     2082  </q-n></a>            random_sqr.start(sequencer);
<a name="2083"><q-n>     2083  </q-n></a>    endtask: run_phase
<a name="2084"><q-n>     2084  </q-n></a>endclass: rgb_test1
<a name="2085"><q-n>     2085  </q-n></a>// UVM_TEST : RGB_TEST2 [RGB]
<a name="2086"><q-n>     2086  </q-n></a>class rgb_test2 extends rgb_test1;
<a name="2087"><q-n>     2087  </q-n></a>    `uvm_component_utils(rgb_test2)
<a name="2088"><q-n>     2088  </q-n></a>    function new (string name, uvm_component parent);
<a name="2089"><q-n>     2089  </q-n></a>        super.new(name, parent);
<a name="2090"><q-n>     2090  </q-n></a>    endfunction : new
<a name="2091"><q-n>     2091  </q-n></a>    function void start_of_simulation_phase(uvm_phase phase);
<a name="2092"><q-n>     2092  </q-n></a>        super.start_of_simulation_phase(phase);
<a name="2093"><q-n>     2093  </q-n></a>        random_sequence_r1#(par_1)::type_id::set_type_override(random_sequence_r2::get_type());
<a name="2094"><q-n>     2094  </q-n></a>    endfunction : start_of_simulation_phase
<a name="2095"><q-n>     2095  </q-n></a>endclass: rgb_test2
<a name="2096"><q-n>     2096  </q-n></a>class rgb_test extends uvm_test;
<a name="2097"><q-n>     2097  </q-n></a>    `uvm_component_utils(rgb_test)
<a name="2098"><q-n>     2098  </q-n></a>    template_env frame_env;
<a name="2099"><q-n>     2099  </q-n></a>    rgb_agent#(par_1) frame_agent;
<a name="2100"><q-n>     2100  </q-n></a>    rgb_agent#(par_2) frame_agent_b;
<a name="2101"><q-n>     2101  </q-n></a>    rgb_agent#(par_3) frame_agent_cs[4];
<a name="2102"><q-n>     2102  </q-n></a>    function new(string name, uvm_component parent);
<a name="2103"><q-n>     2103  </q-n></a>        super.new(name, parent);
<a name="2104"><q-n>     2104  </q-n></a>    endfunction
<a name="2105"><q-n>     2105  </q-n></a>    function void build_phase(uvm_phase phase);
<a name="2106"><q-n>     2106  </q-n></a>        super.build_phase(phase);
<a name="2107"><q-n>     2107  </q-n></a>        begin
<a name="2108"><q-n>     2108  </q-n></a>            rgb_configuration frame_cfg;
<a name="2109"><q-n>     2109  </q-n></a>            frame_cfg = new;
<a name="2110"><q-n>     2110  </q-n></a>            assert(frame_cfg.randomize());
<a name="2111"><q-n>     2111  </q-n></a>            uvm_config_db#(rgb_configuration)::set(.cntxt(this),.inst_name("*"),.field_name("config"),.value(frame_cfg));
<a name="2112"><q-n>     2112  </q-n></a>            frame_env       = template_env::type_id::create(.name("frame_env"),.parent(this));
<a name="2113"><q-n>     2113  </q-n></a>            frame_agent     = rgb_agent#(par_1)::type_id::create("frame_agent", this);
<a name="2114"><q-n>     2114  </q-n></a>            frame_agent_b   = rgb_agent#(par_2)::type_id::create("frame_agent_b", this);
<a name="2115"><q-n>     2115  </q-n></a>            foreach (frame_agent_cs[i])
<a name="2116"><q-n>     2116  </q-n></a>                frame_agent_cs[i] = rgb_agent#(par_3)::type_id::create($sformatf("frame_agent_cs_%0d", i), this);
<a name="2117"><q-n>     2117  </q-n></a>        end
<a name="2118"><q-n>     2118  </q-n></a>    endfunction: build_phase
<a name="2119"><q-n>     2119  </q-n></a>   function void end_of_elaboration_phase(uvm_phase phase);
<a name="2120"><q-n>     2120  </q-n></a>      uvm_phase run_phase = uvm_run_phase::get();
<a name="2121"><q-n>     2121  </q-n></a>      run_phase.phase_done.set_drain_time(this, 100us);
<a name="2122"><q-n>     2122  </q-n></a>      frame_agent.frame_mon.agent_id = 0;
<a name="2123"><q-n>     2123  </q-n></a>      frame_agent_b.frame_mon.agent_id = 1;
<a name="2124"><q-n>     2124  </q-n></a>      foreach (frame_agent_cs[i])
<a name="2125"><q-n>     2125  </q-n></a>        frame_agent_cs[i].frame_mon.agent_id = i + 2;
<a name="2126"><q-n>     2126  </q-n></a>        this.print();
<a name="2127"><q-n>     2127  </q-n></a>        factory.print();
<a name="2128"><q-n>     2128  </q-n></a>   endfunction
<a name="2129"><q-n>     2129  </q-n></a>   task run_phase(uvm_phase phase);
<a name="2130"><q-n>     2130  </q-n></a>      super.run_phase(phase);
<a name="2131"><q-n>     2131  </q-n></a>      phase.raise_objection(this);
<a name="2132"><q-n>     2132  </q-n></a>      fork
<a name="2133"><q-n>     2133  </q-n></a>         repeat (3) begin
<a name="2134"><q-n>     2134  </q-n></a>            rgb_random_sequence#(par_1) rgb_seq_a = rgb_random_sequence#(par_1)::type_id::create("rgb_seq_a");
<a name="2135"><q-n>     2135  </q-n></a>            rgb_seq_a.start(frame_env.frame_agent.frame_seqr);
<a name="2136"><q-n>     2136  </q-n></a>         end
<a name="2137"><q-n>     2137  </q-n></a>         repeat (3) begin
<a name="2138"><q-n>     2138  </q-n></a>            rgb_random_sequence#(par_2) rgb_seq_b = rgb_random_sequence#(par_2)::type_id::create("rgb_seq_b");
<a name="2139"><q-n>     2139  </q-n></a>            rgb_seq_b.start(frame_agent_b.frame_seqr);
<a name="2140"><q-n>     2140  </q-n></a>         end
<a name="2141"><q-n>     2141  </q-n></a>         begin
<a name="2142"><q-n>     2142  </q-n></a>            foreach (frame_agent_cs[i])
<a name="2143"><q-n>     2143  </q-n></a>               fork
<a name="2144"><q-n>     2144  </q-n></a>                  automatic int unsigned agent_id = i;
<a name="2145"><q-n>     2145  </q-n></a>                  repeat (3) begin
<a name="2146"><q-n>     2146  </q-n></a>                     rgb_random_sequence#(par_3) rgb_seq_c = rgb_random_sequence#(par_3)::type_id::create("rgb_seq_c");
<a name="2147"><q-n>     2147  </q-n></a>                     rgb_seq_c.start(frame_agent_cs[agent_id].frame_seqr);
<a name="2148"><q-n>     2148  </q-n></a>                  end
<a name="2149"><q-n>     2149  </q-n></a>               join_none
<a name="2150"><q-n>     2150  </q-n></a>            wait fork;
<a name="2151"><q-n>     2151  </q-n></a>         end
<a name="2152"><q-n>     2152  </q-n></a>      join
<a name="2153"><q-n>     2153  </q-n></a>      phase.drop_objection(this);
<a name="2154"><q-n>     2154  </q-n></a>   endtask
<a name="2155"><q-n>     2155  </q-n></a>// task run_phase(uvm_phase phase);
<a name="2156"><q-n>     2156  </q-n></a>    // rgb_random_sequence#(par_1)    random_sqr;
<a name="2157"><q-n>     2157  </q-n></a>    // phase.raise_objection(.obj(this));
<a name="2158"><q-n>     2158  </q-n></a>    // random_sqr = rgb_random_sequence#(par_1)::type_id::create(.name("random_sqr"));
<a name="2159"><q-n>     2159  </q-n></a>    // assert(random_sqr.randomize());
<a name="2160"><q-n>     2160  </q-n></a>    // `uvm_info("aL_env", { "\n", random_sqr.sprint() }, UVM_LOW)
<a name="2161"><q-n>     2161  </q-n></a>    // random_sqr.start(frame_env.frame_agent.frame_seqr);
<a name="2162"><q-n>     2162  </q-n></a>    // phase.drop_objection(.obj(this));
<a name="2163"><q-n>     2163  </q-n></a>// endtask: run_phase
<a name="2164"><q-n>     2164  </q-n></a>endclass: rgb_test
<a name="2165"><q-n>     2165  </q-n></a>class axi4_stream_test extends uvm_test;
<a name="2166"><q-n>     2166  </q-n></a>    `uvm_component_utils(axi4_stream_test)
<a name="2167"><q-n>     2167  </q-n></a>    axi4_stream_env             axi4_env;
<a name="2168"><q-n>     2168  </q-n></a>    axi4_stream_agents_config   axi4_stream_cfg;
<a name="2169"><q-n>     2169  </q-n></a>    axi4_stream_config          axi4_agent_handler1;
<a name="2170"><q-n>     2170  </q-n></a>    function new(string name, uvm_component parent);
<a name="2171"><q-n>     2171  </q-n></a>        super.new(name, parent);
<a name="2172"><q-n>     2172  </q-n></a>    endfunction: new
<a name="2173"><q-n>     2173  </q-n></a>    function void build_phase(uvm_phase phase);
<a name="2174"><q-n>     2174  </q-n></a>        super.build_phase(phase);
<a name="2175"><q-n>     2175  </q-n></a>        axi4_env        = axi4_stream_env            ::type_id::create(.name("axi4_env"), .parent(this));
<a name="2176"><q-n>     2176  </q-n></a>        axi4_stream_cfg        = axi4_stream_agents_config  ::type_id::create("axi4_stream_cfg");
<a name="2177"><q-n>     2177  </q-n></a>        axi4_agent_handler1 = axi4_stream_config         ::type_id::create("axi4_agent_handler1");
<a name="2178"><q-n>     2178  </q-n></a>        if (! uvm_config_db#(virtual axi4s_if) ::get(.cntxt(this),.inst_name(""),.field_name("axi4s_vif"),.value(axi4_agent_handler1.axi4s_vif))) begin
<a name="2179"><q-n>     2179  </q-n></a>            `uvm_error("axi4s_if", "axi4s_vif not found")
<a name="2180"><q-n>     2180  </q-n></a>        end
<a name="2181"><q-n>     2181  </q-n></a>        axi4_stream_cfg.axi4_agent_handler1 = axi4_agent_handler1;
<a name="2182"><q-n>     2182  </q-n></a>        uvm_config_db#(axi4_stream_agents_config)::set(.cntxt(this),.inst_name("*"),.field_name("axi4_stream_cfg"),.value(axi4_stream_cfg));
<a name="2183"><q-n>     2183  </q-n></a>    endfunction: build_phase
<a name="2184"><q-n>     2184  </q-n></a>    function void end_of_elaboration_phase(uvm_phase phase);
<a name="2185"><q-n>     2185  </q-n></a>        super.end_of_elaboration_phase(phase);
<a name="2186"><q-n>     2186  </q-n></a>        this.print();
<a name="2187"><q-n>     2187  </q-n></a>        factory.print();
<a name="2188"><q-n>     2188  </q-n></a>    endfunction
<a name="2189"><q-n>     2189  </q-n></a>    task run_phase(uvm_phase phase);
<a name="2190"><q-n>     2190  </q-n></a>        axi4_stream_master_sequence axi4_sequencer;
<a name="2191"><q-n>     2191  </q-n></a>        phase.raise_objection(.obj(this));
<a name="2192"><q-n>     2192  </q-n></a>            axi4_sequencer = axi4_stream_master_sequence::type_id::create(.name("axi4_sequencer"), .contxt(get_full_name()));
<a name="2193"><q-n>     2193  </q-n></a>            assert(axi4_sequencer.randomize());
<a name="2194"><q-n>     2194  </q-n></a>        axi4_sequencer.start(axi4_env.axi4_stream_master_agt.axi_sequencer);
<a name="2195"><q-n>     2195  </q-n></a>        phase.drop_objection(.obj(this));
<a name="2196"><q-n>     2196  </q-n></a>    endtask: run_phase
<a name="2197"><q-n>     2197  </q-n></a>endclass: axi4_stream_test
<a name="2198"><q-n>     2198  </q-n></a>endpackage: socTest_pkg
<a name="2199"><q-n>     2199  </q-n></a>//====================================================================================
<a name="2200"><q-n>     2200  </q-n></a>//------------------------------------------------------------------------------------
<a name="2201"><q-n>     2201  </q-n></a>//--------------------------------- INTERFACES
<a name="2202"><q-n>     2202  </q-n></a>//------------------------------------------------------------------------------------
<a name="2203"><q-n>     2203  </q-n></a>//====================================================================================
<a name="2204"><q-n>     2204  </q-n></a>// INTERFACE : TEMPLATE_IF [TEMPLATE]
<a name="2205"><q-n>     2205  </q-n></a>interface tp_if;
<a name="2206"><q-n>     2206  </q-n></a>    logic        sig_clock;
<a name="2207"><q-n>     2207  </q-n></a>    logic        sig_ina;
<a name="2208"><q-n>     2208  </q-n></a>    logic        sig_inb;
<a name="2209"><q-n>     2209  </q-n></a>    logic        sig_en_i;
<a name="2210"><q-n>     2210  </q-n></a>    logic        sig_en_o;
<a name="2211"><q-n>     2211  </q-n></a>    logic        sig_out;
<a name="2212"><q-n>     2212  </q-n></a>    modport      templateSlave (input sig_clock,sig_ina,sig_inb,sig_en_i,output sig_en_o,sig_out);
<a name="2213"><q-n>     2213  </q-n></a>endinterface: tp_if
<a name="2214"><q-n>     2214  </q-n></a>// INTERFACE : AXILITE_IF [AXI4_LITE]
<a name="2215"><q-n>     2215  </q-n></a>interface axi4l_if(input bit ACLK,ARESETN);
<a name="2216"><q-n>     2216  </q-n></a>    logic [7:0]     AWADDR;
<a name="2217"><q-n>     2217  </q-n></a>    logic [ 2:0]    AWPROT;
<a name="2218"><q-n>     2218  </q-n></a>    logic           AWVALID;
<a name="2219"><q-n>     2219  </q-n></a>    logic           AWREADY;
<a name="2220"><q-n>     2220  </q-n></a>    logic [31:0]    WDATA;
<a name="2221"><q-n>     2221  </q-n></a>    logic [ 3:0]    WSTRB;
<a name="2222"><q-n>     2222  </q-n></a>    logic           WVALID;
<a name="2223"><q-n>     2223  </q-n></a>    logic           WREADY;
<a name="2224"><q-n>     2224  </q-n></a>    logic [1:0]     BRESP;
<a name="2225"><q-n>     2225  </q-n></a>    logic           BVALID;
<a name="2226"><q-n>     2226  </q-n></a>    logic           BREADY;
<a name="2227"><q-n>     2227  </q-n></a>    logic [7:0]     ARADDR;
<a name="2228"><q-n>     2228  </q-n></a>    logic [ 2:0]    ARPROT;
<a name="2229"><q-n>     2229  </q-n></a>    logic           ARVALID;
<a name="2230"><q-n>     2230  </q-n></a>    logic           ARREADY;
<a name="2231"><q-n>     2231  </q-n></a>    logic [31:0]    RDATA;
<a name="2232"><q-n>     2232  </q-n></a>    logic [ 1:0]    RRESP;
<a name="2233"><q-n>     2233  </q-n></a>    logic           RVALID;
<a name="2234"><q-n>     2234  </q-n></a>    logic           RREADY;
<a name="2235"><q-n>     2235  </q-n></a>    modport         ConfigMaster(input ACLK,ARESETN,AWADDR,AWPROT,AWVALID,WDATA,WSTRB,WVALID,BREADY,ARADDR,ARPROT,ARVALID,RREADY, output  AWREADY,ARREADY,RDATA,RRESP,RVALID,WREADY,BRESP,BVALID);
<a name="2236"><q-n>     2236  </q-n></a>endinterface: axi4l_if
<a name="2237"><q-n>     2237  </q-n></a>// INTERFACE : RGB_IF [RGB]
<a name="2238"><q-n>     2238  </q-n></a>interface rgb_if(input bit clk);
<a name="2239"><q-n>     2239  </q-n></a>    logic [7:0]  iRed;
<a name="2240"><q-n>     2240  </q-n></a>    logic [7:0]  iGreen;
<a name="2241"><q-n>     2241  </q-n></a>    logic [7:0]  iBlue;
<a name="2242"><q-n>     2242  </q-n></a>    logic        iValid;
<a name="2243"><q-n>     2243  </q-n></a>    logic        iPixelEn;
<a name="2244"><q-n>     2244  </q-n></a>    logic        iEof;
<a name="2245"><q-n>     2245  </q-n></a>    int unsigned iX;
<a name="2246"><q-n>     2246  </q-n></a>    int unsigned iY;
<a name="2247"><q-n>     2247  </q-n></a>    logic [7:0]  oRed;
<a name="2248"><q-n>     2248  </q-n></a>    logic [7:0]  oGreen;
<a name="2249"><q-n>     2249  </q-n></a>    logic [7:0]  oBlue;
<a name="2250"><q-n>     2250  </q-n></a>    logic        oValid;
<a name="2251"><q-n>     2251  </q-n></a>    clocking master_cb @ (posedge clk);
<a name="2252"><q-n>     2252  </q-n></a>        default input #1step output #1ns;
<a name="2253"><q-n>     2253  </q-n></a>        output iPixelEn,iX,iY,iRed,iGreen,iBlue,iValid,iEof;
<a name="2254"><q-n>     2254  </q-n></a>        input  oRed;
<a name="2255"><q-n>     2255  </q-n></a>    endclocking: master_cb
<a name="2256"><q-n>     2256  </q-n></a>    clocking slave_cb @ (posedge clk);
<a name="2257"><q-n>     2257  </q-n></a>        default input #1step output #1ns;
<a name="2258"><q-n>     2258  </q-n></a>        input  iX,iY,iRed,iGreen,iBlue,iPixelEn,iValid,iEof;
<a name="2259"><q-n>     2259  </q-n></a>        output oRed;
<a name="2260"><q-n>     2260  </q-n></a>    endclocking: slave_cb
<a name="2261"><q-n>     2261  </q-n></a>    modport master_mp(input clk, output  oRed,oGreen,oBlue,oValid);
<a name="2262"><q-n>     2262  </q-n></a>    modport slave_mp (input clk,iRed,iGreen,iBlue,iValid,iPixelEn,iEof,iX,iY,output oRed,oGreen,oBlue,oValid);
<a name="2263"><q-n>     2263  </q-n></a>    modport master_sync_mp(clocking master_cb);
<a name="2264"><q-n>     2264  </q-n></a>    modport slave_sync_mp (clocking slave_cb);
<a name="2265"><q-n>     2265  </q-n></a>endinterface: rgb_if
<a name="2266"><q-n>     2266  </q-n></a>interface axi4s_if(input bit ACLK,ARESET_N);
<a name="2267"><q-n>     2267  </q-n></a>    parameter DATA_BYTES = 16;
<a name="2268"><q-n>     2268  </q-n></a>	logic TVALID;	// Master valid
<a name="2269"><q-n>     2269  </q-n></a>	logic TLAST;	// Master TLAST
<a name="2270"><q-n>     2270  </q-n></a>	logic TREADY;	// Slave ready
<a name="2271"><q-n>     2271  </q-n></a>	logic [DATA_BYTES-1:0] TDATA;	//-- Master data
<a name="2272"><q-n>     2272  </q-n></a>	logic TUSER;	//-- Master sideband signals
<a name="2273"><q-n>     2273  </q-n></a>	//--
<a name="2274"><q-n>     2274  </q-n></a>    //--DEBUG signals
<a name="2275"><q-n>     2275  </q-n></a>    //--
<a name="2276"><q-n>     2276  </q-n></a>	//logic [DATA_BYTES/16-1:0] DEBUG_VALIDS;		//-- contains the AX-VALID Flags
<a name="2277"><q-n>     2277  </q-n></a>	//logic [DATA_BYTES/16-1:0] DEBUG_HEADERS;	//-- contains the AX-HEADER Flags
<a name="2278"><q-n>     2278  </q-n></a>	//logic [DATA_BYTES/16-1:0] DEBUG_TAILS;		//-- contains the AX-TAIL Flags
<a name="2279"><q-n>     2279  </q-n></a>	////-- assigning the debug signals to TUSER
<a name="2280"><q-n>     2280  </q-n></a>	//assign DEBUG_VALIDS     = (DATA_BYTES /16)-1: (DATA_BYTES /16);
<a name="2281"><q-n>     2281  </q-n></a>	//assign DEBUG_HEADERS    = (DATA_BYTES /16)-1: (DATA_BYTES /16);
<a name="2282"><q-n>     2282  </q-n></a>	//assign DEBUG_TAILS      = (DATA_BYTES /16)-1: (DATA_BYTES /16);
<a name="2283"><q-n>     2283  </q-n></a>	//--
<a name="2284"><q-n>     2284  </q-n></a>	//-- Interface Coverage
<a name="2285"><q-n>     2285  </q-n></a>	//--
<a name="2286"><q-n>     2286  </q-n></a>	covergroup axi4_cg @ (posedge ACLK);
<a name="2287"><q-n>     2287  </q-n></a>		option.per_instance = 1;
<a name="2288"><q-n>     2288  </q-n></a>		T_VALID : coverpoint TVALID;
<a name="2289"><q-n>     2289  </q-n></a>		T_READY : coverpoint TREADY;
<a name="2290"><q-n>     2290  </q-n></a>		//-- cover the amount of consecutive AXI4 transactions
<a name="2291"><q-n>     2291  </q-n></a>		CONSECUTIVE_TRANSACTIONS: coverpoint {TVALID , TREADY}{
<a name="2292"><q-n>     2292  </q-n></a>			bins transactions_single	= (0,1,2 =&gt;3			=&gt; 0,1,2);
<a name="2293"><q-n>     2293  </q-n></a>			bins transactions_1_5[] 	= (0,1,2 =&gt;3[*2:10] 	=&gt; 0,1,2);
<a name="2294"><q-n>     2294  </q-n></a>			bins transactions_11_50[] 	= (0,1,2 =&gt;3[*11:50]	=&gt; 0,1,2);
<a name="2295"><q-n>     2295  </q-n></a>			bins transactions_huge 		= (0,1,2 =&gt;3[*51:100000]=&gt; 0,1,2);
<a name="2296"><q-n>     2296  </q-n></a>		}
<a name="2297"><q-n>     2297  </q-n></a>		//-- cover the waiting time after TVALID is set until TREADY in clock cycles
<a name="2298"><q-n>     2298  </q-n></a>		TRANSACTION_WAITING: coverpoint {TVALID , TREADY}{
<a name="2299"><q-n>     2299  </q-n></a>			bins zero_waiting_time		= (0,1				=&gt; 3);
<a name="2300"><q-n>     2300  </q-n></a>			bins low_waiting_time[]		= (2[*1:5]			=&gt; 3);
<a name="2301"><q-n>     2301  </q-n></a>			bins medium_waiting_time[]	= (2[*6:15] 		=&gt; 3);
<a name="2302"><q-n>     2302  </q-n></a>			bins high_waiting_time		= (2[*16:100000] 	=&gt; 3);
<a name="2303"><q-n>     2303  </q-n></a>			illegal_bins illegal		= (2				=&gt; 0);
<a name="2304"><q-n>     2304  </q-n></a>		}
<a name="2305"><q-n>     2305  </q-n></a>		//-- Pause between Transactions
<a name="2306"><q-n>     2306  </q-n></a>		TRANSACTION_PAUSE: coverpoint {TVALID , TREADY}{
<a name="2307"><q-n>     2307  </q-n></a>			bins low_waiting_time[]		= (3 =&gt; 0[*1:5]		=&gt; 2,3);
<a name="2308"><q-n>     2308  </q-n></a>			bins medium_waiting_time[]	= (3 =&gt; 0[*6:15] 	=&gt; 2,3);
<a name="2309"><q-n>     2309  </q-n></a>			bins high_waiting_time		= (3 =&gt; 0[*16:100] 	=&gt; 2,3);
<a name="2310"><q-n>     2310  </q-n></a>		}
<a name="2311"><q-n>     2311  </q-n></a>		//-- cover the time TREADY is active until deassertion or TVALID in clock cycles
<a name="2312"><q-n>     2312  </q-n></a>		READY_WITHOUT_VALID: coverpoint {TVALID , TREADY}{
<a name="2313"><q-n>     2313  </q-n></a>			bins short_ready_time[]		= (1[*1:5]  	=&gt; 3,0);
<a name="2314"><q-n>     2314  </q-n></a>			bins medium_ready_time[]	= (1[*6:15] 	=&gt; 3,0);
<a name="2315"><q-n>     2315  </q-n></a>			bins high_ready_time		= (1[*16:100000]=&gt; 3,0);
<a name="2316"><q-n>     2316  </q-n></a>		}
<a name="2317"><q-n>     2317  </q-n></a>		//--cover all available transitions of TVALID/TREADY
<a name="2318"><q-n>     2318  </q-n></a>		CASES_VALID_READY : cross T_VALID, T_READY;
<a name="2319"><q-n>     2319  </q-n></a>		TRANSITIONS: coverpoint {TVALID, TREADY}{
<a name="2320"><q-n>     2320  </q-n></a>			bins transition[] = ( 0,1,3 =&gt; [0:3]), (2 =&gt; 2,3) ;
<a name="2321"><q-n>     2321  </q-n></a>		}
<a name="2322"><q-n>     2322  </q-n></a>		//-- cover active VALID Flags
<a name="2323"><q-n>     2323  </q-n></a>		//VALID_FLAGS : coverpoint DEBUG_VALIDS;
<a name="2324"><q-n>     2324  </q-n></a>		//VALID_TRANSITIONS : coverpoint DEBUG_VALIDS {
<a name="2325"><q-n>     2325  </q-n></a>		//	bins transition [] = ( [1:(1&lt;&lt;($size(DEBUG_VALIDS))) -1] =&gt; [1:(1&lt;&lt;($size(DEBUG_VALIDS))) -1] );
<a name="2326"><q-n>     2326  </q-n></a>		//}
<a name="2327"><q-n>     2327  </q-n></a>		//-- cover active HEADER Flags
<a name="2328"><q-n>     2328  </q-n></a>		//HDR_FLAGS   : coverpoint DEBUG_HEADERS;
<a name="2329"><q-n>     2329  </q-n></a>		//HDR_TRANSITIONS : coverpoint DEBUG_HEADERS {
<a name="2330"><q-n>     2330  </q-n></a>		//	bins transition [] = ( [1:1&lt;&lt;($size(DEBUG_HEADERS)) -1] =&gt; [1:1&lt;&lt;($size(DEBUG_HEADERS)) -1] );
<a name="2331"><q-n>     2331  </q-n></a>		//}
<a name="2332"><q-n>     2332  </q-n></a>		////-- cover active TAIL Flags
<a name="2333"><q-n>     2333  </q-n></a>		//TAIL_FLAGS  : coverpoint DEBUG_TAILS;
<a name="2334"><q-n>     2334  </q-n></a>		//TAIL_TRANSITIONS : coverpoint DEBUG_TAILS {
<a name="2335"><q-n>     2335  </q-n></a>		//	bins transition [] = ( [1:1&lt;&lt;($size(DEBUG_TAILS)) -1] =&gt; [1:1&lt;&lt;($size(DEBUG_TAILS)) -1] );
<a name="2336"><q-n>     2336  </q-n></a>		//}
<a name="2337"><q-n>     2337  </q-n></a>		//CROSS_HDR_TAILS : cross HDR_FLAGS, TAIL_FLAGS;
<a name="2338"><q-n>     2338  </q-n></a>		//HDR_TAILS : coverpoint { DEBUG_HEADERS != {$size(DEBUG_HEADERS){1'b0}} ,DEBUG_TAILS != {$size(DEBUG_TAILS){1'b0}}   };
<a name="2339"><q-n>     2339  </q-n></a>	endgroup
<a name="2340"><q-n>     2340  </q-n></a>	//-- creating an instance of the covergroup
<a name="2341"><q-n>     2341  </q-n></a>	axi4_cg axi4 = new();
<a name="2342"><q-n>     2342  </q-n></a>	property reset_synchronous_deassert_p;
<a name="2343"><q-n>     2343  </q-n></a>		@(edge ACLK)
<a name="2344"><q-n>     2344  </q-n></a>		!ARESET_N |-&gt; ARESET_N[-&gt;1];
<a name="2345"><q-n>     2345  </q-n></a>	endproperty
<a name="2346"><q-n>     2346  </q-n></a>	// chk_reset_tvalid	: assert property (
<a name="2347"><q-n>     2347  </q-n></a>//	 	//-- TVALID must be inactive during Reset
<a name="2348"><q-n>     2348  </q-n></a>//	 	@(posedge ACLK)
<a name="2349"><q-n>     2349  </q-n></a>//	 	!ARESET_N |-&gt; TVALID == 1'b0
<a name="2350"><q-n>     2350  </q-n></a>//	 );
<a name="2351"><q-n>     2351  </q-n></a>	chk_valid_hold 		: assert property (
<a name="2352"><q-n>     2352  </q-n></a>		//-- if TVALID is set it must be active until TREADY
<a name="2353"><q-n>     2353  </q-n></a>		@(posedge ACLK) disable iff(!ARESET_N)
<a name="2354"><q-n>     2354  </q-n></a>		(TVALID == 1 &amp;&amp; TREADY == 0) |=&gt; (TVALID==1)
<a name="2355"><q-n>     2355  </q-n></a>	);
<a name="2356"><q-n>     2356  </q-n></a>	//chk_valid_headers 	: assert property (
<a name="2357"><q-n>     2357  </q-n></a>	//	//-- check if HEADER Flags are a subset of VALID Flags
<a name="2358"><q-n>     2358  </q-n></a>	//	@(posedge ACLK) disable iff (!ARESET_N)
<a name="2359"><q-n>     2359  </q-n></a>	//	(TVALID == 1'b1)    |-&gt; (DEBUG_VALIDS | DEBUG_HEADERS
<a name="2360"><q-n>     2360  </q-n></a>	//						  == DEBUG_VALIDS)
<a name="2361"><q-n>     2361  </q-n></a>	//);
<a name="2362"><q-n>     2362  </q-n></a>	//chk_valid_tails 	: assert property (
<a name="2363"><q-n>     2363  </q-n></a>	//	//-- check if TAIL Flags are a subset of VALID Flags
<a name="2364"><q-n>     2364  </q-n></a>	//	@(posedge ACLK) disable iff (!ARESET_N)
<a name="2365"><q-n>     2365  </q-n></a>	//	(TVALID == 1'b1)    |-&gt; (DEBUG_VALIDS | DEBUG_TAILS
<a name="2366"><q-n>     2366  </q-n></a>	//						  == DEBUG_VALIDS)
<a name="2367"><q-n>     2367  </q-n></a>	//);
<a name="2368"><q-n>     2368  </q-n></a>	//check_spanning_ax_pkts	: assert property (
<a name="2369"><q-n>     2369  </q-n></a>	//	//-- check that TVALID stays high if a ax_packet ranges over multiple axi cycles
<a name="2370"><q-n>     2370  </q-n></a>	//	//-- starts if more header than tails
<a name="2371"><q-n>     2371  </q-n></a>	//	//-- completes if more tails than header
<a name="2372"><q-n>     2372  </q-n></a>	//	@(posedge ACLK  )  disable iff (!ARESET_N)
<a name="2373"><q-n>     2373  </q-n></a>	//		(TVALID &amp;&amp;						( $countones(DEBUG_HEADERS) &gt; $countones(DEBUG_TAILS) ))
<a name="2374"><q-n>     2374  </q-n></a>	//		|=&gt;	(TVALID == 1) throughout 	( $countones(DEBUG_HEADERS) &lt; $countones(DEBUG_TAILS) )[-&gt;1]
<a name="2375"><q-n>     2375  </q-n></a>	//);
<a name="2376"><q-n>     2376  </q-n></a>	time clk_rise;
<a name="2377"><q-n>     2377  </q-n></a>	time reset_rise;
<a name="2378"><q-n>     2378  </q-n></a>	always @(posedge ACLK) begin	
<a name="2379"><q-n>     2379  </q-n></a>		if(ARESET_N == 0)
<a name="2380"><q-n>     2380  </q-n></a>			clk_rise &lt;= $time();
<a name="2381"><q-n>     2381  </q-n></a>	end
<a name="2382"><q-n>     2382  </q-n></a>	always @(posedge ARESET_N) begin
<a name="2383"><q-n>     2383  </q-n></a>		reset_rise &lt;= $time();
<a name="2384"><q-n>     2384  </q-n></a>	end
<a name="2385"><q-n>     2385  </q-n></a>	//TODO TODO ADD
<a name="2386"><q-n>     2386  </q-n></a>	// check_sync_reset : assert property (
<a name="2387"><q-n>     2387  </q-n></a>	// 	@(posedge ACLK)
<a name="2388"><q-n>     2388  </q-n></a>	// 	$rose(ARESET_N) |=&gt; (reset_rise == clk_rise)
<a name="2389"><q-n>     2389  </q-n></a>	// 	);
<a name="2390"><q-n>     2390  </q-n></a>	property data_hold_p;
<a name="2391"><q-n>     2391  </q-n></a>		//-- if TVALID is set TDATA must not be changed until TREADY
<a name="2392"><q-n>     2392  </q-n></a>		logic [DATA_BYTES-1:0] m_data;
<a name="2393"><q-n>     2393  </q-n></a>		@(posedge ACLK) disable iff(!ARESET_N)
<a name="2394"><q-n>     2394  </q-n></a>			(TVALID == 1 &amp;&amp; TREADY == 0,m_data = TDATA) |=&gt; (TDATA == m_data);
<a name="2395"><q-n>     2395  </q-n></a>	endproperty : data_hold_p
<a name="2396"><q-n>     2396  </q-n></a>	property user_hold_p;
<a name="2397"><q-n>     2397  </q-n></a>		//-- if TVALID is set TUSER must not be changed until TREADY
<a name="2398"><q-n>     2398  </q-n></a>		logic  m_user;
<a name="2399"><q-n>     2399  </q-n></a>		@(posedge ACLK) disable iff(!ARESET_N)
<a name="2400"><q-n>     2400  </q-n></a>			(TVALID == 1 &amp;&amp; TREADY == 0,m_user = TUSER) |=&gt; (TUSER == m_user);
<a name="2401"><q-n>     2401  </q-n></a>	endproperty : user_hold_p
<a name="2402"><q-n>     2402  </q-n></a>	chk_data_hold 		: assert property(   data_hold_p);
<a name="2403"><q-n>     2403  </q-n></a>	chk_user_hold		: assert property(   user_hold_p);
<a name="2404"><q-n>     2404  </q-n></a>    modport      rx_channel (input ACLK,ARESET_N,TVALID,TUSER,TLAST,TDATA,output TREADY);
<a name="2405"><q-n>     2405  </q-n></a>endinterface : axi4s_if
<a name="2406"><q-n>     2406  </q-n></a>//====================================================================================
<a name="2407"><q-n>     2407  </q-n></a>//------------------------------------------------------------------------------------
<a name="2408"><q-n>     2408  </q-n></a>//--------------------------------- MODULES
<a name="2409"><q-n>     2409  </q-n></a>//------------------------------------------------------------------------------------
<a name="2410"><q-n>     2410  </q-n></a>//====================================================================================
<a name="2411"><q-n>     2411  </q-n></a>// MODULE : ADDER [TEMPLATE]
<a name="2412"><q-n>     2412  </q-n></a>module adder(tp_if.templateSlave tp_vif);
<a name="2413"><q-n>     2413  </q-n></a>    import socTest_pkg::*;
<a name="2414"><q-n>     2414  </q-n></a>    template dut (
<a name="2415"><q-n>     2415  </q-n></a>   .clk         (tp_vif.sig_clock),
<a name="2416"><q-n>     2416  </q-n></a>   .en_i        (tp_vif.sig_en_i),
<a name="2417"><q-n>     2417  </q-n></a>   .ina         (tp_vif.sig_ina),
<a name="2418"><q-n>     2418  </q-n></a>   .inb         (tp_vif.sig_inb),
<a name="2419"><q-n>     2419  </q-n></a>   .en_o        (tp_vif.sig_en_o),
<a name="2420"><q-n>     2420  </q-n></a>   .out_c       (tp_vif.sig_out));
<a name="2421"><q-n>     2421  </q-n></a>endmodule: adder
<a name="2422"><q-n>     2422  </q-n></a>// MODULE : VFPCONFIGDUT [AXI4_LITE] 
<a name="2423"><q-n>     2423  </q-n></a>module vfpConfigDut(axi4l_if.ConfigMaster axi4l_vif,axi4s_if.rx_channel axi4s_vif,tp_if.templateSlave tp_vif);
<a name="2424"><q-n>     2424  </q-n></a>    import socTest_pkg::*;
<a name="2425"><q-n>     2425  </q-n></a>    VFP_v1_0 dutVFP_v1Inst (
<a name="2426"><q-n>     2426  </q-n></a>    //d5m input
<a name="2427"><q-n>     2427  </q-n></a>    .pixclk                (tp_vif.sig_clock),//(axi4l_vif.ACLK   ),
<a name="2428"><q-n>     2428  </q-n></a>    .ifval                 (tp_vif.sig_en_i),//(axi4l_vif.ARESETN),
<a name="2429"><q-n>     2429  </q-n></a>    .ilval                 (tp_vif.sig_ina),//(axi4l_vif.AWADDR ),
<a name="2430"><q-n>     2430  </q-n></a>    .idata                 (),//(axi4l_vif.AWPROT ),
<a name="2431"><q-n>     2431  </q-n></a>    //tx channel           (),//
<a name="2432"><q-n>     2432  </q-n></a>    .rgb_m_axis_aclk       (axi4s_vif.ACLK     ),
<a name="2433"><q-n>     2433  </q-n></a>    .rgb_m_axis_aresetn    (axi4s_vif.ARESET_N ),
<a name="2434"><q-n>     2434  </q-n></a>    .rgb_m_axis_tready     (),//(axi4l_vif.AWADDR ),
<a name="2435"><q-n>     2435  </q-n></a>    .rgb_m_axis_tvalid     (),//(axi4l_vif.AWPROT ),
<a name="2436"><q-n>     2436  </q-n></a>    .rgb_m_axis_tlast      (),//(axi4l_vif.AWVALID),
<a name="2437"><q-n>     2437  </q-n></a>    .rgb_m_axis_tuser      (),//(axi4l_vif.AWREADY),
<a name="2438"><q-n>     2438  </q-n></a>    .rgb_m_axis_tdata      (),//(axi4l_vif.WDATA  ),
<a name="2439"><q-n>     2439  </q-n></a>    //rx channel
<a name="2440"><q-n>     2440  </q-n></a>    .rgb_s_axis_aclk       (axi4s_vif.ACLK     ),
<a name="2441"><q-n>     2441  </q-n></a>    .rgb_s_axis_aresetn    (axi4s_vif.ARESET_N ),
<a name="2442"><q-n>     2442  </q-n></a>    .rgb_s_axis_tready     (axi4s_vif.TREADY   ),
<a name="2443"><q-n>     2443  </q-n></a>    .rgb_s_axis_tvalid     (axi4s_vif.TVALID   ),
<a name="2444"><q-n>     2444  </q-n></a>    .rgb_s_axis_tlast      (axi4s_vif.TLAST    ),
<a name="2445"><q-n>     2445  </q-n></a>    .rgb_s_axis_tuser      (axi4s_vif.TUSER    ),
<a name="2446"><q-n>     2446  </q-n></a>    .rgb_s_axis_tdata      (axi4s_vif.TDATA    ),
<a name="2447"><q-n>     2447  </q-n></a>    //destination channel  (),//
<a name="2448"><q-n>     2448  </q-n></a>    .m_axis_mm2s_aclk      (axi4s_vif.ACLK     ),
<a name="2449"><q-n>     2449  </q-n></a>    .m_axis_mm2s_aresetn   (axi4s_vif.ARESET_N ),
<a name="2450"><q-n>     2450  </q-n></a>    .m_axis_mm2s_tready    (),//(axi4l_vif.AWADDR ),
<a name="2451"><q-n>     2451  </q-n></a>    .m_axis_mm2s_tvalid    (),//(axi4l_vif.AWPROT ),
<a name="2452"><q-n>     2452  </q-n></a>    .m_axis_mm2s_tuser     (),//(axi4l_vif.AWVALID),
<a name="2453"><q-n>     2453  </q-n></a>    .m_axis_mm2s_tlast     (),//(axi4l_vif.AWREADY),
<a name="2454"><q-n>     2454  </q-n></a>    .m_axis_mm2s_tdata     (),//(axi4l_vif.WDATA  ),
<a name="2455"><q-n>     2455  </q-n></a>    .m_axis_mm2s_tkeep     (),//(axi4l_vif.AWPROT ),
<a name="2456"><q-n>     2456  </q-n></a>    .m_axis_mm2s_tstrb     (),//(axi4l_vif.AWVALID),
<a name="2457"><q-n>     2457  </q-n></a>    .m_axis_mm2s_tid       (),//(axi4l_vif.AWREADY),
<a name="2458"><q-n>     2458  </q-n></a>    .m_axis_mm2s_tdest     (),//(axi4l_vif.WDATA  ),
<a name="2459"><q-n>     2459  </q-n></a>    //video configuration  
<a name="2460"><q-n>     2460  </q-n></a>    .vfpconfig_aclk        (axi4l_vif.ACLK   ),
<a name="2461"><q-n>     2461  </q-n></a>    .vfpconfig_aresetn     (axi4l_vif.ARESETN),
<a name="2462"><q-n>     2462  </q-n></a>    .vfpconfig_awaddr      (axi4l_vif.AWADDR ),
<a name="2463"><q-n>     2463  </q-n></a>    .vfpconfig_awprot      (axi4l_vif.AWPROT ),
<a name="2464"><q-n>     2464  </q-n></a>    .vfpconfig_awvalid     (axi4l_vif.AWVALID),
<a name="2465"><q-n>     2465  </q-n></a>    .vfpconfig_awready     (axi4l_vif.AWREADY),
<a name="2466"><q-n>     2466  </q-n></a>    .vfpconfig_wdata       (axi4l_vif.WDATA  ),
<a name="2467"><q-n>     2467  </q-n></a>    .vfpconfig_wstrb       (axi4l_vif.WSTRB  ),
<a name="2468"><q-n>     2468  </q-n></a>    .vfpconfig_wvalid      (axi4l_vif.WVALID ),
<a name="2469"><q-n>     2469  </q-n></a>    .vfpconfig_wready      (axi4l_vif.WREADY ),
<a name="2470"><q-n>     2470  </q-n></a>    .vfpconfig_bresp       (axi4l_vif.BRESP  ),
<a name="2471"><q-n>     2471  </q-n></a>    .vfpconfig_bvalid      (axi4l_vif.BVALID ),
<a name="2472"><q-n>     2472  </q-n></a>    .vfpconfig_bready      (axi4l_vif.BREADY ),
<a name="2473"><q-n>     2473  </q-n></a>    .vfpconfig_araddr      (axi4l_vif.ARADDR ),
<a name="2474"><q-n>     2474  </q-n></a>    .vfpconfig_arprot      (axi4l_vif.ARPROT ),
<a name="2475"><q-n>     2475  </q-n></a>    .vfpconfig_arvalid     (axi4l_vif.ARVALID),
<a name="2476"><q-n>     2476  </q-n></a>    .vfpconfig_arready     (axi4l_vif.ARREADY),
<a name="2477"><q-n>     2477  </q-n></a>    .vfpconfig_rdata       (axi4l_vif.RDATA  ),
<a name="2478"><q-n>     2478  </q-n></a>    .vfpconfig_rresp       (axi4l_vif.RRESP  ),
<a name="2479"><q-n>     2479  </q-n></a>    .vfpconfig_rvalid      (axi4l_vif.RVALID ),
<a name="2480"><q-n>     2480  </q-n></a>    .vfpconfig_rready      (axi4l_vif.RREADY ));
<a name="2481"><q-n>     2481  </q-n></a>endmodule: vfpConfigDut
<a name="2482"><q-n>     2482  </q-n></a>// MODULE : RGB_COLOR [RGB]
<a name="2483"><q-n>     2483  </q-n></a>module rgb_color(rgb_if.slave_mp rgb_vif);
<a name="2484"><q-n>     2484  </q-n></a>    import socTest_pkg::*;
<a name="2485"><q-n>     2485  </q-n></a>    pixelCord dutModule2Inst (
<a name="2486"><q-n>     2486  </q-n></a>   .clk         (rgb_vif.clk),
<a name="2487"><q-n>     2487  </q-n></a>   .iRed        (rgb_vif.iRed),
<a name="2488"><q-n>     2488  </q-n></a>   .iGreen      (rgb_vif.iGreen),
<a name="2489"><q-n>     2489  </q-n></a>   .iBlue       (rgb_vif.iBlue),
<a name="2490"><q-n>     2490  </q-n></a>   .iValid      (rgb_vif.iValid),
<a name="2491"><q-n>     2491  </q-n></a>   .iPixelEn    (rgb_vif.iPixelEn),
<a name="2492"><q-n>     2492  </q-n></a>   .iEof        (rgb_vif.iEof),
<a name="2493"><q-n>     2493  </q-n></a>   .iX          (rgb_vif.iX),
<a name="2494"><q-n>     2494  </q-n></a>   .iY          (rgb_vif.iY),
<a name="2495"><q-n>     2495  </q-n></a>   .oRed        (rgb_vif.oRed),
<a name="2496"><q-n>     2496  </q-n></a>   .oGreen      (rgb_vif.oGreen),
<a name="2497"><q-n>     2497  </q-n></a>   .oBlue       (rgb_vif.oBlue),
<a name="2498"><q-n>     2498  </q-n></a>   .oValid      (rgb_vif.oValid));
<a name="2499"><q-n>     2499  </q-n></a>endmodule: rgb_color
<a name="2500"><q-n>     2500  </q-n></a>//====================================================================================
<a name="2501"><q-n>     2501  </q-n></a>//------------------------------------------------------------------------------------
<a name="2502"><q-n>     2502  </q-n></a>//--------------------------------- TOP
<a name="2503"><q-n>     2503  </q-n></a>//------------------------------------------------------------------------------------
<a name="2504"><q-n>     2504  </q-n></a>//====================================================================================
<a name="2505"><q-n>     2505  </q-n></a>module top;
<a name="2506"><q-n>     2506  </q-n></a>    import uvm_pkg::*;
<a name="2507"><q-n>     2507  </q-n></a>    import socTest_pkg::*;
<a name="2508"><q-n>     2508  </q-n></a>    reg ACLK;
<a name="2509"><q-n>     2509  </q-n></a>    reg ARESETN;
<a name="2510"><q-n>     2510  </q-n></a>    reg ARESET_N;
<a name="2511"><q-n>     2511  </q-n></a>    reg clk;
<a name="2512"><q-n>     2512  </q-n></a>    //INTERFACE
<a name="2513"><q-n>     2513  </q-n></a>    axi4l_if        axi4l_vif(ACLK,ARESETN);            // AXI_LITE_INTERFACE  
<a name="2514"><q-n>     2514  </q-n></a>    axi4s_if        axi4s_vif(ACLK,ARESET_N);         // AXI4_STREAM_INTERFACE  
<a name="2515"><q-n>     2515  </q-n></a>    rgb_if          rgb_vif(clk);                           // RGB_INTERFACE 
<a name="2516"><q-n>     2516  </q-n></a>    tp_if           tp_vif();                         // TEMPLATE_NTERFACE 
<a name="2517"><q-n>     2517  </q-n></a>    //MODULE
<a name="2518"><q-n>     2518  </q-n></a>    adder               template_dut(tp_vif);             // [TEMPLATE]
<a name="2519"><q-n>     2519  </q-n></a>    vfpConfigDut        vfp_dut(axi4l_vif,axi4s_vif,tp_vif); // [AXI4_LITE]
<a name="2520"><q-n>     2520  </q-n></a>    rgb_color           rgb_dut(rgb_vif);                       // [RGB]
<a name="2521"><q-n>     2521  </q-n></a>    initial begin
<a name="2522"><q-n>     2522  </q-n></a>        ARESETN  = 1'b0;
<a name="2523"><q-n>     2523  </q-n></a>        ARESET_N = 1'b0;
<a name="2524"><q-n>     2524  </q-n></a>    #1000;
<a name="2525"><q-n>     2525  </q-n></a>        ARESETN  = 1'b1;
<a name="2526"><q-n>     2526  </q-n></a>        ARESET_N = 1'b1;
<a name="2527"><q-n>     2527  </q-n></a>    end
<a name="2528"><q-n>     2528  </q-n></a>    initial begin
<a name="2529"><q-n>     2529  </q-n></a>        ACLK = 0;
<a name="2530"><q-n>     2530  </q-n></a>    #5ns ;
<a name="2531"><q-n>     2531  </q-n></a>    forever #5ns ACLK = ! ACLK;
<a name="2532"><q-n>     2532  </q-n></a>    end
<a name="2533"><q-n>     2533  </q-n></a>    initial begin
<a name="2534"><q-n>     2534  </q-n></a>        tp_vif.sig_clock = 0;
<a name="2535"><q-n>     2535  </q-n></a>    #5ns ;
<a name="2536"><q-n>     2536  </q-n></a>    forever #5ns tp_vif.sig_clock = ! tp_vif.sig_clock;
<a name="2537"><q-n>     2537  </q-n></a>    end
<a name="2538"><q-n>     2538  </q-n></a>    initial begin
<a name="2539"><q-n>     2539  </q-n></a>        clk = 0;
<a name="2540"><q-n>     2540  </q-n></a>        #5ns ;
<a name="2541"><q-n>     2541  </q-n></a>        forever #5ns clk = ! clk;
<a name="2542"><q-n>     2542  </q-n></a>    end
<a name="2543"><q-n>     2543  </q-n></a>    initial begin
<a name="2544"><q-n>     2544  </q-n></a>        uvm_config_db   #(virtual axi4l_if) ::set(null, "*", "axi4l_vif", axi4l_vif);
<a name="2545"><q-n>     2545  </q-n></a>        uvm_resource_db #(virtual tp_if)    ::set(.scope("ifs"), .name("tp_if"), .val(tp_vif));
<a name="2546"><q-n>     2546  </q-n></a>        uvm_resource_db #(virtual rgb_if)   ::set(.scope("ifs"),.name("rgb_if"),.val(rgb_vif));
<a name="2547"><q-n>     2547  </q-n></a>        uvm_config_db   #(virtual axi4s_if) ::set(.cntxt(null),.inst_name("uvm_test_top"),.field_name("axi4s_vif"),.value(axi4s_vif));
<a name="2548"><q-n>     2548  </q-n></a>        run_test();
<a name="2549"><q-n>     2549  </q-n></a>    end
<a name="2550"><q-n>     2550  </q-n></a>endmodule: top
<a name="2551"><q-n>     2551  </q-n></a>//====================================================================================
<a name="2552"><q-n>     2552  </q-n></a>//------------------------------------------------------------------------------------
<a name="2553"><q-n>     2553  </q-n></a>//---------------------------------
<a name="2554"><q-n>     2554  </q-n></a>//------------------------------------------------------------------------------------
<a name="2555"><q-n>     2555  </q-n></a>//====================================================================================</pre>
</tt>
<h1>Error: Source file not available...</h1>
  <p>
  This source file could not be found. Make sure the HDL sourcefiles are visible when you generate the HTML report.</p><p>
  Contact Mentor Customer Support if you have any questions.</p>
  
</body>
</html>
