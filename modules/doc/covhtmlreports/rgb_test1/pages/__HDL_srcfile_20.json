var g_sourceLines = [
'--02092019 [02-17-2019]',
'library ieee;',
'use ieee.std_logic_1164.all;',
'use ieee.numeric_std.all;',
'use work.constantspackage.all;',
'use work.vpfRecords.all;',
'use work.portspackage.all;',
'entity videoSelect is',
'generic (',
'    i_data_width           : integer := 8;',
'    b_data_width           : integer := 32;',
'    s_data_width           : integer := 16);',
'port (',
'    clk               : in std_logic;',
'    rst_l             : in std_logic;',
'    videoChannel      : in std_logic_vector(b_data_width-1 downto 0);',
'    dChannel          : in std_logic_vector(b_data_width-1 downto 0);',
'    cChannel          : in std_logic_vector(b_data_width-1 downto 0);',
'    cRgbOsharp        : in std_logic_vector(b_data_width-1 downto 0);',
'    iFrameData        : in fcolors;',
'    oEof              : out std_logic;',
'    oSof              : out std_logic;',
'    oCord             : out coord;',
'    oRgb              : out channel);',
'end videoSelect;',
'architecture Behavioral of videoSelect is',
'    signal vChannelSelect     : integer;',
'    signal eChannelSelect     : integer;',
'    signal ycbcr              : channel;',
'    signal channels           : channel;',
'begin',
'vChannelSelect    &lt;= to_integer(unsigned(videoChannel));',
'eChannelSelect    &lt;= to_integer(unsigned(dChannel));',
'oEof              &lt;= iFrameData.pEof;',
'oSof              &lt;= iFrameData.pSof;',
'---------------------------------------------------------------------------------',
'-- oRgb.valid must be 2nd condition else valid value',
'---------------------------------------------------------------------------------',
'videoOutP: process (clk) begin',
'    if rising_edge(clk) then',
'        if (vChannelSelect = soble) then',
'            channels     &lt;= iFrameData.soble;',
'        elsif(vChannelSelect = sobRgb)then',
'                channels.valid &lt;= iFrameData.rgbDetect.valid;',
'            if (iFrameData.rgbDetectLock = hi) then ',
'                channels.red   &lt;= iFrameData.soble.red;',
'                channels.green &lt;= iFrameData.soble.green;',
'                channels.blue  &lt;= iFrameData.soble.blue;',
'            else                   ',
'                channels.red   &lt;= iFrameData.rgbDetect.red;',
'                channels.green &lt;= iFrameData.rgbDetect.green;',
'                channels.blue  &lt;= iFrameData.rgbDetect.blue;',
'            end if;',
'        elsif(vChannelSelect = sobPoi)then',
'                channels.valid &lt;= iFrameData.rgbPoi.valid;',
'            if (iFrameData.rgbPoiLock = hi) then ',
'                channels.red   &lt;= iFrameData.soble.red;',
'                channels.green &lt;= iFrameData.soble.green;',
'                channels.blue  &lt;= iFrameData.soble.blue;',
'            else                   ',
'                channels.red   &lt;= iFrameData.rgbPoi.red;',
'                channels.green &lt;= iFrameData.rgbPoi.green;',
'                channels.blue  &lt;= iFrameData.rgbPoi.blue;',
'            end if;',
'        elsif(vChannelSelect = hsvPoi)then',
'                channels.valid &lt;= iFrameData.rgbPoi.valid;',
'            if (iFrameData.rgbPoiLock = hi) then ',
'                channels.red   &lt;= iFrameData.hsv.red;',
'                channels.green &lt;= iFrameData.hsv.green;',
'                channels.blue  &lt;= iFrameData.hsv.blue;',
'            else                   ',
'                channels.red   &lt;= iFrameData.rgbPoi.red;',
'                channels.green &lt;= iFrameData.rgbPoi.green;',
'                channels.blue  &lt;= iFrameData.rgbPoi.blue;',
'            end if;',
'        elsif(vChannelSelect = sharp)then',
'            channels    &lt;= iFrameData.sharp;',
'        elsif(vChannelSelect = blur1x)then',
'            channels     &lt;= iFrameData.blur1x;',
'        elsif(vChannelSelect = blur2x)then',
'            channels     &lt;= iFrameData.blur2x;',
'        elsif(vChannelSelect = blur3x)then',
'            channels     &lt;= iFrameData.blur3x;',
'        elsif(vChannelSelect = blur4x)then',
'            channels     &lt;= iFrameData.blur4x;',
'        elsif(vChannelSelect = hsv)then',
'            channels      &lt;= iFrameData.hsv;',
'        elsif(vChannelSelect = rgb)then',
'            channels     &lt;= iFrameData.rgb;',
'        elsif(vChannelSelect = rgbRemix)then',
'            channels     &lt;= iFrameData.rgbRemix;',
'        elsif(vChannelSelect = tPatter1)then',
'            channels.valid     &lt;= iFrameData.rgbSum.valid;',
'            channels.red       &lt;= iFrameData.rgbSum.red(i_data_width-1 downto 0);',
'            channels.green     &lt;= iFrameData.rgbSum.green(i_data_width-1 downto 0);',
'            channels.blue      &lt;= iFrameData.rgbSum.blue(i_data_width-1 downto 0);',
'        elsif(vChannelSelect = tPatter2)then',
'            channels.valid     &lt;= iFrameData.rgbSum.valid;',
'            channels.red       &lt;= x"0" &amp; iFrameData.rgbSum.red(3 downto 0);',
'            channels.green     &lt;= x"0" &amp; iFrameData.rgbSum.green(7 downto 4);',
'            channels.blue      &lt;= x"0" &amp; iFrameData.rgbSum.blue(11 downto 8);',
'        elsif(vChannelSelect = tPatter3)then',
'            channels.valid     &lt;= iFrameData.rgbSum.valid;',
'            channels.red       &lt;= iFrameData.rgbSum.red(i_data_width-1 downto 0);',
'            channels.green     &lt;= x"0" &amp; iFrameData.rgbSum.green(7 downto 4);',
'            channels.blue      &lt;= x"0" &amp; iFrameData.rgbSum.blue(11 downto 8);',
'        elsif(vChannelSelect = tPatter4)then',
'            channels.valid     &lt;= iFrameData.rgbSum.valid;',
'            channels.red       &lt;= x"0" &amp; iFrameData.rgbSum.red(3 downto 0);',
'            channels.green     &lt;= iFrameData.rgbSum.green(i_data_width-1 downto 0);',
'            channels.blue      &lt;= x"0" &amp; iFrameData.rgbSum.blue(11 downto 8);',
'        elsif(vChannelSelect = tPatter5)then',
'            channels.valid     &lt;= iFrameData.rgbSum.valid;',
'            channels.red       &lt;= x"0" &amp; iFrameData.rgbSum.red(3 downto 0);',
'            channels.green     &lt;= x"0" &amp; iFrameData.rgbSum.green(7 downto 4);',
'            channels.blue      &lt;= iFrameData.rgbSum.blue(i_data_width-1 downto 0);',
'        elsif(vChannelSelect = rgbCorrect)then',
'            channels           &lt;= iFrameData.rgbCorrect;',
'        elsif(vChannelSelect = hsl)then',
'            channels           &lt;= iFrameData.hsl;',
'        elsif(vChannelSelect = hsvCcBl)then',
'            channels           &lt;= iFrameData.hsvCcBl;',
'        else',
'            channels           &lt;= iFrameData.rgbCorrect;',
'        end if;',
'    end if;',
'end process videoOutP;',
'ycbcrInst: rgb_ycbcr',
'generic map(',
'    i_data_width         =&gt; i_data_width,',
'    i_precision          =&gt; i_precision,',
'    i_full_range         =&gt; FALSE)',
'port map(',
'    clk                  =&gt; clk,',
'    rst_l                =&gt; rst_l,',
'    iRgb                 =&gt; channels,',
'    y                    =&gt; ycbcr.red,',
'    cb                   =&gt; ycbcr.green,',
'    cr                   =&gt; ycbcr.blue,',
'    oValid               =&gt; ycbcr.valid);',
'channelOutP: process (clk) begin',
'    if rising_edge(clk) then',
'        oCord &lt;= iFrameData.cod;',
'        if (eChannelSelect = 0) then',
'            oRgb     &lt;= ycbcr;',
'        else',
'            oRgb     &lt;= channels;',
'        end if;',
'    end if;',
'end process channelOutP;',
'end Behavioral;'
];
countinueBuildStmtTable(g_sourceLines);
