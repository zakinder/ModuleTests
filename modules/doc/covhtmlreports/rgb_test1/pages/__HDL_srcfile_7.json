var g_sourceLines = [
'library ieee;',
'use ieee.std_logic_1164.all;',
'use ieee.numeric_std.all;',
'use work.constantspackage.all;',
'use work.vpfRecords.all;',
'use work.portspackage.all;',
'entity RawToRgb is',
'port (',
'    clk            : in std_logic;',
'    rst_l          : in std_logic;',
'    iTpData        : in rTp;',
'    oRgbSet        : out rRgb);',
'end entity;',
'architecture arch of RawToRgb is',
'    signal rgb           : rawRgb;',
'    signal tpd1          : uTp;',
'    signal tpd2          : uTp;',
'    signal r1Valid       : std_logic :=\'0\';',
'    signal r2Valid       : std_logic :=\'0\';',
'    signal d1TpData      : rTp;',
'    signal d2TpData      : rTp;',
'begin',
'validSyncP: process(clk) begin',
'    if rising_edge(clk) then',
'        r1Valid       &lt;= iTpData.valid;',
'        r2Valid       &lt;= r1Valid;',
'        oRgbSet.valid &lt;= r2Valid;',
'        d1TpData      &lt;= iTpData;',
'        d2TpData      &lt;= d1TpData;',
'        oRgbSet.pEof  &lt;= d2TpData.pEof;',
'        oRgbSet.pSof  &lt;= d2TpData.pSof;',
'        oRgbSet.cord  &lt;= d2TpData.cord;',
'    end if;',
'end process validSyncP;',
'syncDataP: process (clk) begin',
'    if rising_edge(clk) then',
'        if rst_l = \'0\' then',
'            tpd1.tp3  &lt;=(others =&gt; \'0\');',
'            tpd2.tp3  &lt;=(others =&gt; \'0\');',
'            tpd1.tp2  &lt;=(others =&gt; \'0\');',
'            tpd2.tp2  &lt;=(others =&gt; \'0\');',
'            tpd1.tp1  &lt;=(others =&gt; \'0\');',
'            tpd2.tp1  &lt;=(others =&gt; \'0\');',
'            else',
'            tpd1.tp1  &lt;=unsigned(iTpData.taps.tp1);',
'            tpd1.tp2  &lt;=unsigned(iTpData.taps.tp2);',
'            tpd1.tp3  &lt;=unsigned(iTpData.taps.tp3);',
'            tpd2.tp1  &lt;=tpd1.tp1;',
'            tpd2.tp2  &lt;=tpd1.tp2;',
'            tpd2.tp3  &lt;=tpd1.tp3;',
'            end if;',
'        end if;',
'end process syncDataP;',
'rawToRgbP: process (clk)',
'    variable loc_addr : std_logic_vector(1 downto 0);',
'    begin',
'        if rising_edge(clk) then',
'        if rst_l = \'0\' then',
'            rgb.red   &lt;=(others =&gt; \'0\');',
'            rgb.green &lt;=(others =&gt; \'0\');',
'            rgb.blue  &lt;=(others =&gt; \'0\'); ',
'        else',
'        loc_addr := iTpData.cord.y(0) &amp; iTpData.cord.x(0);',
'        case loc_addr IS',
'            when b"11" =&gt; ',
'                if (iTpData.cord.y(11 downto 0) = x"001") then',
'                    rgb.red   &lt;= tpd1.tp2;',
'                    rgb.green &lt;= \'0\' &amp; (tpd1.tp3 + unsigned(iTpData.taps.tp2));',
'                    rgb.blue  &lt;= unsigned(iTpData.taps.tp3);',
'                else          ',
'                    rgb.red   &lt;= tpd1.tp2;',
'                    rgb.green &lt;= \'0\' &amp; (unsigned(iTpData.taps.tp2) + tpd1.tp1);',
'                    rgb.blue  &lt;= unsigned(iTpData.taps.tp1);',
'                end if;',
'            when b"10" =&gt; ',
'                if (iTpData.cord.y(11 downto 0) = x"001") then',
'                    if (iTpData.cord.x(11 downto 0) = x"000") then',
'                        rgb.red    &lt;= tpd2.tp3;',
'                        rgb.green  &lt;= tpd2.tp2 &amp; \'0\';',
'                        rgb.blue   &lt;= tpd1.tp2;',
'                    else',
'                        rgb.red    &lt;= unsigned(iTpData.taps.tp2);',
'                        rgb.green  &lt;= \'0\' &amp; (tpd1.tp2 + unsigned(iTpData.taps.tp3));',
'                        rgb.blue   &lt;= tpd1.tp3;    ',
'                    end if;',
'                else',
'                    if (iTpData.cord.x(11 downto 0) = x"000") then',
'                        rgb.red    &lt;= tpd2.tp1;',
'                        rgb.green  &lt;= tpd1.tp1 &amp; \'0\';',
'                        rgb.blue   &lt;= tpd1.tp2;',
'                    else',
'                        rgb.red    &lt;= unsigned(iTpData.taps.tp2);',
'                        rgb.green  &lt;= \'0\' &amp; (tpd1.tp2 + unsigned(iTpData.taps.tp1));',
'                        rgb.blue   &lt;= tpd1.tp1;    ',
'                    end if;',
'                end if;',
'            when b"01" =&gt; ',
'                rgb.red      &lt;= tpd1.tp1;',
'                rgb.green    &lt;= \'0\' &amp; (unsigned(iTpData.taps.tp1) + tpd1.tp2);',
'                rgb.blue     &lt;= unsigned(iTpData.taps.tp2);    ',
'            when b"00" =&gt; ',
'                if (iTpData.cord.x(11 downto 0) = x"000") then',
'                    rgb.red     &lt;= tpd2.tp2;',
'                    rgb.green   &lt;= tpd2.tp1 &amp; \'0\';',
'                    rgb.blue    &lt;= tpd1.tp1;',
'                else',
'                    rgb.red     &lt;= unsigned(iTpData.taps.tp1);',
'                    rgb.green   &lt;= \'0\' &amp; (tpd1.tp1 + unsigned(iTpData.taps.tp2));',
'                    rgb.blue    &lt;= tpd1.tp2;    ',
'                end if;',
'            when others =&gt; ',
'                rgb.red     &lt;= rgb.red;',
'                rgb.green   &lt;= rgb.green;',
'                rgb.blue    &lt;= rgb.blue;',
'        end case;',
'        end if;',
'        end if; ',
'end process rawToRgbP;',
'    oRgbSet.red    &lt;= std_logic_vector(rgb.red(11 downto 4));',
'    oRgbSet.green  &lt;= std_logic_vector(rgb.green(12 downto 5));',
'    oRgbSet.blue   &lt;= std_logic_vector(rgb.blue(11 downto 4));',
'end architecture;'
];
countinueBuildStmtTable(g_sourceLines);
