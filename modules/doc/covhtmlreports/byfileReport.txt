Coverage Report by file with details

=================================================================================
=== File: ../modules/dut/pixelCord.vhd
=================================================================================
Statement Coverage:
    Enabled Coverage            Active      Hits    Misses % Covered
    ----------------            ------      ----    ------ ---------
    Stmts                           97        49        48      50.5

================================Statement Details================================

Statement Coverage for file ../modules/dut/pixelCord.vhd --

    1                                                
    2                                                library ieee;
    3                                                use ieee.std_logic_1164.all;
    4                                                use ieee.numeric_std.all;
    5                                                use work.constantspackage.all;
    6                                                use work.vpfRecords.all;
    7                                                
    8                                                entity pixelCord is
    9                                                port (
    10                                                   clk            : in std_logic;
    11                                                   iRed           : in std_logic_vector(7 downto 0);
    12                                                   iGreen         : in std_logic_vector(7 downto 0);
    13                                                   iBlue          : in std_logic_vector(7 downto 0);
    14                                                   iValid         : in std_logic;
    15                                                   iPixelEn       : in std_logic;
    16                                                   iEof           : in std_logic;
    17                                                   iX             : in integer;
    18                                                   iY             : in integer;
    19                                                   oRed           : out std_logic_vector(7 downto 0);
    20                                                   oGreen         : out std_logic_vector(7 downto 0);
    21                                                   oBlue          : out std_logic_vector(7 downto 0);
    22                                                   oValid         : out std_logic);
    23                                               end entity;
    24                                               architecture rtl of pixelCord is
    25                                                   signal iCord           : cord;
    26                                                   signal oRgb            : channel;
    27                                                   signal iRgb            : channel;
    28                                                   signal frameSize       : intersectPoint;
    29                                                   signal initCord        : intersectPoint;
    30                                                   signal newCord         : intersectPoint;
    31                                                   signal grid1Cord       : intersectPoint;
    32                                                   signal grid2Cord       : intersectPoint;
    33                                                   signal grid3Cord       : intersectPoint;
    34                                                   signal grid4Cord       : intersectPoint;
    35                                                   signal rgb             : channel;
    36                                               begin
    37              1                        110         iCord.x         <= iX;
    38              1                        110         iCord.y         <= iY;
    39                                                   
    40              1                        110         iRgb.red         <= iRed;
    41              1                        109         iRgb.green       <= iGreen;
    42              1                        109         iRgb.blue        <= iBlue;
    43              1                         58         iRgb.valid       <= iValid;
    44                                                   
    45              1                         45         oRed             <= oRgb.red;
    46              1                         44         oGreen           <= oRgb.green;
    47              1                         45         oBlue            <= oRgb.blue;
    48              1                         59         oValid           <= oRgb.valid;
    49                                                   
    50                                                   
    51              1                          1         initCord.rht   <= initCordValueRht;
    52              1                          1         initCord.lft   <= initCordValueLft;
    53              1                          1         initCord.top   <= initCordValueTop;
    54              1                          1         initCord.bot   <= initCordValueBot;
    55              1                          1         frameSize.lft  <= frameSizeLft;
    56              1                          1         frameSize.rht  <= frameSizeRht;
    57              1                          1         frameSize.top  <= frameSizeTop;
    58              1                          1         frameSize.bot  <= frameSizeBot;
    59                                               dataOutP: process (clk)begin
    60                                                   if rising_edge(clk) then
    61              1                        102             oRgb.valid  <= iRgb.valid;
    62              1                        102             oRgb.red    <= rgb.red;
    63              1                        102             oRgb.green  <= rgb.green;
    64              1                        102             oRgb.blue   <= rgb.blue;
    65                                                   end if;
    66                                               end process dataOutP;
    67                                               pixelCordP: process (clk)begin
    68                                                   if rising_edge(clk) then
    69                                                       if (iRgb.valid = hi) then
    70                                                           ------------------------------------
    71                                                           if (iPixelEn = hi) then 
    72                                                               ------------------------------------
    73                                                               --Left Coordinates
    74                                                               ------------------------------------
    75                                                               if (iCord.x <= newCord.lft) then
    76                                                                   if ( iCord.x >= frameSize.lft) then 
    77              1                         18                             newCord.lft <= iCord.x - 1;
    78                                                                   end if;   
    79                                                               end if;
    80                                                               ------------------------------------
    81                                                               --Right Coordinates
    82                                                               ------------------------------------
    83                                                               if (iCord.x >= newCord.rht) then
    84                                                                   if ( iCord.x <= frameSize.rht) then 
    85              1                         17                             newCord.rht <= iCord.x + 1;
    86                                                                   end if;   
    87                                                               end if;
    88                                                               ------------------------------------
    89                                                               --Top Coordinates
    90                                                               ------------------------------------
    91                                                               if (iCord.y <= newCord.top) then
    92                                                                   if ( iCord.y >= frameSize.top) then 
    93              1                         18                             newCord.top <= iCord.y - 1;
    94                                                                   end if;   
    95                                                               end if;
    96                                                               ------------------------------------
    97                                                               --Bottom Coordinates
    98                                                               ------------------------------------
    99                                                               if (iCord.y >= newCord.bot) then
    100                                                                  if ( iCord.y <= frameSize.bot) then 
    101             1                         11                             newCord.bot <= iCord.y + 1;
    102                                                                  end if;   
    103                                                              end if;
    104                                                          end if;--iPixelEn
    105                                                          ------------------------------------
    106                                                          -- 4TH FRAME
    107                                                          ------------------------------------
    108                                                          if ((iCord.y = grid4Cord.bot) and ((iCord.x >= grid4Cord.lft) and (iCord.x <= grid4Cord.rht)))then
    109             1                    ***0***                     rgb.red        <= white;
    110             1                    ***0***                     rgb.green      <= black;
    111             1                    ***0***                     rgb.blue       <= black;
    112                                                          elsif ((iCord.y = grid4Cord.top) and ((iCord.x >= grid4Cord.lft) and (iCord.x <= grid4Cord.rht)))then
    113             1                    ***0***                     rgb.red        <= white;
    114             1                    ***0***                     rgb.green      <= black;
    115             1                    ***0***                     rgb.blue       <= black;
    116                                                          elsif ((iCord.x = grid4Cord.lft) and ((iCord.y >= grid4Cord.top) and (iCord.y <= grid4Cord.bot)))then
    117             1                    ***0***                     rgb.red        <= white;
    118             1                    ***0***                     rgb.green      <= black;
    119             1                    ***0***                     rgb.blue       <= black;
    120                                                          elsif ((iCord.x = grid4Cord.rht) and ((iCord.y >= grid4Cord.top) and (iCord.y <= grid4Cord.bot)))then
    121             1                    ***0***                     rgb.red        <= white;
    122             1                    ***0***                     rgb.green      <= black;
    123             1                    ***0***                     rgb.blue       <= black;
    124                                                          ------------------------------------
    125                                                         -- 3RD FRAME
    126                                                          ------------------------------------
    127                                                          elsif ((iCord.y = grid3Cord.bot) and ((iCord.x >= grid3Cord.lft) and (iCord.x <= grid3Cord.rht)))then
    128             1                    ***0***                     rgb.red        <= black;
    129             1                    ***0***                     rgb.green      <= white;
    130             1                    ***0***                     rgb.blue       <= black;
    131                                                          elsif ((iCord.y = grid3Cord.top) and ((iCord.x >= grid3Cord.lft) and (iCord.x <= grid3Cord.rht)))then
    132             1                    ***0***                     rgb.red        <= black;
    133             1                    ***0***                     rgb.green      <= white;
    134             1                    ***0***                     rgb.blue       <= black;
    135                                                          elsif ((iCord.x = grid3Cord.lft) and ((iCord.y >= grid3Cord.top) and (iCord.y <= grid3Cord.bot)))then
    136             1                    ***0***                     rgb.red        <= black;
    137             1                    ***0***                     rgb.green      <= white;
    138             1                    ***0***                     rgb.blue       <= black;
    139                                                          elsif ((iCord.x = grid3Cord.rht) and ((iCord.y >= grid3Cord.top) and (iCord.y <= grid3Cord.bot)))then
    140             1                    ***0***                     rgb.red        <= black;
    141             1                    ***0***                     rgb.green      <= white;
    142             1                    ***0***                     rgb.blue       <= black;
    143                                                          ------------------------------------
    144                                                          -- 2ND FRAME
    145                                                          ------------------------------------
    146                                                          elsif ((iCord.y = grid2Cord.bot) and ((iCord.x >= grid2Cord.lft) and (iCord.x <= grid3Cord.rht)))then
    147             1                    ***0***                     rgb.red        <= black;
    148             1                    ***0***                     rgb.green      <= black;
    149             1                    ***0***                     rgb.blue       <= white;
    150                                                          elsif ((iCord.y = grid2Cord.top) and ((iCord.x >= grid2Cord.lft) and (iCord.x <= grid3Cord.rht)))then
    151             1                    ***0***                     rgb.red        <= black;
    152             1                    ***0***                     rgb.green      <= black;
    153             1                    ***0***                     rgb.blue       <= white;
    154                                                          elsif ((iCord.x = grid2Cord.lft) and ((iCord.y >= grid2Cord.top) and (iCord.y <= grid2Cord.bot)))then
    155             1                    ***0***                     rgb.red        <= black;
    156             1                    ***0***                     rgb.green      <= black;
    157             1                    ***0***                     rgb.blue       <= white;
    158                                                          elsif ((iCord.x = grid3Cord.rht) and ((iCord.y >= grid2Cord.top) and (iCord.y <= grid2Cord.bot)))then
    159             1                    ***0***                     rgb.red        <= black;
    160             1                    ***0***                     rgb.green      <= black;
    161             1                    ***0***                     rgb.blue       <= white;
    162                                                          ------------------------------------
    163                                                          -- 1ST FRAME
    164                                                          ------------------------------------
    165                                                          elsif ((iCord.y = grid1Cord.bot) and ((iCord.x >= grid1Cord.lft) and (iCord.x <= grid1Cord.rht)))then
    166             1                    ***0***                     rgb.red        <= x"80";
    167             1                    ***0***                     rgb.green      <= black;
    168             1                    ***0***                     rgb.blue       <= x"80";
    169                                                          elsif ((iCord.y = grid1Cord.top) and ((iCord.x >= grid1Cord.lft) and (iCord.x <= grid1Cord.rht)))then
    170             1                    ***0***                     rgb.red        <= x"80";
    171             1                    ***0***                     rgb.green      <= black;
    172             1                    ***0***                     rgb.blue       <= x"80";
    173                                                          elsif ((iCord.x = grid1Cord.lft) and ((iCord.y >= grid1Cord.top) and (iCord.y <= grid1Cord.bot)))then
    174             1                    ***0***                     rgb.red        <= x"80";
    175             1                    ***0***                     rgb.green      <= black;
    176             1                    ***0***                     rgb.blue       <= x"80";
    177                                                          elsif ((iCord.x = grid1Cord.rht) and ((iCord.y >= grid1Cord.top) and (iCord.y <= grid1Cord.bot)))then
    178             1                    ***0***                     rgb.red        <= x"80";
    179             1                    ***0***                     rgb.green      <= black;
    180             1                    ***0***                     rgb.blue       <= x"80";
    181                                                          else
    182             1                         59                     rgb.red        <= iRgb.red;
    183             1                         59                     rgb.green      <= iRgb.green;
    184             1                         59                     rgb.blue       <= iRgb.blue;
    185                                                          end if;
    186                                                      end if;--iRgb.valid
    187                                                      if (iEof = hi)then
    188                                                          --RESET COORDINATES TO DEFAULT
    189             1                         75                 newCord.lft       <= initCord.lft;
    190             1                         75                 newCord.rht       <= initCord.rht;
    191             1                         75                 newCord.top       <= initCord.top;
    192             1                         75                 newCord.bot       <= initCord.bot;
    193                                                          -- 1ST FRAME
    194             1                         75                 grid1Cord.lft     <= newCord.lft;
    195             1                         75                 grid1Cord.rht     <= newCord.rht;
    196             1                         75                 grid1Cord.top     <= newCord.top;
    197             1                         75                 grid1Cord.bot     <= newCord.bot;
    198                                                          -- 2ND FRAME
    199             1                         75                 grid2Cord.lft     <= grid1Cord.lft;
    200             1                         75                 grid2Cord.rht     <= grid1Cord.rht;
    201             1                         75                 grid2Cord.top     <= grid1Cord.top;
    202             1                         75                 grid2Cord.bot     <= grid1Cord.bot;
    203                                                          -- 3RD FRAME
    204             1                         75                 grid3Cord.lft     <= grid2Cord.lft;
    205             1                         75                 grid3Cord.rht     <= grid2Cord.rht;
    206             1                         75                 grid3Cord.top     <= grid2Cord.top;
    207             1                         75                 grid3Cord.bot     <= grid2Cord.bot;
    208                                                          -- 4TH FRAME
    209             1                         75                 grid4Cord.lft     <= grid3Cord.lft;
    210             1                         75                 grid4Cord.rht     <= grid3Cord.rht;
    211             1                         75                 grid4Cord.top     <= grid3Cord.top;
    212             1                         75                 grid4Cord.bot     <= grid3Cord.bot;
    213                                                      end if;--iEof
    214                                                  end if;
    215                                              end process pixelCordP;
    216                                              end architecture;

Branch Coverage:
    Enabled Coverage            Active      Hits    Misses % Covered
    ----------------            ------      ----    ------ ---------
    Branches                        41        23        18      56.0

================================Branch Details================================

Branch Coverage for file ../modules/dut/pixelCord.vhd --

------------------------------------IF Branch------------------------------------
    60                                       102     Count coming in to IF
    60              1                        102         if rising_edge(clk) then
                                            ECOP     All False Count
Branch totals: 1 hit of 1 branch = 100.0%

------------------------------------IF Branch------------------------------------
    68                                       139     Count coming in to IF
    68              1                        139         if rising_edge(clk) then
                                            ECOP     All False Count
Branch totals: 1 hit of 1 branch = 100.0%

------------------------------------IF Branch------------------------------------
    69                                       139     Count coming in to IF
    69              1                         59             if (iRgb.valid = hi) then
                                              80     All False Count
Branch totals: 2 hits of 2 branches = 100.0%

------------------------------------IF Branch------------------------------------
    71                                        59     Count coming in to IF
    71              1                         26                 if (iPixelEn = hi) then 
                                              33     All False Count
Branch totals: 2 hits of 2 branches = 100.0%

------------------------------------IF Branch------------------------------------
    75                                        26     Count coming in to IF
    75              1                         18                     if (iCord.x <= newCord.lft) then
                                               8     All False Count
Branch totals: 2 hits of 2 branches = 100.0%

------------------------------------IF Branch------------------------------------
    76                                        18     Count coming in to IF
    76              1                         18                         if ( iCord.x >= frameSize.lft) then 
                                         ***0***     All False Count
Branch totals: 1 hit of 2 branches = 50.0%

------------------------------------IF Branch------------------------------------
    83                                        26     Count coming in to IF
    83              1                         18                     if (iCord.x >= newCord.rht) then
                                               8     All False Count
Branch totals: 2 hits of 2 branches = 100.0%

------------------------------------IF Branch------------------------------------
    84                                        18     Count coming in to IF
    84              1                         17                         if ( iCord.x <= frameSize.rht) then 
                                               1     All False Count
Branch totals: 2 hits of 2 branches = 100.0%

------------------------------------IF Branch------------------------------------
    91                                        26     Count coming in to IF
    91              1                         18                     if (iCord.y <= newCord.top) then
                                               8     All False Count
Branch totals: 2 hits of 2 branches = 100.0%

------------------------------------IF Branch------------------------------------
    92                                        18     Count coming in to IF
    92              1                         18                         if ( iCord.y >= frameSize.top) then 
                                         ***0***     All False Count
Branch totals: 1 hit of 2 branches = 50.0%

------------------------------------IF Branch------------------------------------
    99                                        26     Count coming in to IF
    99              1                         20                     if (iCord.y >= newCord.bot) then
                                               6     All False Count
Branch totals: 2 hits of 2 branches = 100.0%

------------------------------------IF Branch------------------------------------
    100                                       20     Count coming in to IF
    100             1                         11                         if ( iCord.y <= frameSize.bot) then 
                                               9     All False Count
Branch totals: 2 hits of 2 branches = 100.0%

------------------------------------IF Branch------------------------------------
    108                                       59     Count coming in to IF
    108             1                    ***0***                 if ((iCord.y = grid4Cord.bot) and ((iCord.x >= grid4Cord.lft) and (iCord.x <= grid4Cord.rht)))then
    112             1                    ***0***                 elsif ((iCord.y = grid4Cord.top) and ((iCord.x >= grid4Cord.lft) and (iCord.x <= grid4Cord.rht)))then
    116             1                    ***0***                 elsif ((iCord.x = grid4Cord.lft) and ((iCord.y >= grid4Cord.top) and (iCord.y <= grid4Cord.bot)))then
    120             1                    ***0***                 elsif ((iCord.x = grid4Cord.rht) and ((iCord.y >= grid4Cord.top) and (iCord.y <= grid4Cord.bot)))then
    127             1                    ***0***                 elsif ((iCord.y = grid3Cord.bot) and ((iCord.x >= grid3Cord.lft) and (iCord.x <= grid3Cord.rht)))then
    131             1                    ***0***                 elsif ((iCord.y = grid3Cord.top) and ((iCord.x >= grid3Cord.lft) and (iCord.x <= grid3Cord.rht)))then
    135             1                    ***0***                 elsif ((iCord.x = grid3Cord.lft) and ((iCord.y >= grid3Cord.top) and (iCord.y <= grid3Cord.bot)))then
    139             1                    ***0***                 elsif ((iCord.x = grid3Cord.rht) and ((iCord.y >= grid3Cord.top) and (iCord.y <= grid3Cord.bot)))then
    146             1                    ***0***                 elsif ((iCord.y = grid2Cord.bot) and ((iCord.x >= grid2Cord.lft) and (iCord.x <= grid3Cord.rht)))then
    150             1                    ***0***                 elsif ((iCord.y = grid2Cord.top) and ((iCord.x >= grid2Cord.lft) and (iCord.x <= grid3Cord.rht)))then
    154             1                    ***0***                 elsif ((iCord.x = grid2Cord.lft) and ((iCord.y >= grid2Cord.top) and (iCord.y <= grid2Cord.bot)))then
    158             1                    ***0***                 elsif ((iCord.x = grid3Cord.rht) and ((iCord.y >= grid2Cord.top) and (iCord.y <= grid2Cord.bot)))then
    165             1                    ***0***                 elsif ((iCord.y = grid1Cord.bot) and ((iCord.x >= grid1Cord.lft) and (iCord.x <= grid1Cord.rht)))then
    169             1                    ***0***                 elsif ((iCord.y = grid1Cord.top) and ((iCord.x >= grid1Cord.lft) and (iCord.x <= grid1Cord.rht)))then
    173             1                    ***0***                 elsif ((iCord.x = grid1Cord.lft) and ((iCord.y >= grid1Cord.top) and (iCord.y <= grid1Cord.bot)))then
    177             1                    ***0***                 elsif ((iCord.x = grid1Cord.rht) and ((iCord.y >= grid1Cord.top) and (iCord.y <= grid1Cord.bot)))then
    181             1                         59                 else
Branch totals: 1 hit of 17 branches = 5.8%

------------------------------------IF Branch------------------------------------
    187                                      139     Count coming in to IF
    187             1                         75             if (iEof = hi)then
                                              64     All False Count
Branch totals: 2 hits of 2 branches = 100.0%


Condition Coverage:
    Enabled Coverage            Active   Covered    Misses % Covered
    ----------------            ------      ----    ------ ---------
    FEC Condition Terms             48         0        48       0.0

================================Condition Details================================

Condition Coverage for file ../modules/dut/pixelCord.vhd --

----------------Focused Condition View-------------------
Line       108 Item    1  ((iCord.y = grid4Cord.bot) and ((iCord.x >= grid4Cord.lft) and (iCord.x <= grid4Cord.rht)))
Condition totals: 0 of 3 input terms covered = 0.0%

                  Input Term   Covered  Reason for no coverage   Hint
                 -----------  --------  -----------------------  --------------
   (iCord.y = grid4Cord.bot)         N  '_1' not hit             Hit '_1'
  (iCord.x >= grid4Cord.lft)         N  No hits                  Hit '_0' and '_1'
  (iCord.x <= grid4Cord.rht)         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target                    Non-masking condition(s)      
 ---------  ---------  --------------------          -------------------------     
  Row   1:          1  (iCord.y = grid4Cord.bot)_0   -                             
  Row   2:    ***0***  (iCord.y = grid4Cord.bot)_1   ((iCord.x >= grid4Cord.lft) and (iCord.x <= grid4Cord.rht))
  Row   3:    ***0***  (iCord.x >= grid4Cord.lft)_0  (iCord.y = grid4Cord.bot)     
  Row   4:    ***0***  (iCord.x >= grid4Cord.lft)_1  (iCord.y = grid4Cord.bot) && (iCord.x <= grid4Cord.rht)
  Row   5:    ***0***  (iCord.x <= grid4Cord.rht)_0  (iCord.y = grid4Cord.bot) && (iCord.x >= grid4Cord.lft)
  Row   6:    ***0***  (iCord.x <= grid4Cord.rht)_1  (iCord.y = grid4Cord.bot) && (iCord.x >= grid4Cord.lft)

----------------Focused Condition View-------------------
Line       112 Item    1  ((iCord.y = grid4Cord.top) and ((iCord.x >= grid4Cord.lft) and (iCord.x <= grid4Cord.rht)))
Condition totals: 0 of 3 input terms covered = 0.0%

                  Input Term   Covered  Reason for no coverage   Hint
                 -----------  --------  -----------------------  --------------
   (iCord.y = grid4Cord.top)         N  '_1' not hit             Hit '_1'
  (iCord.x >= grid4Cord.lft)         N  No hits                  Hit '_0' and '_1'
  (iCord.x <= grid4Cord.rht)         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target                    Non-masking condition(s)      
 ---------  ---------  --------------------          -------------------------     
  Row   1:          1  (iCord.y = grid4Cord.top)_0   -                             
  Row   2:    ***0***  (iCord.y = grid4Cord.top)_1   ((iCord.x >= grid4Cord.lft) and (iCord.x <= grid4Cord.rht))
  Row   3:    ***0***  (iCord.x >= grid4Cord.lft)_0  (iCord.y = grid4Cord.top)     
  Row   4:    ***0***  (iCord.x >= grid4Cord.lft)_1  (iCord.y = grid4Cord.top) && (iCord.x <= grid4Cord.rht)
  Row   5:    ***0***  (iCord.x <= grid4Cord.rht)_0  (iCord.y = grid4Cord.top) && (iCord.x >= grid4Cord.lft)
  Row   6:    ***0***  (iCord.x <= grid4Cord.rht)_1  (iCord.y = grid4Cord.top) && (iCord.x >= grid4Cord.lft)

----------------Focused Condition View-------------------
Line       116 Item    1  ((iCord.x = grid4Cord.lft) and ((iCord.y >= grid4Cord.top) and (iCord.y <= grid4Cord.bot)))
Condition totals: 0 of 3 input terms covered = 0.0%

                  Input Term   Covered  Reason for no coverage   Hint
                 -----------  --------  -----------------------  --------------
   (iCord.x = grid4Cord.lft)         N  '_1' not hit             Hit '_1'
  (iCord.y >= grid4Cord.top)         N  No hits                  Hit '_0' and '_1'
  (iCord.y <= grid4Cord.bot)         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target                    Non-masking condition(s)      
 ---------  ---------  --------------------          -------------------------     
  Row   1:          1  (iCord.x = grid4Cord.lft)_0   -                             
  Row   2:    ***0***  (iCord.x = grid4Cord.lft)_1   ((iCord.y >= grid4Cord.top) and (iCord.y <= grid4Cord.bot))
  Row   3:    ***0***  (iCord.y >= grid4Cord.top)_0  (iCord.x = grid4Cord.lft)     
  Row   4:    ***0***  (iCord.y >= grid4Cord.top)_1  (iCord.x = grid4Cord.lft) && (iCord.y <= grid4Cord.bot)
  Row   5:    ***0***  (iCord.y <= grid4Cord.bot)_0  (iCord.x = grid4Cord.lft) && (iCord.y >= grid4Cord.top)
  Row   6:    ***0***  (iCord.y <= grid4Cord.bot)_1  (iCord.x = grid4Cord.lft) && (iCord.y >= grid4Cord.top)

----------------Focused Condition View-------------------
Line       120 Item    1  ((iCord.x = grid4Cord.rht) and ((iCord.y >= grid4Cord.top) and (iCord.y <= grid4Cord.bot)))
Condition totals: 0 of 3 input terms covered = 0.0%

                  Input Term   Covered  Reason for no coverage   Hint
                 -----------  --------  -----------------------  --------------
   (iCord.x = grid4Cord.rht)         N  '_1' not hit             Hit '_1'
  (iCord.y >= grid4Cord.top)         N  No hits                  Hit '_0' and '_1'
  (iCord.y <= grid4Cord.bot)         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target                    Non-masking condition(s)      
 ---------  ---------  --------------------          -------------------------     
  Row   1:          1  (iCord.x = grid4Cord.rht)_0   -                             
  Row   2:    ***0***  (iCord.x = grid4Cord.rht)_1   ((iCord.y >= grid4Cord.top) and (iCord.y <= grid4Cord.bot))
  Row   3:    ***0***  (iCord.y >= grid4Cord.top)_0  (iCord.x = grid4Cord.rht)     
  Row   4:    ***0***  (iCord.y >= grid4Cord.top)_1  (iCord.x = grid4Cord.rht) && (iCord.y <= grid4Cord.bot)
  Row   5:    ***0***  (iCord.y <= grid4Cord.bot)_0  (iCord.x = grid4Cord.rht) && (iCord.y >= grid4Cord.top)
  Row   6:    ***0***  (iCord.y <= grid4Cord.bot)_1  (iCord.x = grid4Cord.rht) && (iCord.y >= grid4Cord.top)

----------------Focused Condition View-------------------
Line       127 Item    1  ((iCord.y = grid3Cord.bot) and ((iCord.x >= grid3Cord.lft) and (iCord.x <= grid3Cord.rht)))
Condition totals: 0 of 3 input terms covered = 0.0%

                  Input Term   Covered  Reason for no coverage   Hint
                 -----------  --------  -----------------------  --------------
   (iCord.y = grid3Cord.bot)         N  '_1' not hit             Hit '_1'
  (iCord.x >= grid3Cord.lft)         N  No hits                  Hit '_0' and '_1'
  (iCord.x <= grid3Cord.rht)         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target                    Non-masking condition(s)      
 ---------  ---------  --------------------          -------------------------     
  Row   1:          1  (iCord.y = grid3Cord.bot)_0   -                             
  Row   2:    ***0***  (iCord.y = grid3Cord.bot)_1   ((iCord.x >= grid3Cord.lft) and (iCord.x <= grid3Cord.rht))
  Row   3:    ***0***  (iCord.x >= grid3Cord.lft)_0  (iCord.y = grid3Cord.bot)     
  Row   4:    ***0***  (iCord.x >= grid3Cord.lft)_1  (iCord.y = grid3Cord.bot) && (iCord.x <= grid3Cord.rht)
  Row   5:    ***0***  (iCord.x <= grid3Cord.rht)_0  (iCord.y = grid3Cord.bot) && (iCord.x >= grid3Cord.lft)
  Row   6:    ***0***  (iCord.x <= grid3Cord.rht)_1  (iCord.y = grid3Cord.bot) && (iCord.x >= grid3Cord.lft)

----------------Focused Condition View-------------------
Line       131 Item    1  ((iCord.y = grid3Cord.top) and ((iCord.x >= grid3Cord.lft) and (iCord.x <= grid3Cord.rht)))
Condition totals: 0 of 3 input terms covered = 0.0%

                  Input Term   Covered  Reason for no coverage   Hint
                 -----------  --------  -----------------------  --------------
   (iCord.y = grid3Cord.top)         N  '_1' not hit             Hit '_1'
  (iCord.x >= grid3Cord.lft)         N  No hits                  Hit '_0' and '_1'
  (iCord.x <= grid3Cord.rht)         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target                    Non-masking condition(s)      
 ---------  ---------  --------------------          -------------------------     
  Row   1:          1  (iCord.y = grid3Cord.top)_0   -                             
  Row   2:    ***0***  (iCord.y = grid3Cord.top)_1   ((iCord.x >= grid3Cord.lft) and (iCord.x <= grid3Cord.rht))
  Row   3:    ***0***  (iCord.x >= grid3Cord.lft)_0  (iCord.y = grid3Cord.top)     
  Row   4:    ***0***  (iCord.x >= grid3Cord.lft)_1  (iCord.y = grid3Cord.top) && (iCord.x <= grid3Cord.rht)
  Row   5:    ***0***  (iCord.x <= grid3Cord.rht)_0  (iCord.y = grid3Cord.top) && (iCord.x >= grid3Cord.lft)
  Row   6:    ***0***  (iCord.x <= grid3Cord.rht)_1  (iCord.y = grid3Cord.top) && (iCord.x >= grid3Cord.lft)

----------------Focused Condition View-------------------
Line       135 Item    1  ((iCord.x = grid3Cord.lft) and ((iCord.y >= grid3Cord.top) and (iCord.y <= grid3Cord.bot)))
Condition totals: 0 of 3 input terms covered = 0.0%

                  Input Term   Covered  Reason for no coverage   Hint
                 -----------  --------  -----------------------  --------------
   (iCord.x = grid3Cord.lft)         N  '_1' not hit             Hit '_1'
  (iCord.y >= grid3Cord.top)         N  No hits                  Hit '_0' and '_1'
  (iCord.y <= grid3Cord.bot)         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target                    Non-masking condition(s)      
 ---------  ---------  --------------------          -------------------------     
  Row   1:          1  (iCord.x = grid3Cord.lft)_0   -                             
  Row   2:    ***0***  (iCord.x = grid3Cord.lft)_1   ((iCord.y >= grid3Cord.top) and (iCord.y <= grid3Cord.bot))
  Row   3:    ***0***  (iCord.y >= grid3Cord.top)_0  (iCord.x = grid3Cord.lft)     
  Row   4:    ***0***  (iCord.y >= grid3Cord.top)_1  (iCord.x = grid3Cord.lft) && (iCord.y <= grid3Cord.bot)
  Row   5:    ***0***  (iCord.y <= grid3Cord.bot)_0  (iCord.x = grid3Cord.lft) && (iCord.y >= grid3Cord.top)
  Row   6:    ***0***  (iCord.y <= grid3Cord.bot)_1  (iCord.x = grid3Cord.lft) && (iCord.y >= grid3Cord.top)

----------------Focused Condition View-------------------
Line       139 Item    1  ((iCord.x = grid3Cord.rht) and ((iCord.y >= grid3Cord.top) and (iCord.y <= grid3Cord.bot)))
Condition totals: 0 of 3 input terms covered = 0.0%

                  Input Term   Covered  Reason for no coverage   Hint
                 -----------  --------  -----------------------  --------------
   (iCord.x = grid3Cord.rht)         N  '_1' not hit             Hit '_1'
  (iCord.y >= grid3Cord.top)         N  No hits                  Hit '_0' and '_1'
  (iCord.y <= grid3Cord.bot)         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target                    Non-masking condition(s)      
 ---------  ---------  --------------------          -------------------------     
  Row   1:          1  (iCord.x = grid3Cord.rht)_0   -                             
  Row   2:    ***0***  (iCord.x = grid3Cord.rht)_1   ((iCord.y >= grid3Cord.top) and (iCord.y <= grid3Cord.bot))
  Row   3:    ***0***  (iCord.y >= grid3Cord.top)_0  (iCord.x = grid3Cord.rht)     
  Row   4:    ***0***  (iCord.y >= grid3Cord.top)_1  (iCord.x = grid3Cord.rht) && (iCord.y <= grid3Cord.bot)
  Row   5:    ***0***  (iCord.y <= grid3Cord.bot)_0  (iCord.x = grid3Cord.rht) && (iCord.y >= grid3Cord.top)
  Row   6:    ***0***  (iCord.y <= grid3Cord.bot)_1  (iCord.x = grid3Cord.rht) && (iCord.y >= grid3Cord.top)

----------------Focused Condition View-------------------
Line       146 Item    1  ((iCord.y = grid2Cord.bot) and ((iCord.x >= grid2Cord.lft) and (iCord.x <= grid3Cord.rht)))
Condition totals: 0 of 3 input terms covered = 0.0%

                  Input Term   Covered  Reason for no coverage   Hint
                 -----------  --------  -----------------------  --------------
   (iCord.y = grid2Cord.bot)         N  '_1' not hit             Hit '_1'
  (iCord.x >= grid2Cord.lft)         N  No hits                  Hit '_0' and '_1'
  (iCord.x <= grid3Cord.rht)         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target                    Non-masking condition(s)      
 ---------  ---------  --------------------          -------------------------     
  Row   1:          1  (iCord.y = grid2Cord.bot)_0   -                             
  Row   2:    ***0***  (iCord.y = grid2Cord.bot)_1   ((iCord.x >= grid2Cord.lft) and (iCord.x <= grid3Cord.rht))
  Row   3:    ***0***  (iCord.x >= grid2Cord.lft)_0  (iCord.y = grid2Cord.bot)     
  Row   4:    ***0***  (iCord.x >= grid2Cord.lft)_1  (iCord.y = grid2Cord.bot) && (iCord.x <= grid3Cord.rht)
  Row   5:    ***0***  (iCord.x <= grid3Cord.rht)_0  (iCord.y = grid2Cord.bot) && (iCord.x >= grid2Cord.lft)
  Row   6:    ***0***  (iCord.x <= grid3Cord.rht)_1  (iCord.y = grid2Cord.bot) && (iCord.x >= grid2Cord.lft)

----------------Focused Condition View-------------------
Line       150 Item    1  ((iCord.y = grid2Cord.top) and ((iCord.x >= grid2Cord.lft) and (iCord.x <= grid3Cord.rht)))
Condition totals: 0 of 3 input terms covered = 0.0%

                  Input Term   Covered  Reason for no coverage   Hint
                 -----------  --------  -----------------------  --------------
   (iCord.y = grid2Cord.top)         N  '_1' not hit             Hit '_1'
  (iCord.x >= grid2Cord.lft)         N  No hits                  Hit '_0' and '_1'
  (iCord.x <= grid3Cord.rht)         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target                    Non-masking condition(s)      
 ---------  ---------  --------------------          -------------------------     
  Row   1:          1  (iCord.y = grid2Cord.top)_0   -                             
  Row   2:    ***0***  (iCord.y = grid2Cord.top)_1   ((iCord.x >= grid2Cord.lft) and (iCord.x <= grid3Cord.rht))
  Row   3:    ***0***  (iCord.x >= grid2Cord.lft)_0  (iCord.y = grid2Cord.top)     
  Row   4:    ***0***  (iCord.x >= grid2Cord.lft)_1  (iCord.y = grid2Cord.top) && (iCord.x <= grid3Cord.rht)
  Row   5:    ***0***  (iCord.x <= grid3Cord.rht)_0  (iCord.y = grid2Cord.top) && (iCord.x >= grid2Cord.lft)
  Row   6:    ***0***  (iCord.x <= grid3Cord.rht)_1  (iCord.y = grid2Cord.top) && (iCord.x >= grid2Cord.lft)

----------------Focused Condition View-------------------
Line       154 Item    1  ((iCord.x = grid2Cord.lft) and ((iCord.y >= grid2Cord.top) and (iCord.y <= grid2Cord.bot)))
Condition totals: 0 of 3 input terms covered = 0.0%

                  Input Term   Covered  Reason for no coverage   Hint
                 -----------  --------  -----------------------  --------------
   (iCord.x = grid2Cord.lft)         N  '_1' not hit             Hit '_1'
  (iCord.y >= grid2Cord.top)         N  No hits                  Hit '_0' and '_1'
  (iCord.y <= grid2Cord.bot)         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target                    Non-masking condition(s)      
 ---------  ---------  --------------------          -------------------------     
  Row   1:          1  (iCord.x = grid2Cord.lft)_0   -                             
  Row   2:    ***0***  (iCord.x = grid2Cord.lft)_1   ((iCord.y >= grid2Cord.top) and (iCord.y <= grid2Cord.bot))
  Row   3:    ***0***  (iCord.y >= grid2Cord.top)_0  (iCord.x = grid2Cord.lft)     
  Row   4:    ***0***  (iCord.y >= grid2Cord.top)_1  (iCord.x = grid2Cord.lft) && (iCord.y <= grid2Cord.bot)
  Row   5:    ***0***  (iCord.y <= grid2Cord.bot)_0  (iCord.x = grid2Cord.lft) && (iCord.y >= grid2Cord.top)
  Row   6:    ***0***  (iCord.y <= grid2Cord.bot)_1  (iCord.x = grid2Cord.lft) && (iCord.y >= grid2Cord.top)

----------------Focused Condition View-------------------
Line       158 Item    1  ((iCord.x = grid3Cord.rht) and ((iCord.y >= grid2Cord.top) and (iCord.y <= grid2Cord.bot)))
Condition totals: 0 of 3 input terms covered = 0.0%

                  Input Term   Covered  Reason for no coverage   Hint
                 -----------  --------  -----------------------  --------------
   (iCord.x = grid3Cord.rht)         N  '_1' not hit             Hit '_1'
  (iCord.y >= grid2Cord.top)         N  No hits                  Hit '_0' and '_1'
  (iCord.y <= grid2Cord.bot)         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target                    Non-masking condition(s)      
 ---------  ---------  --------------------          -------------------------     
  Row   1:          1  (iCord.x = grid3Cord.rht)_0   -                             
  Row   2:    ***0***  (iCord.x = grid3Cord.rht)_1   ((iCord.y >= grid2Cord.top) and (iCord.y <= grid2Cord.bot))
  Row   3:    ***0***  (iCord.y >= grid2Cord.top)_0  (iCord.x = grid3Cord.rht)     
  Row   4:    ***0***  (iCord.y >= grid2Cord.top)_1  (iCord.x = grid3Cord.rht) && (iCord.y <= grid2Cord.bot)
  Row   5:    ***0***  (iCord.y <= grid2Cord.bot)_0  (iCord.x = grid3Cord.rht) && (iCord.y >= grid2Cord.top)
  Row   6:    ***0***  (iCord.y <= grid2Cord.bot)_1  (iCord.x = grid3Cord.rht) && (iCord.y >= grid2Cord.top)

----------------Focused Condition View-------------------
Line       165 Item    1  ((iCord.y = grid1Cord.bot) and ((iCord.x >= grid1Cord.lft) and (iCord.x <= grid1Cord.rht)))
Condition totals: 0 of 3 input terms covered = 0.0%

                  Input Term   Covered  Reason for no coverage   Hint
                 -----------  --------  -----------------------  --------------
   (iCord.y = grid1Cord.bot)         N  '_1' not hit             Hit '_1'
  (iCord.x >= grid1Cord.lft)         N  No hits                  Hit '_0' and '_1'
  (iCord.x <= grid1Cord.rht)         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target                    Non-masking condition(s)      
 ---------  ---------  --------------------          -------------------------     
  Row   1:          1  (iCord.y = grid1Cord.bot)_0   -                             
  Row   2:    ***0***  (iCord.y = grid1Cord.bot)_1   ((iCord.x >= grid1Cord.lft) and (iCord.x <= grid1Cord.rht))
  Row   3:    ***0***  (iCord.x >= grid1Cord.lft)_0  (iCord.y = grid1Cord.bot)     
  Row   4:    ***0***  (iCord.x >= grid1Cord.lft)_1  (iCord.y = grid1Cord.bot) && (iCord.x <= grid1Cord.rht)
  Row   5:    ***0***  (iCord.x <= grid1Cord.rht)_0  (iCord.y = grid1Cord.bot) && (iCord.x >= grid1Cord.lft)
  Row   6:    ***0***  (iCord.x <= grid1Cord.rht)_1  (iCord.y = grid1Cord.bot) && (iCord.x >= grid1Cord.lft)

----------------Focused Condition View-------------------
Line       169 Item    1  ((iCord.y = grid1Cord.top) and ((iCord.x >= grid1Cord.lft) and (iCord.x <= grid1Cord.rht)))
Condition totals: 0 of 3 input terms covered = 0.0%

                  Input Term   Covered  Reason for no coverage   Hint
                 -----------  --------  -----------------------  --------------
   (iCord.y = grid1Cord.top)         N  '_1' not hit             Hit '_1'
  (iCord.x >= grid1Cord.lft)         N  No hits                  Hit '_0' and '_1'
  (iCord.x <= grid1Cord.rht)         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target                    Non-masking condition(s)      
 ---------  ---------  --------------------          -------------------------     
  Row   1:          1  (iCord.y = grid1Cord.top)_0   -                             
  Row   2:    ***0***  (iCord.y = grid1Cord.top)_1   ((iCord.x >= grid1Cord.lft) and (iCord.x <= grid1Cord.rht))
  Row   3:    ***0***  (iCord.x >= grid1Cord.lft)_0  (iCord.y = grid1Cord.top)     
  Row   4:    ***0***  (iCord.x >= grid1Cord.lft)_1  (iCord.y = grid1Cord.top) && (iCord.x <= grid1Cord.rht)
  Row   5:    ***0***  (iCord.x <= grid1Cord.rht)_0  (iCord.y = grid1Cord.top) && (iCord.x >= grid1Cord.lft)
  Row   6:    ***0***  (iCord.x <= grid1Cord.rht)_1  (iCord.y = grid1Cord.top) && (iCord.x >= grid1Cord.lft)

----------------Focused Condition View-------------------
Line       173 Item    1  ((iCord.x = grid1Cord.lft) and ((iCord.y >= grid1Cord.top) and (iCord.y <= grid1Cord.bot)))
Condition totals: 0 of 3 input terms covered = 0.0%

                  Input Term   Covered  Reason for no coverage   Hint
                 -----------  --------  -----------------------  --------------
   (iCord.x = grid1Cord.lft)         N  '_1' not hit             Hit '_1'
  (iCord.y >= grid1Cord.top)         N  No hits                  Hit '_0' and '_1'
  (iCord.y <= grid1Cord.bot)         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target                    Non-masking condition(s)      
 ---------  ---------  --------------------          -------------------------     
  Row   1:          1  (iCord.x = grid1Cord.lft)_0   -                             
  Row   2:    ***0***  (iCord.x = grid1Cord.lft)_1   ((iCord.y >= grid1Cord.top) and (iCord.y <= grid1Cord.bot))
  Row   3:    ***0***  (iCord.y >= grid1Cord.top)_0  (iCord.x = grid1Cord.lft)     
  Row   4:    ***0***  (iCord.y >= grid1Cord.top)_1  (iCord.x = grid1Cord.lft) && (iCord.y <= grid1Cord.bot)
  Row   5:    ***0***  (iCord.y <= grid1Cord.bot)_0  (iCord.x = grid1Cord.lft) && (iCord.y >= grid1Cord.top)
  Row   6:    ***0***  (iCord.y <= grid1Cord.bot)_1  (iCord.x = grid1Cord.lft) && (iCord.y >= grid1Cord.top)

----------------Focused Condition View-------------------
Line       177 Item    1  ((iCord.x = grid1Cord.rht) and ((iCord.y >= grid1Cord.top) and (iCord.y <= grid1Cord.bot)))
Condition totals: 0 of 3 input terms covered = 0.0%

                  Input Term   Covered  Reason for no coverage   Hint
                 -----------  --------  -----------------------  --------------
   (iCord.x = grid1Cord.rht)         N  '_1' not hit             Hit '_1'
  (iCord.y >= grid1Cord.top)         N  No hits                  Hit '_0' and '_1'
  (iCord.y <= grid1Cord.bot)         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target                    Non-masking condition(s)      
 ---------  ---------  --------------------          -------------------------     
  Row   1:          1  (iCord.x = grid1Cord.rht)_0   -                             
  Row   2:    ***0***  (iCord.x = grid1Cord.rht)_1   ((iCord.y >= grid1Cord.top) and (iCord.y <= grid1Cord.bot))
  Row   3:    ***0***  (iCord.y >= grid1Cord.top)_0  (iCord.x = grid1Cord.rht)     
  Row   4:    ***0***  (iCord.y >= grid1Cord.top)_1  (iCord.x = grid1Cord.rht) && (iCord.y <= grid1Cord.bot)
  Row   5:    ***0***  (iCord.y <= grid1Cord.bot)_0  (iCord.x = grid1Cord.rht) && (iCord.y >= grid1Cord.top)
  Row   6:    ***0***  (iCord.y <= grid1Cord.bot)_1  (iCord.x = grid1Cord.rht) && (iCord.y >= grid1Cord.top)


Expression Coverage:
    Enabled Coverage            Active   Covered    Misses % Covered
    ----------------            ------      ----    ------ ---------
    FEC Expression Terms             0         0         0     100.0
FSM Coverage:
    Enabled Coverage            Active      Hits    Misses % Covered
    ----------------            ------      ----    ------ ---------
    FSMs                                                       100.0
        States                       0         0         0     100.0
        Transitions                  0         0         0     100.0

=================================================================================
=== File: ../modules/dut/template.v
=================================================================================
Statement Coverage:
    Enabled Coverage            Active      Hits    Misses % Covered
    ----------------            ------      ----    ------ ---------
    Stmts                           24         8        16      33.3

================================Statement Details================================

Statement Coverage for file ../modules/dut/template.v --

    1                                                module template(input wire clk,
    2                                                		   input wire en_i,
    3                                                		   input wire ina,
    4                                                		   input wire inb,
    5                                                		   output reg en_o,
    6                                                		   output reg out);
    7                                                	integer counter, state;
    8                                                	reg[1:0] temp_a, temp_b;
    9                                                	reg[2:0] temp_out;
    10                                               	//Init
    11                                               	initial begin
    12              1                          1     		counter = 0;
    13              1                          1     		temp_a = 2'b00;
    14              1                          1     		temp_b = 2'b00;
    15              1                          1     		temp_out = 3'b000;
    16              1                          1     		out = 1;
    17              1                          1     		en_o <= 0;
    18              1                          1     		state = 0;
    19                                               	end
    20              1                        220     	always@(posedge clk)
    21                                               	begin
    22                                               		//State 0: Wait for en_i
    23                                               		if(en_i==1'b1)
    24                                               		begin
    25              1                    ***0***     			state = 1;
    26                                               		end
    27                                               		case(state)
    28                                               			//State 1: Start reading inputs
    29                                               			1: begin
    30              1                    ***0***     				temp_a = temp_a << 1;
    31              1                    ***0***     				temp_a = temp_a | ina;
    32              1                    ***0***     				temp_b = temp_b << 1;
    33              1                    ***0***     				temp_b = temp_b | inb;
    34              1                    ***0***     				counter = counter + 1;
    35                                               				//After 2 bits, do the operation an move to the next state
    36                                               				if(counter==2) begin
    37              1                    ***0***     					temp_out = temp_a + temp_b;
    38              1                    ***0***     					state = 2;
    39                                               				end
    40                                               			end
    41                                               			//State 2: Enable en_o and sends result to the output
    42                                               			2: begin
    43              1                    ***0***     				out <= temp_out[2];
    44              1                    ***0***     				temp_out = temp_out << 1;
    45              1                    ***0***     				counter = counter + 1;
    46              1                    ***0***     				if(counter==3) en_o <= 1'b1;
    47              1                    ***0***     				if(counter==4) en_o <= 1'b0;
    48                                               				if(counter==6) begin
    49              1                    ***0***     					counter = 0;
    50              1                    ***0***     					out <= 1'b1;
    51              1                    ***0***     					state = 0;
    52                                               				end
    53                                               			end
    54                                               		endcase
    55                                               	end
    56                                               endmodule

Branch Coverage:
    Enabled Coverage            Active      Hits    Misses % Covered
    ----------------            ------      ----    ------ ---------
    Branches                        13         2        11      15.3

================================Branch Details================================

Branch Coverage for file ../modules/dut/template.v --

------------------------------------IF Branch------------------------------------
    23                                       220     Count coming in to IF
    23              1                    ***0***     		if(en_i==1'b1)
                                             220     All False Count
Branch totals: 1 hit of 2 branches = 50.0%

------------------------------------CASE Branch------------------------------------
    27                                       220     Count coming in to CASE
    29              1                    ***0***     			1: begin
    42              1                    ***0***     			2: begin
                                             220     All False Count
Branch totals: 1 hit of 3 branches = 33.3%

------------------------------------IF Branch------------------------------------
    36                                   ***0***     Count coming in to IF
    36              1                    ***0***     				if(counter==2) begin
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.0%

------------------------------------IF Branch------------------------------------
    46                                   ***0***     Count coming in to IF
    46              1                    ***0***     				if(counter==3) en_o <= 1'b1;
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.0%

------------------------------------IF Branch------------------------------------
    47                                   ***0***     Count coming in to IF
    47              1                    ***0***     				if(counter==4) en_o <= 1'b0;
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.0%

------------------------------------IF Branch------------------------------------
    48                                   ***0***     Count coming in to IF
    48              1                    ***0***     				if(counter==6) begin
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.0%


Condition Coverage:
    Enabled Coverage            Active   Covered    Misses % Covered
    ----------------            ------      ----    ------ ---------
    FEC Condition Terms              0         0         0     100.0
Expression Coverage:
    Enabled Coverage            Active   Covered    Misses % Covered
    ----------------            ------      ----    ------ ---------
    FEC Expression Terms             0         0         0     100.0
FSM Coverage:
    Enabled Coverage            Active      Hits    Misses % Covered
    ----------------            ------      ----    ------ ---------
    FSMs                                                         0.0
        States                       3         0         3       0.0
        Transitions                  4         0         4       0.0

================================FSM Details================================

FSM Coverage for file ../modules/dut/template.v --

FSM_ID: state
    Current State Object : state
    ----------------------
    State Value MapInfo :
    ---------------------
Line          State Name               Value
----          ----------               -----
  29                 st0                   1
  42                 st1                   2
  25                 st2                   0
    Uncovered States :
    ------------------
                   State
                   -----
                     st0
                     st1
                     st2
    Uncovered Transitions :
    -----------------------
Line            Trans_ID          Transition          
----            --------          ----------          
  38                   0          st0 -> st1          
  51                   1          st1 -> st2          
  25                   2          st1 -> st0          
  25                   3          st2 -> st0          


    Summary                     Active      Hits    Misses % Covered
    -------                     ------      ----    ------ ---------
        States                       3         0         3       0.0
        Transitions                  4         0         4       0.0

=================================================================================
=== File: ../modules/dut/vfpConfig.vhd
=================================================================================
Statement Coverage:
    Enabled Coverage            Active      Hits    Misses % Covered
    ----------------            ------      ----    ------ ---------
    Stmts                          492        95       397      19.3

================================Statement Details================================

Statement Coverage for file ../modules/dut/vfpConfig.vhd --

    1                                                --02072019 [02-07-2019]
    2                                                library ieee;
    3                                                use ieee.std_logic_1164.all;
    4                                                use ieee.numeric_std.all;
    5                                                use work.constantspackage.all;
    6                                                use work.vpfRecords.all;
    7                                                
    8                                                entity vfpConfig is
    9                                                    port (
    10                                                       ACLK               : in std_logic;
    11                                                       ARESETN            : in std_logic;
    12                                                       AWADDR             : in std_logic_vector(7 downto 0);
    13                                                       AWPROT             : in std_logic_vector(2 downto 0);
    14                                                       AWVALID            : in std_logic;
    15                                                       AWREADY            : out std_logic;
    16                                                       WDATA              : in std_logic_vector(31 downto 0);
    17                                                       WSTRB              : in std_logic_vector(3 downto 0);
    18                                                       WVALID             : in std_logic;
    19                                                       WREADY             : out std_logic;
    20                                                       BRESP              : out std_logic_vector(1 downto 0);
    21                                                       BVALID             : out std_logic;
    22                                                       BREADY             : in std_logic;
    23                                                       ARADDR             : in std_logic_vector(7 downto 0);
    24                                                       ARPROT             : in std_logic_vector(2 downto 0);
    25                                                       ARVALID            : in std_logic;
    26                                                       ARREADY            : out std_logic;
    27                                                       RDATA              : out std_logic_vector(31 downto 0);
    28                                                       RRESP              : out std_logic_vector(1 downto 0);
    29                                                       RVALID             : out std_logic;
    30                                                       RREADY             : in std_logic);
    31                                               end vfpConfig;
    32                                               architecture arch_imp of vfpConfig is
    33                                                   constant C_DATA_WIDTH        : integer := 32;
    34                                                   constant C_ADDR_WIDTH        : integer := 8;
    35                                               	constant ADDR_LSB            : integer := (C_DATA_WIDTH/32)+ 1;
    36                                               	constant OPT_MEM_ADDR_BITS   : integer := 5;
    37                                               	signal axi_awaddr	         : std_logic_vector(C_ADDR_WIDTH-1 downto 0);
    38                                               	signal axi_awready	         : std_logic;
    39                                               	signal axi_wready	         : std_logic;
    40                                               	signal axi_bresp	         : std_logic_vector(1 downto 0);
    41                                               	signal axi_bvalid	         : std_logic;
    42                                               	signal axi_araddr	         : std_logic_vector(C_ADDR_WIDTH-1 downto 0);
    43                                               	signal axi_arready	         : std_logic;
    44                                               	signal axi_rdata	         : std_logic_vector(C_DATA_WIDTH-1 downto 0);
    45                                               	signal axi_rresp	         : std_logic_vector(1 downto 0);
    46                                               	signal axi_rvalid	         : std_logic;
    47                                                   signal slv_reg_rden          : std_logic;
    48                                                   signal slv_reg_wren          : std_logic;
    49                                                   signal reg_data_out          : std_logic_vector(C_DATA_WIDTH-1 downto 0);
    50                                                   signal byte_index            : integer;
    51                                                   signal aw_en                 : std_logic;
    52                                                   signal localRegs             : mRegs;
    53                                                   signal wrRegsOut             : mRegs;
    54                                                   signal rdRegsIn              : mRegs;
    55                                                   
    56                                               begin
    57              1                          2         rdRegsIn            <= wrRegsOut;
    58              1                          2         AWREADY             <= axi_awready;
    59              1                          2         WREADY              <= axi_wready;
    60              1                          2         BRESP               <= axi_bresp;
    61              1                          2         BVALID              <= axi_bvalid;
    62              1                          2         ARREADY             <= axi_arready;
    63              1                          2         RDATA               <= axi_rdata;
    64              1                          2         RRESP               <= axi_rresp;
    65              1                          2         RVALID              <= axi_rvalid;
    66                                                   process (ACLK)
    67                                                   begin
    68                                                     if rising_edge(ACLK) then 
    69                                                       if ARESETN = '0' then
    70              1                          2               axi_awready <= '0';
    71              1                          2               aw_en <= '1';
    72                                                       else
    73                                                         if (axi_awready = '0' and AWVALID = '1' and WVALID = '1' and aw_en = '1') then
    74              1                    ***0***                 axi_awready <= '1';
    75                                                           elsif (BREADY = '1' and axi_bvalid = '1') then
    76              1                    ***0***                     aw_en <= '1';
    77              1                    ***0***                     axi_awready <= '0';
    78                                                         else
    79              1                          1                 axi_awready <= '0';
    80                                                         end if;
    81                                                       end if;
    82                                                     end if;
    83                                                   end process;
    84                                                   process (ACLK)
    85                                                   begin
    86                                                     if rising_edge(ACLK) then 
    87                                                       if ARESETN = '0' then
    88              1                          2               axi_awaddr <= (others => '0');
    89                                                       else
    90                                                         if (axi_awready = '0' and AWVALID = '1' and WVALID = '1' and aw_en = '1') then
    91              1                    ***0***                 axi_awaddr <= AWADDR;
    92                                                         end if;
    93                                                       end if;
    94                                                     end if;                   
    95                                                   end process; 
    96                                                   process (ACLK)
    97                                                   begin
    98                                                     if rising_edge(ACLK) then 
    99                                                       if ARESETN = '0' then
    100             1                          2               axi_wready <= '0';
    101                                                      else
    102                                                        if (axi_wready = '0' and WVALID = '1' and AWVALID = '1' and aw_en = '1') then
    103             1                    ***0***                   axi_wready <= '1';
    104                                                        else
    105             1                          1                 axi_wready <= '0';
    106                                                        end if;
    107                                                      end if;
    108                                                    end if;
    109                                                  end process; 
    110             1                          2         slv_reg_wren <= axi_wready and WVALID and axi_awready and AWVALID ;
    111                                              	process (ACLK)
    112                                              	variable loc_addr :std_logic_vector(OPT_MEM_ADDR_BITS downto 0); 
    113                                              	begin
    114                                              	  if rising_edge(ACLK) then 
    115                                              	    if ARESETN = '0' then
    116             1                         99     	      localRegs.cfigReg0 <= (others => '0');
    117             1                         99     	      localRegs.cfigReg1 <= (others => '0');
    118             1                         99     	      localRegs.cfigReg2 <= (others => '0');
    119             1                         99     	      localRegs.cfigReg3 <= (others => '0');
    120             1                         99     	      localRegs.cfigReg4 <= (others => '0');
    121             1                         99     	      localRegs.cfigReg5 <= (others => '0');
    122             1                         99     	      localRegs.cfigReg6 <= (others => '0');
    123             1                         99     	      localRegs.cfigReg7 <= (others => '0');
    124             1                         99     	      localRegs.cfigReg8 <= (others => '0');
    125             1                         99     	      localRegs.cfigReg9 <= (others => '0');
    126             1                         99     	      localRegs.cfigReg10 <= (others => '0');
    127             1                         99     	      localRegs.cfigReg11 <= (others => '0');
    128             1                         99     	      localRegs.cfigReg12 <= (others => '0');
    129             1                         99     	      localRegs.cfigReg13 <= (others => '0');
    130             1                         99     	      localRegs.cfigReg14 <= (others => '0');
    131             1                         99     	      localRegs.cfigReg15 <= (others => '0');
    132             1                         99     	      localRegs.cfigReg16 <= (others => '0');
    133             1                         99     	      localRegs.cfigReg17 <= (others => '0');
    134             1                         99     	      localRegs.cfigReg18 <= (others => '0');
    135             1                         99     	      localRegs.cfigReg19 <= (others => '0');
    136             1                         99     	      localRegs.cfigReg20 <= (others => '0');
    137             1                         99     	      localRegs.cfigReg21 <= (others => '0');
    138             1                         99     	      localRegs.cfigReg22 <= (others => '0');
    139             1                         99     	      localRegs.cfigReg23 <= (others => '0');
    140             1                         99     	      localRegs.cfigReg24 <= (others => '0');
    141             1                         99     	      localRegs.cfigReg25 <= (others => '0');
    142             1                         99     	      localRegs.cfigReg26 <= (others => '0');
    143             1                         99     	      localRegs.cfigReg27 <= (others => '0');
    144             1                         99     	      localRegs.cfigReg28 <= (others => '0');
    145             1                         99     	      localRegs.cfigReg29 <= (others => '0');
    146             1                         99     	      localRegs.cfigReg30 <= (others => '0');
    147             1                         99     	      localRegs.cfigReg31 <= (others => '0');
    148             1                         99     	      localRegs.cfigReg32 <= (others => '0');
    149             1                         99     	      localRegs.cfigReg33 <= (others => '0');
    150             1                         99     	      localRegs.cfigReg34 <= (others => '0');
    151             1                         99     	      localRegs.cfigReg35 <= (others => '0');
    152             1                         99     	      localRegs.cfigReg36 <= (others => '0');
    153             1                         99     	      localRegs.cfigReg37 <= (others => '0');
    154             1                         99     	      localRegs.cfigReg38 <= (others => '0');
    155             1                         99     	      localRegs.cfigReg39 <= (others => '0');
    156             1                         99     	      localRegs.cfigReg40 <= (others => '0');
    157             1                         99     	      localRegs.cfigReg41 <= (others => '0');
    158             1                         99     	      localRegs.cfigReg42 <= (others => '0');
    159             1                         99     	      localRegs.cfigReg43 <= (others => '0');
    160             1                         99     	      localRegs.cfigReg44 <= (others => '0');
    161             1                         99     	      localRegs.cfigReg45 <= (others => '0');
    162             1                         99     	      localRegs.cfigReg46 <= (others => '0');
    163             1                         99     	      localRegs.cfigReg47 <= (others => '0');
    164             1                         99     	      localRegs.cfigReg48 <= (others => '0');
    165             1                         99     	      localRegs.cfigReg49 <= (others => '0');
    166             1                         99     	      localRegs.cfigReg50 <= (others => '0');
    167             1                         99     	      localRegs.cfigReg51 <= (others => '0');
    168             1                         99     	      localRegs.cfigReg52 <= (others => '0');
    169             1                         99     	      localRegs.cfigReg53 <= (others => '0');
    170             1                         99     	      localRegs.cfigReg54 <= (others => '0');
    171             1                         99     	      localRegs.cfigReg55 <= (others => '0');
    172             1                         99     	      localRegs.cfigReg56 <= (others => '0');
    173             1                         99     	      localRegs.cfigReg57 <= (others => '0');
    174             1                         99     	      localRegs.cfigReg58 <= (others => '0');
    175             1                         99     	      localRegs.cfigReg59 <= (others => '0');
    176             1                         99     	      localRegs.cfigReg60 <= (others => '0');
    177             1                         99     	      localRegs.cfigReg61 <= (others => '0');
    178             1                         99     	      localRegs.cfigReg62 <= (others => '0');
    179             1                         99     	      localRegs.cfigReg63 <= (others => '0');
    180                                              	    else
    181             1                        121     	      loc_addr := axi_awaddr(ADDR_LSB + OPT_MEM_ADDR_BITS downto ADDR_LSB);
    182                                              	      if (slv_reg_wren = '1') then
    183                                              	        case loc_addr is
    184                                              	          when b"000000" =>
    185             1                    ***0***     	            for byte_index in 0 to (C_DATA_WIDTH/8-1) loop
    185             2                    ***0***     
    186                                              	              if ( WSTRB(byte_index) = '1' ) then
    187             1                    ***0***     	                localRegs.cfigReg0(byte_index*8+7 downto byte_index*8) <= WDATA(byte_index*8+7 downto byte_index*8);
    188                                              	              end if;
    189             1                    ***0***     	            end loop;
    190                                              	          when b"000001" =>
    191             1                    ***0***     	            for byte_index in 0 to (C_DATA_WIDTH/8-1) loop
    191             2                    ***0***     
    192                                              	              if ( WSTRB(byte_index) = '1' ) then
    193             1                    ***0***     	                localRegs.cfigReg1(byte_index*8+7 downto byte_index*8) <= WDATA(byte_index*8+7 downto byte_index*8);
    194                                              	              end if;
    195             1                    ***0***     	            end loop;
    196                                              	          when b"000010" =>
    197             1                    ***0***     	            for byte_index in 0 to (C_DATA_WIDTH/8-1) loop
    197             2                    ***0***     
    198                                              	              if ( WSTRB(byte_index) = '1' ) then
    199             1                    ***0***     	                localRegs.cfigReg2(byte_index*8+7 downto byte_index*8) <= WDATA(byte_index*8+7 downto byte_index*8);
    200                                              	              end if;
    201             1                    ***0***     	            end loop;
    202                                              	          when b"000011" =>
    203             1                    ***0***     	            for byte_index in 0 to (C_DATA_WIDTH/8-1) loop
    203             2                    ***0***     
    204                                              	              if ( WSTRB(byte_index) = '1' ) then
    205             1                    ***0***     	                localRegs.cfigReg3(byte_index*8+7 downto byte_index*8) <= WDATA(byte_index*8+7 downto byte_index*8);
    206                                              	              end if;
    207             1                    ***0***     	            end loop;
    208                                              	          when b"000100" =>
    209             1                    ***0***     	            for byte_index in 0 to (C_DATA_WIDTH/8-1) loop
    209             2                    ***0***     
    210                                              	              if ( WSTRB(byte_index) = '1' ) then
    211             1                    ***0***     	                localRegs.cfigReg4(byte_index*8+7 downto byte_index*8) <= WDATA(byte_index*8+7 downto byte_index*8);
    212                                              	              end if;
    213             1                    ***0***     	            end loop;
    214                                              	          when b"000101" =>
    215             1                    ***0***     	            for byte_index in 0 to (C_DATA_WIDTH/8-1) loop
    215             2                    ***0***     
    216                                              	              if ( WSTRB(byte_index) = '1' ) then
    217             1                    ***0***     	                localRegs.cfigReg5(byte_index*8+7 downto byte_index*8) <= WDATA(byte_index*8+7 downto byte_index*8);
    218                                              	              end if;
    219             1                    ***0***     	            end loop;
    220                                              	          when b"000110" =>
    221             1                    ***0***     	            for byte_index in 0 to (C_DATA_WIDTH/8-1) loop
    221             2                    ***0***     
    222                                              	              if ( WSTRB(byte_index) = '1' ) then
    223             1                    ***0***     	                localRegs.cfigReg6(byte_index*8+7 downto byte_index*8) <= WDATA(byte_index*8+7 downto byte_index*8);
    224                                              	              end if;
    225             1                    ***0***     	            end loop;
    226                                              	          when b"000111" =>
    227             1                    ***0***     	            for byte_index in 0 to (C_DATA_WIDTH/8-1) loop
    227             2                    ***0***     
    228                                              	              if ( WSTRB(byte_index) = '1' ) then
    229             1                    ***0***     	                localRegs.cfigReg7(byte_index*8+7 downto byte_index*8) <= WDATA(byte_index*8+7 downto byte_index*8);
    230                                              	              end if;
    231             1                    ***0***     	            end loop;
    232                                              	          when b"001000" =>
    233             1                    ***0***     	            for byte_index in 0 to (C_DATA_WIDTH/8-1) loop
    233             2                    ***0***     
    234                                              	              if ( WSTRB(byte_index) = '1' ) then
    235             1                    ***0***     	                localRegs.cfigReg8(byte_index*8+7 downto byte_index*8) <= WDATA(byte_index*8+7 downto byte_index*8);
    236                                              	              end if;
    237             1                    ***0***     	            end loop;
    238                                              	          when b"001001" =>
    239             1                    ***0***     	            for byte_index in 0 to (C_DATA_WIDTH/8-1) loop
    239             2                    ***0***     
    240                                              	              if ( WSTRB(byte_index) = '1' ) then
    241             1                    ***0***     	                localRegs.cfigReg9(byte_index*8+7 downto byte_index*8) <= WDATA(byte_index*8+7 downto byte_index*8);
    242                                              	              end if;
    243             1                    ***0***     	            end loop;
    244                                              	          when b"001010" =>
    245             1                    ***0***     	            for byte_index in 0 to (C_DATA_WIDTH/8-1) loop
    245             2                    ***0***     
    246                                              	              if ( WSTRB(byte_index) = '1' ) then
    247             1                    ***0***     	                localRegs.cfigReg10(byte_index*8+7 downto byte_index*8) <= WDATA(byte_index*8+7 downto byte_index*8);
    248                                              	              end if;
    249             1                    ***0***     	            end loop;
    250                                              	          when b"001011" =>
    251             1                    ***0***     	            for byte_index in 0 to (C_DATA_WIDTH/8-1) loop
    251             2                    ***0***     
    252                                              	              if ( WSTRB(byte_index) = '1' ) then
    253             1                    ***0***     	                localRegs.cfigReg11(byte_index*8+7 downto byte_index*8) <= WDATA(byte_index*8+7 downto byte_index*8);
    254                                              	              end if;
    255             1                    ***0***     	            end loop;
    256                                              	          when b"001100" =>
    257             1                    ***0***     	            for byte_index in 0 to (C_DATA_WIDTH/8-1) loop
    257             2                    ***0***     
    258                                              	              if ( WSTRB(byte_index) = '1' ) then
    259             1                    ***0***     	                localRegs.cfigReg12(byte_index*8+7 downto byte_index*8) <= WDATA(byte_index*8+7 downto byte_index*8);
    260                                              	              end if;
    261             1                    ***0***     	            end loop;
    262                                              	          when b"001101" =>
    263             1                    ***0***     	            for byte_index in 0 to (C_DATA_WIDTH/8-1) loop
    263             2                    ***0***     
    264                                              	              if ( WSTRB(byte_index) = '1' ) then
    265             1                    ***0***     	                localRegs.cfigReg13(byte_index*8+7 downto byte_index*8) <= WDATA(byte_index*8+7 downto byte_index*8);
    266                                              	              end if;
    267             1                    ***0***     	            end loop;
    268                                              	          when b"001110" =>
    269             1                    ***0***     	            for byte_index in 0 to (C_DATA_WIDTH/8-1) loop
    269             2                    ***0***     
    270                                              	              if ( WSTRB(byte_index) = '1' ) then
    271             1                    ***0***     	                localRegs.cfigReg14(byte_index*8+7 downto byte_index*8) <= WDATA(byte_index*8+7 downto byte_index*8);
    272                                              	              end if;
    273             1                    ***0***     	            end loop;
    274                                              	          when b"001111" =>
    275             1                    ***0***     	            for byte_index in 0 to (C_DATA_WIDTH/8-1) loop
    275             2                    ***0***     
    276                                              	              if ( WSTRB(byte_index) = '1' ) then
    277             1                    ***0***     	                localRegs.cfigReg15(byte_index*8+7 downto byte_index*8) <= WDATA(byte_index*8+7 downto byte_index*8);
    278                                              	              end if;
    279             1                    ***0***     	            end loop;
    280                                              	          when b"010000" =>
    281             1                    ***0***     	            for byte_index in 0 to (C_DATA_WIDTH/8-1) loop
    281             2                    ***0***     
    282                                              	              if ( WSTRB(byte_index) = '1' ) then
    283             1                    ***0***     	                localRegs.cfigReg16(byte_index*8+7 downto byte_index*8) <= WDATA(byte_index*8+7 downto byte_index*8);
    284                                              	              end if;
    285             1                    ***0***     	            end loop;
    286                                              	          when b"010001" =>
    287             1                    ***0***     	            for byte_index in 0 to (C_DATA_WIDTH/8-1) loop
    287             2                    ***0***     
    288                                              	              if ( WSTRB(byte_index) = '1' ) then
    289             1                    ***0***     	                localRegs.cfigReg17(byte_index*8+7 downto byte_index*8) <= WDATA(byte_index*8+7 downto byte_index*8);
    290                                              	              end if;
    291             1                    ***0***     	            end loop;
    292                                              	          when b"010010" =>
    293             1                    ***0***     	            for byte_index in 0 to (C_DATA_WIDTH/8-1) loop
    293             2                    ***0***     
    294                                              	              if ( WSTRB(byte_index) = '1' ) then
    295             1                    ***0***     	                localRegs.cfigReg18(byte_index*8+7 downto byte_index*8) <= WDATA(byte_index*8+7 downto byte_index*8);
    296                                              	              end if;
    297             1                    ***0***     	            end loop;
    298                                              	          when b"010011" =>
    299             1                    ***0***     	            for byte_index in 0 to (C_DATA_WIDTH/8-1) loop
    299             2                    ***0***     
    300                                              	              if ( WSTRB(byte_index) = '1' ) then
    301             1                    ***0***     	                localRegs.cfigReg19(byte_index*8+7 downto byte_index*8) <= WDATA(byte_index*8+7 downto byte_index*8);
    302                                              	              end if;
    303             1                    ***0***     	            end loop;
    304                                              	          when b"010100" =>
    305             1                    ***0***     	            for byte_index in 0 to (C_DATA_WIDTH/8-1) loop
    305             2                    ***0***     
    306                                              	              if ( WSTRB(byte_index) = '1' ) then
    307             1                    ***0***     	                localRegs.cfigReg20(byte_index*8+7 downto byte_index*8) <= WDATA(byte_index*8+7 downto byte_index*8);
    308                                              	              end if;
    309             1                    ***0***     	            end loop;
    310                                              	          when b"010101" =>
    311             1                    ***0***     	            for byte_index in 0 to (C_DATA_WIDTH/8-1) loop
    311             2                    ***0***     
    312                                              	              if ( WSTRB(byte_index) = '1' ) then
    313             1                    ***0***     	                localRegs.cfigReg21(byte_index*8+7 downto byte_index*8) <= WDATA(byte_index*8+7 downto byte_index*8);
    314                                              	              end if;
    315             1                    ***0***     	            end loop;
    316                                              	          when b"010110" =>
    317             1                    ***0***     	            for byte_index in 0 to (C_DATA_WIDTH/8-1) loop
    317             2                    ***0***     
    318                                              	              if ( WSTRB(byte_index) = '1' ) then
    319             1                    ***0***     	                localRegs.cfigReg22(byte_index*8+7 downto byte_index*8) <= WDATA(byte_index*8+7 downto byte_index*8);
    320                                              	              end if;
    321             1                    ***0***     	            end loop;
    322                                              	          when b"010111" =>
    323             1                    ***0***     	            for byte_index in 0 to (C_DATA_WIDTH/8-1) loop
    323             2                    ***0***     
    324                                              	              if ( WSTRB(byte_index) = '1' ) then
    325             1                    ***0***     	                localRegs.cfigReg23(byte_index*8+7 downto byte_index*8) <= WDATA(byte_index*8+7 downto byte_index*8);
    326                                              	              end if;
    327             1                    ***0***     	            end loop;
    328                                              	          when b"011000" =>
    329             1                    ***0***     	            for byte_index in 0 to (C_DATA_WIDTH/8-1) loop
    329             2                    ***0***     
    330                                              	              if ( WSTRB(byte_index) = '1' ) then
    331             1                    ***0***     	                localRegs.cfigReg24(byte_index*8+7 downto byte_index*8) <= WDATA(byte_index*8+7 downto byte_index*8);
    332                                              	              end if;
    333             1                    ***0***     	            end loop;
    334                                              	          when b"011001" =>
    335             1                    ***0***     	            for byte_index in 0 to (C_DATA_WIDTH/8-1) loop
    335             2                    ***0***     
    336                                              	              if ( WSTRB(byte_index) = '1' ) then
    337             1                    ***0***     	                localRegs.cfigReg25(byte_index*8+7 downto byte_index*8) <= WDATA(byte_index*8+7 downto byte_index*8);
    338                                              	              end if;
    339             1                    ***0***     	            end loop;
    340                                              	          when b"011010" =>
    341             1                    ***0***     	            for byte_index in 0 to (C_DATA_WIDTH/8-1) loop
    341             2                    ***0***     
    342                                              	              if ( WSTRB(byte_index) = '1' ) then
    343             1                    ***0***     	                localRegs.cfigReg26(byte_index*8+7 downto byte_index*8) <= WDATA(byte_index*8+7 downto byte_index*8);
    344                                              	              end if;
    345             1                    ***0***     	            end loop;
    346                                              	          when b"011011" =>
    347             1                    ***0***     	            for byte_index in 0 to (C_DATA_WIDTH/8-1) loop
    347             2                    ***0***     
    348                                              	              if ( WSTRB(byte_index) = '1' ) then
    349             1                    ***0***     	                localRegs.cfigReg27(byte_index*8+7 downto byte_index*8) <= WDATA(byte_index*8+7 downto byte_index*8);
    350                                              	              end if;
    351             1                    ***0***     	            end loop;
    352                                              	          when b"011100" =>
    353             1                    ***0***     	            for byte_index in 0 to (C_DATA_WIDTH/8-1) loop
    353             2                    ***0***     
    354                                              	              if ( WSTRB(byte_index) = '1' ) then
    355             1                    ***0***     	                localRegs.cfigReg28(byte_index*8+7 downto byte_index*8) <= WDATA(byte_index*8+7 downto byte_index*8);
    356                                              	              end if;
    357             1                    ***0***     	            end loop;
    358                                              	          when b"011101" =>
    359             1                    ***0***     	            for byte_index in 0 to (C_DATA_WIDTH/8-1) loop
    359             2                    ***0***     
    360                                              	              if ( WSTRB(byte_index) = '1' ) then
    361             1                    ***0***     	                localRegs.cfigReg29(byte_index*8+7 downto byte_index*8) <= WDATA(byte_index*8+7 downto byte_index*8);
    362                                              	              end if;
    363             1                    ***0***     	            end loop;
    364                                              	          when b"011110" =>
    365             1                    ***0***     	            for byte_index in 0 to (C_DATA_WIDTH/8-1) loop
    365             2                    ***0***     
    366                                              	              if ( WSTRB(byte_index) = '1' ) then
    367             1                    ***0***     	                localRegs.cfigReg30(byte_index*8+7 downto byte_index*8) <= WDATA(byte_index*8+7 downto byte_index*8);
    368                                              	              end if;
    369             1                    ***0***     	            end loop;
    370                                              	          when b"011111" =>
    371             1                    ***0***     	            for byte_index in 0 to (C_DATA_WIDTH/8-1) loop
    371             2                    ***0***     
    372                                              	              if ( WSTRB(byte_index) = '1' ) then
    373             1                    ***0***     	                localRegs.cfigReg31(byte_index*8+7 downto byte_index*8) <= WDATA(byte_index*8+7 downto byte_index*8);
    374                                              	              end if;
    375             1                    ***0***     	            end loop;
    376                                              	          when b"100000" =>
    377             1                    ***0***     	            for byte_index in 0 to (C_DATA_WIDTH/8-1) loop
    377             2                    ***0***     
    378                                              	              if ( WSTRB(byte_index) = '1' ) then
    379             1                    ***0***     	                localRegs.cfigReg32(byte_index*8+7 downto byte_index*8) <= WDATA(byte_index*8+7 downto byte_index*8);
    380                                              	              end if;
    381             1                    ***0***     	            end loop;
    382                                              	          when b"100001" =>
    383             1                    ***0***     	            for byte_index in 0 to (C_DATA_WIDTH/8-1) loop
    383             2                    ***0***     
    384                                              	              if ( WSTRB(byte_index) = '1' ) then
    385             1                    ***0***     	                localRegs.cfigReg33(byte_index*8+7 downto byte_index*8) <= WDATA(byte_index*8+7 downto byte_index*8);
    386                                              	              end if;
    387             1                    ***0***     	            end loop;
    388                                              	          when b"100010" =>
    389             1                    ***0***     	            for byte_index in 0 to (C_DATA_WIDTH/8-1) loop
    389             2                    ***0***     
    390                                              	              if ( WSTRB(byte_index) = '1' ) then
    391             1                    ***0***     	                localRegs.cfigReg34(byte_index*8+7 downto byte_index*8) <= WDATA(byte_index*8+7 downto byte_index*8);
    392                                              	              end if;
    393             1                    ***0***     	            end loop;
    394                                              	          when b"100011" =>
    395             1                    ***0***     	            for byte_index in 0 to (C_DATA_WIDTH/8-1) loop
    395             2                    ***0***     
    396                                              	              if ( WSTRB(byte_index) = '1' ) then
    397             1                    ***0***     	                localRegs.cfigReg35(byte_index*8+7 downto byte_index*8) <= WDATA(byte_index*8+7 downto byte_index*8);
    398                                              	              end if;
    399             1                    ***0***     	            end loop;
    400                                              	          when b"100100" =>
    401             1                    ***0***     	            for byte_index in 0 to (C_DATA_WIDTH/8-1) loop
    401             2                    ***0***     
    402                                              	              if ( WSTRB(byte_index) = '1' ) then
    403             1                    ***0***     	                localRegs.cfigReg36(byte_index*8+7 downto byte_index*8) <= WDATA(byte_index*8+7 downto byte_index*8);
    404                                              	              end if;
    405             1                    ***0***     	            end loop;
    406                                              	          when b"100101" =>
    407             1                    ***0***     	            for byte_index in 0 to (C_DATA_WIDTH/8-1) loop
    407             2                    ***0***     
    408                                              	              if ( WSTRB(byte_index) = '1' ) then
    409             1                    ***0***     	                localRegs.cfigReg37(byte_index*8+7 downto byte_index*8) <= WDATA(byte_index*8+7 downto byte_index*8);
    410                                              	              end if;
    411             1                    ***0***     	            end loop;
    412                                              	          when b"100110" =>
    413             1                    ***0***     	            for byte_index in 0 to (C_DATA_WIDTH/8-1) loop
    413             2                    ***0***     
    414                                              	              if ( WSTRB(byte_index) = '1' ) then
    415             1                    ***0***     	                localRegs.cfigReg38(byte_index*8+7 downto byte_index*8) <= WDATA(byte_index*8+7 downto byte_index*8);
    416                                              	              end if;
    417             1                    ***0***     	            end loop;
    418                                              	          when b"100111" =>
    419             1                    ***0***     	            for byte_index in 0 to (C_DATA_WIDTH/8-1) loop
    419             2                    ***0***     
    420                                              	              if ( WSTRB(byte_index) = '1' ) then
    421             1                    ***0***     	                localRegs.cfigReg39(byte_index*8+7 downto byte_index*8) <= WDATA(byte_index*8+7 downto byte_index*8);
    422                                              	              end if;
    423             1                    ***0***     	            end loop;
    424                                              	          when b"101000" =>
    425             1                    ***0***     	            for byte_index in 0 to (C_DATA_WIDTH/8-1) loop
    425             2                    ***0***     
    426                                              	              if ( WSTRB(byte_index) = '1' ) then
    427             1                    ***0***     	                localRegs.cfigReg40(byte_index*8+7 downto byte_index*8) <= WDATA(byte_index*8+7 downto byte_index*8);
    428                                              	              end if;
    429             1                    ***0***     	            end loop;
    430                                              	          when b"101001" =>
    431             1                    ***0***     	            for byte_index in 0 to (C_DATA_WIDTH/8-1) loop
    431             2                    ***0***     
    432                                              	              if ( WSTRB(byte_index) = '1' ) then
    433             1                    ***0***     	                localRegs.cfigReg41(byte_index*8+7 downto byte_index*8) <= WDATA(byte_index*8+7 downto byte_index*8);
    434                                              	              end if;
    435             1                    ***0***     	            end loop;
    436                                              	          when b"101010" =>
    437             1                    ***0***     	            for byte_index in 0 to (C_DATA_WIDTH/8-1) loop
    437             2                    ***0***     
    438                                              	              if ( WSTRB(byte_index) = '1' ) then
    439             1                    ***0***     	                localRegs.cfigReg42(byte_index*8+7 downto byte_index*8) <= WDATA(byte_index*8+7 downto byte_index*8);
    440                                              	              end if;
    441             1                    ***0***     	            end loop;
    442                                              	          when b"101011" =>
    443             1                    ***0***     	            for byte_index in 0 to (C_DATA_WIDTH/8-1) loop
    443             2                    ***0***     
    444                                              	              if ( WSTRB(byte_index) = '1' ) then
    445             1                    ***0***     	                localRegs.cfigReg43(byte_index*8+7 downto byte_index*8) <= WDATA(byte_index*8+7 downto byte_index*8);
    446                                              	              end if;
    447             1                    ***0***     	            end loop;
    448                                              	          when b"101100" =>
    449             1                    ***0***     	            for byte_index in 0 to (C_DATA_WIDTH/8-1) loop
    449             2                    ***0***     
    450                                              	              if ( WSTRB(byte_index) = '1' ) then
    451             1                    ***0***     	                localRegs.cfigReg44(byte_index*8+7 downto byte_index*8) <= WDATA(byte_index*8+7 downto byte_index*8);
    452                                              	              end if;
    453             1                    ***0***     	            end loop;
    454                                              	          when b"101101" =>
    455             1                    ***0***     	            for byte_index in 0 to (C_DATA_WIDTH/8-1) loop
    455             2                    ***0***     
    456                                              	              if ( WSTRB(byte_index) = '1' ) then
    457             1                    ***0***     	                localRegs.cfigReg45(byte_index*8+7 downto byte_index*8) <= WDATA(byte_index*8+7 downto byte_index*8);
    458                                              	              end if;
    459             1                    ***0***     	            end loop;
    460                                              	          when b"101110" =>
    461             1                    ***0***     	            for byte_index in 0 to (C_DATA_WIDTH/8-1) loop
    461             2                    ***0***     
    462                                              	              if ( WSTRB(byte_index) = '1' ) then
    463             1                    ***0***     	                localRegs.cfigReg46(byte_index*8+7 downto byte_index*8) <= WDATA(byte_index*8+7 downto byte_index*8);
    464                                              	              end if;
    465             1                    ***0***     	            end loop;
    466                                              	          when b"101111" =>
    467             1                    ***0***     	            for byte_index in 0 to (C_DATA_WIDTH/8-1) loop
    467             2                    ***0***     
    468                                              	              if ( WSTRB(byte_index) = '1' ) then
    469             1                    ***0***     	                localRegs.cfigReg47(byte_index*8+7 downto byte_index*8) <= WDATA(byte_index*8+7 downto byte_index*8);
    470                                              	              end if;
    471             1                    ***0***     	            end loop;
    472                                              	          when b"110000" =>
    473             1                    ***0***     	            for byte_index in 0 to (C_DATA_WIDTH/8-1) loop
    473             2                    ***0***     
    474                                              	              if ( WSTRB(byte_index) = '1' ) then
    475             1                    ***0***     	                localRegs.cfigReg48(byte_index*8+7 downto byte_index*8) <= WDATA(byte_index*8+7 downto byte_index*8);
    476                                              	              end if;
    477             1                    ***0***     	            end loop;
    478                                              	          when b"110001" =>
    479             1                    ***0***     	            for byte_index in 0 to (C_DATA_WIDTH/8-1) loop
    479             2                    ***0***     
    480                                              	              if ( WSTRB(byte_index) = '1' ) then
    481             1                    ***0***     	                localRegs.cfigReg49(byte_index*8+7 downto byte_index*8) <= WDATA(byte_index*8+7 downto byte_index*8);
    482                                              	              end if;
    483             1                    ***0***     	            end loop;
    484                                              	          when b"110010" =>
    485             1                    ***0***     	            for byte_index in 0 to (C_DATA_WIDTH/8-1) loop
    485             2                    ***0***     
    486                                              	              if ( WSTRB(byte_index) = '1' ) then
    487             1                    ***0***     	                localRegs.cfigReg50(byte_index*8+7 downto byte_index*8) <= WDATA(byte_index*8+7 downto byte_index*8);
    488                                              	              end if;
    489             1                    ***0***     	            end loop;
    490                                              	          when b"110011" =>
    491             1                    ***0***     	            for byte_index in 0 to (C_DATA_WIDTH/8-1) loop
    491             2                    ***0***     
    492                                              	              if ( WSTRB(byte_index) = '1' ) then
    493             1                    ***0***     	                localRegs.cfigReg51(byte_index*8+7 downto byte_index*8) <= WDATA(byte_index*8+7 downto byte_index*8);
    494                                              	              end if;
    495             1                    ***0***     	            end loop;
    496                                              	          when b"110100" =>
    497             1                    ***0***     	            for byte_index in 0 to (C_DATA_WIDTH/8-1) loop
    497             2                    ***0***     
    498                                              	              if ( WSTRB(byte_index) = '1' ) then
    499             1                    ***0***     	                localRegs.cfigReg52(byte_index*8+7 downto byte_index*8) <= WDATA(byte_index*8+7 downto byte_index*8);
    500                                              	              end if;
    501             1                    ***0***     	            end loop;
    502                                              	          when b"110101" =>
    503             1                    ***0***     	            for byte_index in 0 to (C_DATA_WIDTH/8-1) loop
    503             2                    ***0***     
    504                                              	              if ( WSTRB(byte_index) = '1' ) then
    505             1                    ***0***     	                localRegs.cfigReg53(byte_index*8+7 downto byte_index*8) <= WDATA(byte_index*8+7 downto byte_index*8);
    506                                              	              end if;
    507             1                    ***0***     	            end loop;
    508                                              	          when b"110110" =>
    509             1                    ***0***     	            for byte_index in 0 to (C_DATA_WIDTH/8-1) loop
    509             2                    ***0***     
    510                                              	              if ( WSTRB(byte_index) = '1' ) then
    511             1                    ***0***     	                localRegs.cfigReg54(byte_index*8+7 downto byte_index*8) <= WDATA(byte_index*8+7 downto byte_index*8);
    512                                              	              end if;
    513             1                    ***0***     	            end loop;
    514                                              	          when b"110111" =>
    515             1                    ***0***     	            for byte_index in 0 to (C_DATA_WIDTH/8-1) loop
    515             2                    ***0***     
    516                                              	              if ( WSTRB(byte_index) = '1' ) then
    517             1                    ***0***     	                localRegs.cfigReg55(byte_index*8+7 downto byte_index*8) <= WDATA(byte_index*8+7 downto byte_index*8);
    518                                              	              end if;
    519             1                    ***0***     	            end loop;
    520                                              	          when b"111000" =>
    521             1                    ***0***     	            for byte_index in 0 to (C_DATA_WIDTH/8-1) loop
    521             2                    ***0***     
    522                                              	              if ( WSTRB(byte_index) = '1' ) then
    523             1                    ***0***     	                localRegs.cfigReg56(byte_index*8+7 downto byte_index*8) <= WDATA(byte_index*8+7 downto byte_index*8);
    524                                              	              end if;
    525             1                    ***0***     	            end loop;
    526                                              	          when b"111001" =>
    527             1                    ***0***     	            for byte_index in 0 to (C_DATA_WIDTH/8-1) loop
    527             2                    ***0***     
    528                                              	              if ( WSTRB(byte_index) = '1' ) then
    529             1                    ***0***     	                localRegs.cfigReg57(byte_index*8+7 downto byte_index*8) <= WDATA(byte_index*8+7 downto byte_index*8);
    530                                              	              end if;
    531             1                    ***0***     	            end loop;
    532                                              	          when b"111010" =>
    533             1                    ***0***     	            for byte_index in 0 to (C_DATA_WIDTH/8-1) loop
    533             2                    ***0***     
    534                                              	              if ( WSTRB(byte_index) = '1' ) then
    535             1                    ***0***     	                localRegs.cfigReg58(byte_index*8+7 downto byte_index*8) <= WDATA(byte_index*8+7 downto byte_index*8);
    536                                              	              end if;
    537             1                    ***0***     	            end loop;
    538                                              	          when b"111011" =>
    539             1                    ***0***     	            for byte_index in 0 to (C_DATA_WIDTH/8-1) loop
    539             2                    ***0***     
    540                                              	              if ( WSTRB(byte_index) = '1' ) then
    541             1                    ***0***     	                localRegs.cfigReg59(byte_index*8+7 downto byte_index*8) <= WDATA(byte_index*8+7 downto byte_index*8);
    542                                              	              end if;
    543             1                    ***0***     	            end loop;
    544                                              	          when b"111100" =>
    545             1                    ***0***     	            for byte_index in 0 to (C_DATA_WIDTH/8-1) loop
    545             2                    ***0***     
    546                                              	              if ( WSTRB(byte_index) = '1' ) then
    547             1                    ***0***     	                localRegs.cfigReg60(byte_index*8+7 downto byte_index*8) <= WDATA(byte_index*8+7 downto byte_index*8);
    548                                              	              end if;
    549             1                    ***0***     	            end loop;
    550                                              	          when b"111101" =>
    551             1                    ***0***     	            for byte_index in 0 to (C_DATA_WIDTH/8-1) loop
    551             2                    ***0***     
    552                                              	              if ( WSTRB(byte_index) = '1' ) then
    553             1                    ***0***     	                localRegs.cfigReg61(byte_index*8+7 downto byte_index*8) <= WDATA(byte_index*8+7 downto byte_index*8);
    554                                              	              end if;
    555             1                    ***0***     	            end loop;
    556                                              	          when b"111110" =>
    557             1                    ***0***     	            for byte_index in 0 to (C_DATA_WIDTH/8-1) loop
    557             2                    ***0***     
    558                                              	              if ( WSTRB(byte_index) = '1' ) then
    559             1                    ***0***     	                localRegs.cfigReg62(byte_index*8+7 downto byte_index*8) <= WDATA(byte_index*8+7 downto byte_index*8);
    560                                              	              end if;
    561             1                    ***0***     	            end loop;
    562                                              	          when b"111111" =>
    563             1                    ***0***     	            for byte_index in 0 to (C_DATA_WIDTH/8-1) loop
    563             2                    ***0***     
    564                                              	              if ( WSTRB(byte_index) = '1' ) then
    565             1                    ***0***     	                localRegs.cfigReg63(byte_index*8+7 downto byte_index*8) <= WDATA(byte_index*8+7 downto byte_index*8);
    566                                              	              end if;
    567             1                    ***0***     	            end loop;
    568                                              	          when others =>
    569                                                              --stored cpu values
    570             1                    ***0***     	            localRegs.cfigReg0 <= localRegs.cfigReg0;
    571             1                    ***0***     	            localRegs.cfigReg1 <= localRegs.cfigReg1;
    572             1                    ***0***     	            localRegs.cfigReg2 <= localRegs.cfigReg2;
    573             1                    ***0***     	            localRegs.cfigReg3 <= localRegs.cfigReg3;
    574             1                    ***0***     	            localRegs.cfigReg4 <= localRegs.cfigReg4;
    575             1                    ***0***     	            localRegs.cfigReg5 <= localRegs.cfigReg5;
    576             1                    ***0***     	            localRegs.cfigReg6 <= localRegs.cfigReg6;
    577             1                    ***0***     	            localRegs.cfigReg7 <= localRegs.cfigReg7;
    578             1                    ***0***     	            localRegs.cfigReg8 <= localRegs.cfigReg8;
    579             1                    ***0***     	            localRegs.cfigReg9 <= localRegs.cfigReg9;
    580             1                    ***0***     	            localRegs.cfigReg10 <= localRegs.cfigReg10;
    581             1                    ***0***     	            localRegs.cfigReg11 <= localRegs.cfigReg11;
    582             1                    ***0***     	            localRegs.cfigReg12 <= localRegs.cfigReg12;
    583             1                    ***0***     	            localRegs.cfigReg13 <= localRegs.cfigReg13;
    584             1                    ***0***     	            localRegs.cfigReg14 <= localRegs.cfigReg14;
    585             1                    ***0***     	            localRegs.cfigReg15 <= localRegs.cfigReg15;
    586             1                    ***0***     	            localRegs.cfigReg16 <= localRegs.cfigReg16;
    587             1                    ***0***     	            localRegs.cfigReg17 <= localRegs.cfigReg17;
    588             1                    ***0***     	            localRegs.cfigReg18 <= localRegs.cfigReg18;
    589             1                    ***0***     	            localRegs.cfigReg19 <= localRegs.cfigReg19;
    590             1                    ***0***     	            localRegs.cfigReg20 <= localRegs.cfigReg20;
    591             1                    ***0***     	            localRegs.cfigReg21 <= localRegs.cfigReg21;
    592             1                    ***0***     	            localRegs.cfigReg22 <= localRegs.cfigReg22;
    593             1                    ***0***     	            localRegs.cfigReg23 <= localRegs.cfigReg23;
    594             1                    ***0***     	            localRegs.cfigReg24 <= localRegs.cfigReg24;
    595             1                    ***0***     	            localRegs.cfigReg25 <= localRegs.cfigReg25;
    596             1                    ***0***     	            localRegs.cfigReg26 <= localRegs.cfigReg26;
    597             1                    ***0***     	            localRegs.cfigReg27 <= localRegs.cfigReg27;
    598             1                    ***0***     	            localRegs.cfigReg28 <= localRegs.cfigReg28;
    599             1                    ***0***     	            localRegs.cfigReg29 <= localRegs.cfigReg29;
    600             1                    ***0***     	            localRegs.cfigReg30 <= localRegs.cfigReg30;
    601             1                    ***0***     	            localRegs.cfigReg31 <= localRegs.cfigReg31;
    602             1                    ***0***     	            localRegs.cfigReg32 <= localRegs.cfigReg32;
    603             1                    ***0***     	            localRegs.cfigReg33 <= localRegs.cfigReg33;
    604             1                    ***0***     	            localRegs.cfigReg34 <= localRegs.cfigReg34;
    605             1                    ***0***     	            localRegs.cfigReg35 <= localRegs.cfigReg35;
    606             1                    ***0***     	            localRegs.cfigReg36 <= localRegs.cfigReg36;
    607             1                    ***0***     	            localRegs.cfigReg37 <= localRegs.cfigReg37;
    608             1                    ***0***     	            localRegs.cfigReg38 <= localRegs.cfigReg38;
    609             1                    ***0***     	            localRegs.cfigReg39 <= localRegs.cfigReg39;
    610             1                    ***0***     	            localRegs.cfigReg40 <= localRegs.cfigReg40;
    611             1                    ***0***     	            localRegs.cfigReg41 <= localRegs.cfigReg41;
    612             1                    ***0***     	            localRegs.cfigReg42 <= localRegs.cfigReg42;
    613             1                    ***0***     	            localRegs.cfigReg43 <= localRegs.cfigReg43;
    614             1                    ***0***     	            localRegs.cfigReg44 <= localRegs.cfigReg44;
    615             1                    ***0***     	            localRegs.cfigReg45 <= localRegs.cfigReg45;
    616             1                    ***0***     	            localRegs.cfigReg46 <= localRegs.cfigReg46;
    617             1                    ***0***     	            localRegs.cfigReg47 <= localRegs.cfigReg47;
    618             1                    ***0***     	            localRegs.cfigReg48 <= localRegs.cfigReg48;
    619             1                    ***0***     	            localRegs.cfigReg49 <= localRegs.cfigReg49;
    620             1                    ***0***     	            localRegs.cfigReg50 <= localRegs.cfigReg50;
    621             1                    ***0***     	            localRegs.cfigReg51 <= localRegs.cfigReg51;
    622             1                    ***0***     	            localRegs.cfigReg52 <= localRegs.cfigReg52;
    623             1                    ***0***     	            localRegs.cfigReg53 <= localRegs.cfigReg53;
    624             1                    ***0***     	            localRegs.cfigReg54 <= localRegs.cfigReg54;
    625             1                    ***0***     	            localRegs.cfigReg55 <= localRegs.cfigReg55;
    626             1                    ***0***     	            localRegs.cfigReg56 <= localRegs.cfigReg56;
    627             1                    ***0***     	            localRegs.cfigReg57 <= localRegs.cfigReg57;
    628             1                    ***0***     	            localRegs.cfigReg58 <= localRegs.cfigReg58;
    629             1                    ***0***     	            localRegs.cfigReg59 <= localRegs.cfigReg59;
    630             1                    ***0***     	            localRegs.cfigReg60 <= localRegs.cfigReg60;
    631             1                    ***0***     	            localRegs.cfigReg61 <= localRegs.cfigReg61;
    632             1                    ***0***     	            localRegs.cfigReg62 <= localRegs.cfigReg62;
    633             1                    ***0***     	            localRegs.cfigReg63 <= localRegs.cfigReg63;
    634                                              	        end case;
    635                                              	      end if;
    636                                              	    end if;
    637                                              	  end if;                   
    638                                              	end process; 
    639                                                  process (ACLK)
    640                                                  begin
    641                                                    if rising_edge(ACLK) then 
    642                                                      if ARESETN = '0' then
    643             1                          2               axi_bvalid  <= '0';
    644             1                          2               axi_bresp   <= "00"; 
    645                                                      else
    646                                                        if (axi_awready = '1' and AWVALID = '1' and axi_wready = '1' and WVALID = '1' and axi_bvalid = '0'  ) then
    647             1                    ***0***                 axi_bvalid <= '1';
    648             1                    ***0***                 axi_bresp  <= "00"; 
    649                                                        elsif (BREADY = '1' and axi_bvalid = '1') then   
    650             1                    ***0***                 axi_bvalid <= '0';                                 
    651                                                        end if;
    652                                                      end if;
    653                                                    end if;                   
    654                                                  end process; 
    655                                                  process (ACLK)
    656                                                  begin
    657                                                    if rising_edge(ACLK) then 
    658                                                      if ARESETN = '0' then
    659             1                          2               axi_arready <= '0';
    660             1                          2               axi_araddr  <= (others => '1');
    661                                                      else
    662                                                        if (axi_arready = '0' and ARVALID = '1') then
    663             1                    ***0***                 axi_arready <= '1';
    664             1                    ***0***                 axi_araddr  <= ARADDR;           
    665                                                        else
    666             1                          1                 axi_arready <= '0';
    667                                                        end if;
    668                                                      end if;
    669                                                    end if;                   
    670                                                  end process; 
    671                                                  process (ACLK)
    672                                                  begin
    673                                                    if rising_edge(ACLK) then
    674                                                      if ARESETN = '0' then
    675             1                          2               axi_rvalid <= '0';
    676             1                          2               axi_rresp  <= "00";
    677                                                      else
    678                                                        if (axi_arready = '1' and ARVALID = '1' and axi_rvalid = '0') then
    679             1                    ***0***                 axi_rvalid <= '1';
    680             1                    ***0***                 axi_rresp  <= "00"; 
    681                                                        elsif (axi_rvalid = '1' and RREADY = '1') then
    682             1                    ***0***                 axi_rvalid <= '0';
    683                                                        end if;            
    684                                                      end if;
    685                                                    end if;
    686                                                  end process;
    687             1                          2         slv_reg_rden <= axi_arready and ARVALID and (not axi_rvalid);
    688             1                          6     process (axi_araddr, ARESETN, slv_reg_rden, rdRegsIn.cfigReg0, rdRegsIn.cfigReg1, rdRegsIn.cfigReg2, rdRegsIn.cfigReg3, rdRegsIn.cfigReg4, rdRegsIn.cfigReg5, rdRegsIn.cfigReg6, rdRegsIn.cfigReg7, rdRegsIn.cfigReg8, rdRegsIn.cfigReg9, rdRegsIn.cfigReg10, rdRegsIn.cfigReg11, rdRegsIn.cfigReg12, rdRegsIn.cfigReg13, rdRegsIn.cfigReg14, rdRegsIn.cfigReg15, rdRegsIn.cfigReg16, rdRegsIn.cfigReg17, rdRegsIn.cfigReg18, rdRegsIn.cfigReg19, rdRegsIn.cfigReg20, rdRegsIn.cfigReg21, rdRegsIn.cfigReg22, rdRegsIn.cfigReg23, rdRegsIn.cfigReg24, rdRegsIn.cfigReg25, rdRegsIn.cfigReg26, rdRegsIn.cfigReg27, rdRegsIn.cfigReg28, rdRegsIn.cfigReg29, rdRegsIn.cfigReg30, rdRegsIn.cfigReg31, rdRegsIn.cfigReg32, rdRegsIn.cfigReg33, rdRegsIn.cfigReg34, rdRegsIn.cfigReg35, rdRegsIn.cfigReg36, rdRegsIn.cfigReg37, rdRegsIn.cfigReg38, rdRegsIn.cfigReg39, rdRegsIn.cfigReg40, rdRegsIn.cfigReg41, rdRegsIn.cfigReg42, rdRegsIn.cfigReg43, rdRegsIn.cfigReg44, rdRegsIn.cfigReg45, rdRegsIn.cfigReg46, rdRegsIn.cfigReg47, rdRegsIn.cfigReg48, rdRegsIn.cfigReg49, rdRegsIn.cfigReg50, rdRegsIn.cfigReg51, rdRegsIn.cfigReg52, rdRegsIn.cfigReg53, rdRegsIn.cfigReg54, rdRegsIn.cfigReg55, rdRegsIn.cfigReg56, rdRegsIn.cfigReg57, rdRegsIn.cfigReg58, rdRegsIn.cfigReg59, rdRegsIn.cfigReg60, rdRegsIn.cfigReg61, rdRegsIn.cfigReg62, rdRegsIn.cfigReg63)
    689                                                  variable loc_addr :std_logic_vector(OPT_MEM_ADDR_BITS downto 0);
    690                                                  begin
    691             1                          6             loc_addr := axi_araddr(ADDR_LSB + OPT_MEM_ADDR_BITS downto ADDR_LSB);
    692                                                      case loc_addr is
    693                                                        when b"000000" =>
    694             1                    ***0***                 reg_data_out <= rdRegsIn.cfigReg0;
    695                                                        when b"000001" =>
    696             1                    ***0***                 reg_data_out <= rdRegsIn.cfigReg1;
    697                                                        when b"000010" =>
    698             1                    ***0***                 reg_data_out <= rdRegsIn.cfigReg2;
    699                                                        when b"000011" =>
    700             1                    ***0***                 reg_data_out <= rdRegsIn.cfigReg3;
    701                                                        when b"000100" =>
    702             1                    ***0***                 reg_data_out <= rdRegsIn.cfigReg4;
    703                                                        when b"000101" =>
    704             1                    ***0***                 reg_data_out <= rdRegsIn.cfigReg5;
    705                                                        when b"000110" =>
    706             1                    ***0***                 reg_data_out <= rdRegsIn.cfigReg6;
    707                                                        when b"000111" =>
    708             1                    ***0***                 reg_data_out <= rdRegsIn.cfigReg7;
    709                                                        when b"001000" =>
    710             1                    ***0***                 reg_data_out <= rdRegsIn.cfigReg8;
    711                                                        when b"001001" =>
    712             1                    ***0***                 reg_data_out <= rdRegsIn.cfigReg9;
    713                                                        when b"001010" =>
    714             1                    ***0***                 reg_data_out <= rdRegsIn.cfigReg10;
    715                                                        when b"001011" =>
    716             1                    ***0***                 reg_data_out <= rdRegsIn.cfigReg11;
    717                                                        when b"001100" =>
    718             1                    ***0***                 reg_data_out <= rdRegsIn.cfigReg12;
    719                                                        when b"001101" =>
    720             1                    ***0***                 reg_data_out <= rdRegsIn.cfigReg13;
    721                                                        when b"001110" =>
    722             1                    ***0***                 reg_data_out <= rdRegsIn.cfigReg14;
    723                                                        when b"001111" =>
    724             1                    ***0***                 reg_data_out <= rdRegsIn.cfigReg15;
    725                                                        when b"010000" =>
    726             1                    ***0***                 reg_data_out <= rdRegsIn.cfigReg16;
    727                                                        when b"010001" =>
    728             1                    ***0***                 reg_data_out <= rdRegsIn.cfigReg17;
    729                                                        when b"010010" =>
    730             1                    ***0***                 reg_data_out <= rdRegsIn.cfigReg18;
    731                                                        when b"010011" =>
    732             1                    ***0***                 reg_data_out <= rdRegsIn.cfigReg19;
    733                                                        when b"010100" =>
    734             1                    ***0***                 reg_data_out <= rdRegsIn.cfigReg20;
    735                                                        when b"010101" =>
    736             1                    ***0***                 reg_data_out <= rdRegsIn.cfigReg21;
    737                                                        when b"010110" =>
    738             1                    ***0***                 reg_data_out <= rdRegsIn.cfigReg22;
    739                                                        when b"010111" =>
    740             1                    ***0***                 reg_data_out <= rdRegsIn.cfigReg23;
    741                                                        when b"011000" =>
    742             1                    ***0***                 reg_data_out <= rdRegsIn.cfigReg24;
    743                                                        when b"011001" =>
    744             1                    ***0***                 reg_data_out <= rdRegsIn.cfigReg25;
    745                                                        when b"011010" =>
    746             1                    ***0***                 reg_data_out <= rdRegsIn.cfigReg26;
    747                                                        when b"011011" =>
    748             1                    ***0***                 reg_data_out <= rdRegsIn.cfigReg27;
    749                                                        when b"011100" =>
    750             1                    ***0***                 reg_data_out <= rdRegsIn.cfigReg28;
    751                                                        when b"011101" =>
    752             1                    ***0***     	        reg_data_out <= rdRegsIn.cfigReg29;
    753                                                        when b"011110" =>
    754             1                    ***0***     	        reg_data_out <= rdRegsIn.cfigReg30;
    755                                                        when b"011111" =>
    756             1                    ***0***     	        reg_data_out <= rdRegsIn.cfigReg31;
    757                                              	      when b"100000" =>
    758             1                    ***0***     	        reg_data_out <= rdRegsIn.cfigReg32;
    759                                              	      when b"100001" =>
    760             1                    ***0***     	        reg_data_out <= rdRegsIn.cfigReg33;
    761                                              	      when b"100010" =>
    762             1                    ***0***     	        reg_data_out <= rdRegsIn.cfigReg34;
    763                                              	      when b"100011" =>
    764             1                    ***0***     	        reg_data_out <= rdRegsIn.cfigReg35;
    765                                              	      when b"100100" =>
    766             1                    ***0***     	        reg_data_out <= rdRegsIn.cfigReg36;
    767                                              	      when b"100101" =>
    768             1                    ***0***     	        reg_data_out <= rdRegsIn.cfigReg37;
    769                                              	      when b"100110" =>
    770             1                    ***0***     	        reg_data_out <= rdRegsIn.cfigReg38;
    771                                              	      when b"100111" =>
    772             1                    ***0***     	        reg_data_out <= rdRegsIn.cfigReg39;
    773                                              	      when b"101000" =>
    774             1                    ***0***     	        reg_data_out <= rdRegsIn.cfigReg40;
    775                                              	      when b"101001" =>
    776             1                    ***0***     	        reg_data_out <= rdRegsIn.cfigReg41;
    777                                              	      when b"101010" =>
    778             1                    ***0***     	        reg_data_out <= rdRegsIn.cfigReg42;
    779                                              	      when b"101011" =>
    780             1                    ***0***     	        reg_data_out <= rdRegsIn.cfigReg43;
    781                                              	      when b"101100" =>
    782             1                    ***0***     	        reg_data_out <= rdRegsIn.cfigReg44;
    783                                              	      when b"101101" =>
    784             1                    ***0***     	        reg_data_out <= rdRegsIn.cfigReg45;
    785                                              	      when b"101110" =>
    786             1                    ***0***     	        reg_data_out <= rdRegsIn.cfigReg46;
    787                                              	      when b"101111" =>
    788             1                    ***0***     	        reg_data_out <= rdRegsIn.cfigReg47;
    789                                              	      when b"110000" =>
    790             1                    ***0***     	        reg_data_out <= rdRegsIn.cfigReg48;
    791                                              	      when b"110001" =>
    792             1                    ***0***     	        reg_data_out <= rdRegsIn.cfigReg49;
    793                                              	      when b"110010" =>
    794             1                    ***0***     	        reg_data_out <= rdRegsIn.cfigReg50;
    795                                              	      when b"110011" =>
    796             1                    ***0***     	        reg_data_out <= rdRegsIn.cfigReg51;
    797                                              	      when b"110100" =>
    798             1                    ***0***     	        reg_data_out <= rdRegsIn.cfigReg52;
    799                                              	      when b"110101" =>
    800             1                    ***0***     	        reg_data_out <= rdRegsIn.cfigReg53;
    801                                              	      when b"110110" =>
    802             1                    ***0***     	        reg_data_out <= rdRegsIn.cfigReg54;
    803                                              	      when b"110111" =>
    804             1                    ***0***     	        reg_data_out <= rdRegsIn.cfigReg55;
    805                                              	      when b"111000" =>
    806             1                    ***0***     	        reg_data_out <= rdRegsIn.cfigReg56;
    807                                              	      when b"111001" =>
    808             1                    ***0***     	        reg_data_out <= rdRegsIn.cfigReg57;
    809                                              	      when b"111010" =>
    810             1                    ***0***     	        reg_data_out <= rdRegsIn.cfigReg58;
    811                                              	      when b"111011" =>
    812             1                    ***0***     	        reg_data_out <= rdRegsIn.cfigReg59;
    813                                              	      when b"111100" =>
    814             1                    ***0***     	        reg_data_out <= rdRegsIn.cfigReg60;
    815                                              	      when b"111101" =>
    816             1                    ***0***     	        reg_data_out <= rdRegsIn.cfigReg61;
    817                                              	      when b"111110" =>
    818             1                    ***0***     	        reg_data_out <= rdRegsIn.cfigReg62;
    819                                              	      when b"111111" =>
    820             1                          4     	        reg_data_out <= rdRegsIn.cfigReg63;
    821                                                        when others =>
    822             1                          2                 reg_data_out  <= (others => '0');
    823                                                      end case;
    824                                                  end process;
    825                                                  
    826                                                  process( ACLK ) begin
    827                                                    if (rising_edge (ACLK)) then
    828                                                      if ( ARESETN = '0' ) then
    829             1                          3               axi_rdata  <= (others => '0');
    830                                                      else
    831                                                        if (slv_reg_rden = '1') then
    832             1                    ***0***                   axi_rdata <= reg_data_out;     
    833                                                        end if;   
    834                                                      end if;
    835                                                    end if;
    836                                                  end process;
    837                                              
    838                                                  cpuOut: process (ACLK) begin
    839                                                      if (rising_edge (ACLK)) then
    840             1                        220                 wrRegsOut <= localRegs;
    841                                                      end if;
    842                                                  end process cpuOut;
    843                                              
    844                                              end arch_imp;

Branch Coverage:
    Enabled Coverage            Active      Hits    Misses % Covered
    ----------------            ------      ----    ------ ---------
    Branches                       302        35       267      11.5

================================Branch Details================================

Branch Coverage for file ../modules/dut/vfpConfig.vhd --

------------------------------------IF Branch------------------------------------
    68                                         3     Count coming in to IF
    68              1                          3           if rising_edge(ACLK) then 
                                            ECOP     All False Count
Branch totals: 1 hit of 1 branch = 100.0%

------------------------------------IF Branch------------------------------------
    69                                         3     Count coming in to IF
    69              1                          2             if ARESETN = '0' then
    72              1                          1             else
Branch totals: 2 hits of 2 branches = 100.0%

------------------------------------IF Branch------------------------------------
    73                                         1     Count coming in to IF
    73              1                    ***0***               if (axi_awready = '0' and AWVALID = '1' and WVALID = '1' and aw_en = '1') then
    75              1                    ***0***                 elsif (BREADY = '1' and axi_bvalid = '1') then
    78              1                          1               else
Branch totals: 1 hit of 3 branches = 33.3%

------------------------------------IF Branch------------------------------------
    86                                         3     Count coming in to IF
    86              1                          3           if rising_edge(ACLK) then 
                                            ECOP     All False Count
Branch totals: 1 hit of 1 branch = 100.0%

------------------------------------IF Branch------------------------------------
    87                                         3     Count coming in to IF
    87              1                          2             if ARESETN = '0' then
    89              1                          1             else
Branch totals: 2 hits of 2 branches = 100.0%

------------------------------------IF Branch------------------------------------
    90                                         1     Count coming in to IF
    90              1                    ***0***               if (axi_awready = '0' and AWVALID = '1' and WVALID = '1' and aw_en = '1') then
                                               1     All False Count
Branch totals: 1 hit of 2 branches = 50.0%

------------------------------------IF Branch------------------------------------
    98                                         3     Count coming in to IF
    98              1                          3           if rising_edge(ACLK) then 
                                            ECOP     All False Count
Branch totals: 1 hit of 1 branch = 100.0%

------------------------------------IF Branch------------------------------------
    99                                         3     Count coming in to IF
    99              1                          2             if ARESETN = '0' then
    101             1                          1             else
Branch totals: 2 hits of 2 branches = 100.0%

------------------------------------IF Branch------------------------------------
    102                                        1     Count coming in to IF
    102             1                    ***0***               if (axi_wready = '0' and WVALID = '1' and AWVALID = '1' and aw_en = '1') then
    104             1                          1               else
Branch totals: 1 hit of 2 branches = 50.0%

------------------------------------IF Branch------------------------------------
    114                                      220     Count coming in to IF
    114             1                        220     	  if rising_edge(ACLK) then 
                                            ECOP     All False Count
Branch totals: 1 hit of 1 branch = 100.0%

------------------------------------IF Branch------------------------------------
    115                                      220     Count coming in to IF
    115             1                         99     	    if ARESETN = '0' then
    180             1                        121     	    else
Branch totals: 2 hits of 2 branches = 100.0%

------------------------------------IF Branch------------------------------------
    182                                      121     Count coming in to IF
    182             1                    ***0***     	      if (slv_reg_wren = '1') then
                                             121     All False Count
Branch totals: 1 hit of 2 branches = 50.0%

------------------------------------CASE Branch------------------------------------
    183                                  ***0***     Count coming in to CASE
    184             1                    ***0***     	          when b"000000" =>
    190             1                    ***0***     	          when b"000001" =>
    196             1                    ***0***     	          when b"000010" =>
    202             1                    ***0***     	          when b"000011" =>
    208             1                    ***0***     	          when b"000100" =>
    214             1                    ***0***     	          when b"000101" =>
    220             1                    ***0***     	          when b"000110" =>
    226             1                    ***0***     	          when b"000111" =>
    232             1                    ***0***     	          when b"001000" =>
    238             1                    ***0***     	          when b"001001" =>
    244             1                    ***0***     	          when b"001010" =>
    250             1                    ***0***     	          when b"001011" =>
    256             1                    ***0***     	          when b"001100" =>
    262             1                    ***0***     	          when b"001101" =>
    268             1                    ***0***     	          when b"001110" =>
    274             1                    ***0***     	          when b"001111" =>
    280             1                    ***0***     	          when b"010000" =>
    286             1                    ***0***     	          when b"010001" =>
    292             1                    ***0***     	          when b"010010" =>
    298             1                    ***0***     	          when b"010011" =>
    304             1                    ***0***     	          when b"010100" =>
    310             1                    ***0***     	          when b"010101" =>
    316             1                    ***0***     	          when b"010110" =>
    322             1                    ***0***     	          when b"010111" =>
    328             1                    ***0***     	          when b"011000" =>
    334             1                    ***0***     	          when b"011001" =>
    340             1                    ***0***     	          when b"011010" =>
    346             1                    ***0***     	          when b"011011" =>
    352             1                    ***0***     	          when b"011100" =>
    358             1                    ***0***     	          when b"011101" =>
    364             1                    ***0***     	          when b"011110" =>
    370             1                    ***0***     	          when b"011111" =>
    376             1                    ***0***     	          when b"100000" =>
    382             1                    ***0***     	          when b"100001" =>
    388             1                    ***0***     	          when b"100010" =>
    394             1                    ***0***     	          when b"100011" =>
    400             1                    ***0***     	          when b"100100" =>
    406             1                    ***0***     	          when b"100101" =>
    412             1                    ***0***     	          when b"100110" =>
    418             1                    ***0***     	          when b"100111" =>
    424             1                    ***0***     	          when b"101000" =>
    430             1                    ***0***     	          when b"101001" =>
    436             1                    ***0***     	          when b"101010" =>
    442             1                    ***0***     	          when b"101011" =>
    448             1                    ***0***     	          when b"101100" =>
    454             1                    ***0***     	          when b"101101" =>
    460             1                    ***0***     	          when b"101110" =>
    466             1                    ***0***     	          when b"101111" =>
    472             1                    ***0***     	          when b"110000" =>
    478             1                    ***0***     	          when b"110001" =>
    484             1                    ***0***     	          when b"110010" =>
    490             1                    ***0***     	          when b"110011" =>
    496             1                    ***0***     	          when b"110100" =>
    502             1                    ***0***     	          when b"110101" =>
    508             1                    ***0***     	          when b"110110" =>
    514             1                    ***0***     	          when b"110111" =>
    520             1                    ***0***     	          when b"111000" =>
    526             1                    ***0***     	          when b"111001" =>
    532             1                    ***0***     	          when b"111010" =>
    538             1                    ***0***     	          when b"111011" =>
    544             1                    ***0***     	          when b"111100" =>
    550             1                    ***0***     	          when b"111101" =>
    556             1                    ***0***     	          when b"111110" =>
    562             1                    ***0***     	          when b"111111" =>
    568             1                    ***0***     	          when others =>
Branch totals: 0 hits of 65 branches = 0.0%

------------------------------------IF Branch------------------------------------
    186                                  ***0***     Count coming in to IF
    186             1                    ***0***     	              if ( WSTRB(byte_index) = '1' ) then
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.0%

------------------------------------IF Branch------------------------------------
    192                                  ***0***     Count coming in to IF
    192             1                    ***0***     	              if ( WSTRB(byte_index) = '1' ) then
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.0%

------------------------------------IF Branch------------------------------------
    198                                  ***0***     Count coming in to IF
    198             1                    ***0***     	              if ( WSTRB(byte_index) = '1' ) then
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.0%

------------------------------------IF Branch------------------------------------
    204                                  ***0***     Count coming in to IF
    204             1                    ***0***     	              if ( WSTRB(byte_index) = '1' ) then
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.0%

------------------------------------IF Branch------------------------------------
    210                                  ***0***     Count coming in to IF
    210             1                    ***0***     	              if ( WSTRB(byte_index) = '1' ) then
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.0%

------------------------------------IF Branch------------------------------------
    216                                  ***0***     Count coming in to IF
    216             1                    ***0***     	              if ( WSTRB(byte_index) = '1' ) then
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.0%

------------------------------------IF Branch------------------------------------
    222                                  ***0***     Count coming in to IF
    222             1                    ***0***     	              if ( WSTRB(byte_index) = '1' ) then
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.0%

------------------------------------IF Branch------------------------------------
    228                                  ***0***     Count coming in to IF
    228             1                    ***0***     	              if ( WSTRB(byte_index) = '1' ) then
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.0%

------------------------------------IF Branch------------------------------------
    234                                  ***0***     Count coming in to IF
    234             1                    ***0***     	              if ( WSTRB(byte_index) = '1' ) then
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.0%

------------------------------------IF Branch------------------------------------
    240                                  ***0***     Count coming in to IF
    240             1                    ***0***     	              if ( WSTRB(byte_index) = '1' ) then
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.0%

------------------------------------IF Branch------------------------------------
    246                                  ***0***     Count coming in to IF
    246             1                    ***0***     	              if ( WSTRB(byte_index) = '1' ) then
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.0%

------------------------------------IF Branch------------------------------------
    252                                  ***0***     Count coming in to IF
    252             1                    ***0***     	              if ( WSTRB(byte_index) = '1' ) then
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.0%

------------------------------------IF Branch------------------------------------
    258                                  ***0***     Count coming in to IF
    258             1                    ***0***     	              if ( WSTRB(byte_index) = '1' ) then
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.0%

------------------------------------IF Branch------------------------------------
    264                                  ***0***     Count coming in to IF
    264             1                    ***0***     	              if ( WSTRB(byte_index) = '1' ) then
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.0%

------------------------------------IF Branch------------------------------------
    270                                  ***0***     Count coming in to IF
    270             1                    ***0***     	              if ( WSTRB(byte_index) = '1' ) then
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.0%

------------------------------------IF Branch------------------------------------
    276                                  ***0***     Count coming in to IF
    276             1                    ***0***     	              if ( WSTRB(byte_index) = '1' ) then
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.0%

------------------------------------IF Branch------------------------------------
    282                                  ***0***     Count coming in to IF
    282             1                    ***0***     	              if ( WSTRB(byte_index) = '1' ) then
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.0%

------------------------------------IF Branch------------------------------------
    288                                  ***0***     Count coming in to IF
    288             1                    ***0***     	              if ( WSTRB(byte_index) = '1' ) then
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.0%

------------------------------------IF Branch------------------------------------
    294                                  ***0***     Count coming in to IF
    294             1                    ***0***     	              if ( WSTRB(byte_index) = '1' ) then
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.0%

------------------------------------IF Branch------------------------------------
    300                                  ***0***     Count coming in to IF
    300             1                    ***0***     	              if ( WSTRB(byte_index) = '1' ) then
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.0%

------------------------------------IF Branch------------------------------------
    306                                  ***0***     Count coming in to IF
    306             1                    ***0***     	              if ( WSTRB(byte_index) = '1' ) then
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.0%

------------------------------------IF Branch------------------------------------
    312                                  ***0***     Count coming in to IF
    312             1                    ***0***     	              if ( WSTRB(byte_index) = '1' ) then
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.0%

------------------------------------IF Branch------------------------------------
    318                                  ***0***     Count coming in to IF
    318             1                    ***0***     	              if ( WSTRB(byte_index) = '1' ) then
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.0%

------------------------------------IF Branch------------------------------------
    324                                  ***0***     Count coming in to IF
    324             1                    ***0***     	              if ( WSTRB(byte_index) = '1' ) then
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.0%

------------------------------------IF Branch------------------------------------
    330                                  ***0***     Count coming in to IF
    330             1                    ***0***     	              if ( WSTRB(byte_index) = '1' ) then
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.0%

------------------------------------IF Branch------------------------------------
    336                                  ***0***     Count coming in to IF
    336             1                    ***0***     	              if ( WSTRB(byte_index) = '1' ) then
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.0%

------------------------------------IF Branch------------------------------------
    342                                  ***0***     Count coming in to IF
    342             1                    ***0***     	              if ( WSTRB(byte_index) = '1' ) then
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.0%

------------------------------------IF Branch------------------------------------
    348                                  ***0***     Count coming in to IF
    348             1                    ***0***     	              if ( WSTRB(byte_index) = '1' ) then
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.0%

------------------------------------IF Branch------------------------------------
    354                                  ***0***     Count coming in to IF
    354             1                    ***0***     	              if ( WSTRB(byte_index) = '1' ) then
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.0%

------------------------------------IF Branch------------------------------------
    360                                  ***0***     Count coming in to IF
    360             1                    ***0***     	              if ( WSTRB(byte_index) = '1' ) then
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.0%

------------------------------------IF Branch------------------------------------
    366                                  ***0***     Count coming in to IF
    366             1                    ***0***     	              if ( WSTRB(byte_index) = '1' ) then
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.0%

------------------------------------IF Branch------------------------------------
    372                                  ***0***     Count coming in to IF
    372             1                    ***0***     	              if ( WSTRB(byte_index) = '1' ) then
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.0%

------------------------------------IF Branch------------------------------------
    378                                  ***0***     Count coming in to IF
    378             1                    ***0***     	              if ( WSTRB(byte_index) = '1' ) then
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.0%

------------------------------------IF Branch------------------------------------
    384                                  ***0***     Count coming in to IF
    384             1                    ***0***     	              if ( WSTRB(byte_index) = '1' ) then
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.0%

------------------------------------IF Branch------------------------------------
    390                                  ***0***     Count coming in to IF
    390             1                    ***0***     	              if ( WSTRB(byte_index) = '1' ) then
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.0%

------------------------------------IF Branch------------------------------------
    396                                  ***0***     Count coming in to IF
    396             1                    ***0***     	              if ( WSTRB(byte_index) = '1' ) then
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.0%

------------------------------------IF Branch------------------------------------
    402                                  ***0***     Count coming in to IF
    402             1                    ***0***     	              if ( WSTRB(byte_index) = '1' ) then
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.0%

------------------------------------IF Branch------------------------------------
    408                                  ***0***     Count coming in to IF
    408             1                    ***0***     	              if ( WSTRB(byte_index) = '1' ) then
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.0%

------------------------------------IF Branch------------------------------------
    414                                  ***0***     Count coming in to IF
    414             1                    ***0***     	              if ( WSTRB(byte_index) = '1' ) then
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.0%

------------------------------------IF Branch------------------------------------
    420                                  ***0***     Count coming in to IF
    420             1                    ***0***     	              if ( WSTRB(byte_index) = '1' ) then
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.0%

------------------------------------IF Branch------------------------------------
    426                                  ***0***     Count coming in to IF
    426             1                    ***0***     	              if ( WSTRB(byte_index) = '1' ) then
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.0%

------------------------------------IF Branch------------------------------------
    432                                  ***0***     Count coming in to IF
    432             1                    ***0***     	              if ( WSTRB(byte_index) = '1' ) then
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.0%

------------------------------------IF Branch------------------------------------
    438                                  ***0***     Count coming in to IF
    438             1                    ***0***     	              if ( WSTRB(byte_index) = '1' ) then
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.0%

------------------------------------IF Branch------------------------------------
    444                                  ***0***     Count coming in to IF
    444             1                    ***0***     	              if ( WSTRB(byte_index) = '1' ) then
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.0%

------------------------------------IF Branch------------------------------------
    450                                  ***0***     Count coming in to IF
    450             1                    ***0***     	              if ( WSTRB(byte_index) = '1' ) then
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.0%

------------------------------------IF Branch------------------------------------
    456                                  ***0***     Count coming in to IF
    456             1                    ***0***     	              if ( WSTRB(byte_index) = '1' ) then
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.0%

------------------------------------IF Branch------------------------------------
    462                                  ***0***     Count coming in to IF
    462             1                    ***0***     	              if ( WSTRB(byte_index) = '1' ) then
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.0%

------------------------------------IF Branch------------------------------------
    468                                  ***0***     Count coming in to IF
    468             1                    ***0***     	              if ( WSTRB(byte_index) = '1' ) then
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.0%

------------------------------------IF Branch------------------------------------
    474                                  ***0***     Count coming in to IF
    474             1                    ***0***     	              if ( WSTRB(byte_index) = '1' ) then
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.0%

------------------------------------IF Branch------------------------------------
    480                                  ***0***     Count coming in to IF
    480             1                    ***0***     	              if ( WSTRB(byte_index) = '1' ) then
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.0%

------------------------------------IF Branch------------------------------------
    486                                  ***0***     Count coming in to IF
    486             1                    ***0***     	              if ( WSTRB(byte_index) = '1' ) then
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.0%

------------------------------------IF Branch------------------------------------
    492                                  ***0***     Count coming in to IF
    492             1                    ***0***     	              if ( WSTRB(byte_index) = '1' ) then
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.0%

------------------------------------IF Branch------------------------------------
    498                                  ***0***     Count coming in to IF
    498             1                    ***0***     	              if ( WSTRB(byte_index) = '1' ) then
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.0%

------------------------------------IF Branch------------------------------------
    504                                  ***0***     Count coming in to IF
    504             1                    ***0***     	              if ( WSTRB(byte_index) = '1' ) then
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.0%

------------------------------------IF Branch------------------------------------
    510                                  ***0***     Count coming in to IF
    510             1                    ***0***     	              if ( WSTRB(byte_index) = '1' ) then
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.0%

------------------------------------IF Branch------------------------------------
    516                                  ***0***     Count coming in to IF
    516             1                    ***0***     	              if ( WSTRB(byte_index) = '1' ) then
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.0%

------------------------------------IF Branch------------------------------------
    522                                  ***0***     Count coming in to IF
    522             1                    ***0***     	              if ( WSTRB(byte_index) = '1' ) then
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.0%

------------------------------------IF Branch------------------------------------
    528                                  ***0***     Count coming in to IF
    528             1                    ***0***     	              if ( WSTRB(byte_index) = '1' ) then
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.0%

------------------------------------IF Branch------------------------------------
    534                                  ***0***     Count coming in to IF
    534             1                    ***0***     	              if ( WSTRB(byte_index) = '1' ) then
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.0%

------------------------------------IF Branch------------------------------------
    540                                  ***0***     Count coming in to IF
    540             1                    ***0***     	              if ( WSTRB(byte_index) = '1' ) then
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.0%

------------------------------------IF Branch------------------------------------
    546                                  ***0***     Count coming in to IF
    546             1                    ***0***     	              if ( WSTRB(byte_index) = '1' ) then
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.0%

------------------------------------IF Branch------------------------------------
    552                                  ***0***     Count coming in to IF
    552             1                    ***0***     	              if ( WSTRB(byte_index) = '1' ) then
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.0%

------------------------------------IF Branch------------------------------------
    558                                  ***0***     Count coming in to IF
    558             1                    ***0***     	              if ( WSTRB(byte_index) = '1' ) then
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.0%

------------------------------------IF Branch------------------------------------
    564                                  ***0***     Count coming in to IF
    564             1                    ***0***     	              if ( WSTRB(byte_index) = '1' ) then
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.0%

------------------------------------IF Branch------------------------------------
    641                                        3     Count coming in to IF
    641             1                          3           if rising_edge(ACLK) then 
                                            ECOP     All False Count
Branch totals: 1 hit of 1 branch = 100.0%

------------------------------------IF Branch------------------------------------
    642                                        3     Count coming in to IF
    642             1                          2             if ARESETN = '0' then
    645             1                          1             else
Branch totals: 2 hits of 2 branches = 100.0%

------------------------------------IF Branch------------------------------------
    646                                        1     Count coming in to IF
    646             1                    ***0***               if (axi_awready = '1' and AWVALID = '1' and axi_wready = '1' and WVALID = '1' and axi_bvalid = '0'  ) then
    649             1                    ***0***               elsif (BREADY = '1' and axi_bvalid = '1') then   
                                               1     All False Count
Branch totals: 1 hit of 3 branches = 33.3%

------------------------------------IF Branch------------------------------------
    657                                        3     Count coming in to IF
    657             1                          3           if rising_edge(ACLK) then 
                                            ECOP     All False Count
Branch totals: 1 hit of 1 branch = 100.0%

------------------------------------IF Branch------------------------------------
    658                                        3     Count coming in to IF
    658             1                          2             if ARESETN = '0' then
    661             1                          1             else
Branch totals: 2 hits of 2 branches = 100.0%

------------------------------------IF Branch------------------------------------
    662                                        1     Count coming in to IF
    662             1                    ***0***               if (axi_arready = '0' and ARVALID = '1') then
    665             1                          1               else
Branch totals: 1 hit of 2 branches = 50.0%

------------------------------------IF Branch------------------------------------
    673                                        3     Count coming in to IF
    673             1                          3           if rising_edge(ACLK) then
                                            ECOP     All False Count
Branch totals: 1 hit of 1 branch = 100.0%

------------------------------------IF Branch------------------------------------
    674                                        3     Count coming in to IF
    674             1                          2             if ARESETN = '0' then
    677             1                          1             else
Branch totals: 2 hits of 2 branches = 100.0%

------------------------------------IF Branch------------------------------------
    678                                        1     Count coming in to IF
    678             1                    ***0***               if (axi_arready = '1' and ARVALID = '1' and axi_rvalid = '0') then
    681             1                    ***0***               elsif (axi_rvalid = '1' and RREADY = '1') then
                                               1     All False Count
Branch totals: 1 hit of 3 branches = 33.3%

------------------------------------CASE Branch------------------------------------
    692                                        6     Count coming in to CASE
    693             1                    ***0***               when b"000000" =>
    695             1                    ***0***               when b"000001" =>
    697             1                    ***0***               when b"000010" =>
    699             1                    ***0***               when b"000011" =>
    701             1                    ***0***               when b"000100" =>
    703             1                    ***0***               when b"000101" =>
    705             1                    ***0***               when b"000110" =>
    707             1                    ***0***               when b"000111" =>
    709             1                    ***0***               when b"001000" =>
    711             1                    ***0***               when b"001001" =>
    713             1                    ***0***               when b"001010" =>
    715             1                    ***0***               when b"001011" =>
    717             1                    ***0***               when b"001100" =>
    719             1                    ***0***               when b"001101" =>
    721             1                    ***0***               when b"001110" =>
    723             1                    ***0***               when b"001111" =>
    725             1                    ***0***               when b"010000" =>
    727             1                    ***0***               when b"010001" =>
    729             1                    ***0***               when b"010010" =>
    731             1                    ***0***               when b"010011" =>
    733             1                    ***0***               when b"010100" =>
    735             1                    ***0***               when b"010101" =>
    737             1                    ***0***               when b"010110" =>
    739             1                    ***0***               when b"010111" =>
    741             1                    ***0***               when b"011000" =>
    743             1                    ***0***               when b"011001" =>
    745             1                    ***0***               when b"011010" =>
    747             1                    ***0***               when b"011011" =>
    749             1                    ***0***               when b"011100" =>
    751             1                    ***0***               when b"011101" =>
    753             1                    ***0***               when b"011110" =>
    755             1                    ***0***               when b"011111" =>
    757             1                    ***0***     	      when b"100000" =>
    759             1                    ***0***     	      when b"100001" =>
    761             1                    ***0***     	      when b"100010" =>
    763             1                    ***0***     	      when b"100011" =>
    765             1                    ***0***     	      when b"100100" =>
    767             1                    ***0***     	      when b"100101" =>
    769             1                    ***0***     	      when b"100110" =>
    771             1                    ***0***     	      when b"100111" =>
    773             1                    ***0***     	      when b"101000" =>
    775             1                    ***0***     	      when b"101001" =>
    777             1                    ***0***     	      when b"101010" =>
    779             1                    ***0***     	      when b"101011" =>
    781             1                    ***0***     	      when b"101100" =>
    783             1                    ***0***     	      when b"101101" =>
    785             1                    ***0***     	      when b"101110" =>
    787             1                    ***0***     	      when b"101111" =>
    789             1                    ***0***     	      when b"110000" =>
    791             1                    ***0***     	      when b"110001" =>
    793             1                    ***0***     	      when b"110010" =>
    795             1                    ***0***     	      when b"110011" =>
    797             1                    ***0***     	      when b"110100" =>
    799             1                    ***0***     	      when b"110101" =>
    801             1                    ***0***     	      when b"110110" =>
    803             1                    ***0***     	      when b"110111" =>
    805             1                    ***0***     	      when b"111000" =>
    807             1                    ***0***     	      when b"111001" =>
    809             1                    ***0***     	      when b"111010" =>
    811             1                    ***0***     	      when b"111011" =>
    813             1                    ***0***     	      when b"111100" =>
    815             1                    ***0***     	      when b"111101" =>
    817             1                    ***0***     	      when b"111110" =>
    819             1                          4     	      when b"111111" =>
    821             1                          2               when others =>
Branch totals: 2 hits of 65 branches = 3.0%

------------------------------------IF Branch------------------------------------
    827                                        4     Count coming in to IF
    827             1                          4           if (rising_edge (ACLK)) then
                                            ECOP     All False Count
Branch totals: 1 hit of 1 branch = 100.0%

------------------------------------IF Branch------------------------------------
    828                                        4     Count coming in to IF
    828             1                          3             if ( ARESETN = '0' ) then
    830             1                          1             else
Branch totals: 2 hits of 2 branches = 100.0%

------------------------------------IF Branch------------------------------------
    831                                        1     Count coming in to IF
    831             1                    ***0***               if (slv_reg_rden = '1') then
                                               1     All False Count
Branch totals: 1 hit of 2 branches = 50.0%

------------------------------------IF Branch------------------------------------
    839                                      220     Count coming in to IF
    839             1                        220             if (rising_edge (ACLK)) then
                                            ECOP     All False Count
Branch totals: 1 hit of 1 branch = 100.0%


Condition Coverage:
    Enabled Coverage            Active   Covered    Misses % Covered
    ----------------            ------      ----    ------ ---------
    FEC Condition Terms             28         0        28       0.0

================================Condition Details================================

Condition Coverage for file ../modules/dut/vfpConfig.vhd --

----------------Focused Condition View-------------------
Line       73 Item    1  ((((axi_awready = '0') and (AWVALID = '1')) and (WVALID = '1')) and (aw_en = '1'))
Condition totals: 0 of 4 input terms covered = 0.0%

           Input Term   Covered  Reason for no coverage   Hint
          -----------  --------  -----------------------  --------------
  (axi_awready = '0')         N  No hits                  Hit '_0' and '_1'
      (AWVALID = '1')         N  '_1' not hit             Hit '_1'
       (WVALID = '1')         N  No hits                  Hit '_0' and '_1'
        (aw_en = '1')         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target             Non-masking condition(s)      
 ---------  ---------  --------------------   -------------------------     
  Row   1:    ***0***  (axi_awready = '0')_0  -                             
  Row   2:    ***0***  (axi_awready = '0')_1  (aw_en = '1') && (WVALID = '1') && (AWVALID = '1')
  Row   3:          1  (AWVALID = '1')_0      (axi_awready = '0')           
  Row   4:    ***0***  (AWVALID = '1')_1      (aw_en = '1') && (WVALID = '1') && (axi_awready = '0')
  Row   5:    ***0***  (WVALID = '1')_0       ((axi_awready = '0') and (AWVALID = '1'))
  Row   6:    ***0***  (WVALID = '1')_1       (aw_en = '1') && ((axi_awready = '0') and (AWVALID = '1'))
  Row   7:    ***0***  (aw_en = '1')_0        (((axi_awready = '0') and (AWVALID = '1')) and (WVALID = '1'))
  Row   8:    ***0***  (aw_en = '1')_1        (((axi_awready = '0') and (AWVALID = '1')) and (WVALID = '1'))

----------------Focused Condition View-------------------
Line       75 Item    1  ((BREADY = '1') and (axi_bvalid = '1'))
Condition totals: 0 of 2 input terms covered = 0.0%

          Input Term   Covered  Reason for no coverage   Hint
         -----------  --------  -----------------------  --------------
      (BREADY = '1')         N  '_1' not hit             Hit '_1'
  (axi_bvalid = '1')         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:          1  (BREADY = '1')_0      -                             
  Row   2:    ***0***  (BREADY = '1')_1      (axi_bvalid = '1')            
  Row   3:    ***0***  (axi_bvalid = '1')_0  (BREADY = '1')                
  Row   4:    ***0***  (axi_bvalid = '1')_1  (BREADY = '1')                

----------------Focused Condition View-------------------
Line       90 Item    1  ((((axi_awready = '0') and (AWVALID = '1')) and (WVALID = '1')) and (aw_en = '1'))
Condition totals: 0 of 4 input terms covered = 0.0%

           Input Term   Covered  Reason for no coverage   Hint
          -----------  --------  -----------------------  --------------
  (axi_awready = '0')         N  No hits                  Hit '_0' and '_1'
      (AWVALID = '1')         N  '_1' not hit             Hit '_1'
       (WVALID = '1')         N  No hits                  Hit '_0' and '_1'
        (aw_en = '1')         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target             Non-masking condition(s)      
 ---------  ---------  --------------------   -------------------------     
  Row   1:    ***0***  (axi_awready = '0')_0  -                             
  Row   2:    ***0***  (axi_awready = '0')_1  (aw_en = '1') && (WVALID = '1') && (AWVALID = '1')
  Row   3:          1  (AWVALID = '1')_0      (axi_awready = '0')           
  Row   4:    ***0***  (AWVALID = '1')_1      (aw_en = '1') && (WVALID = '1') && (axi_awready = '0')
  Row   5:    ***0***  (WVALID = '1')_0       ((axi_awready = '0') and (AWVALID = '1'))
  Row   6:    ***0***  (WVALID = '1')_1       (aw_en = '1') && ((axi_awready = '0') and (AWVALID = '1'))
  Row   7:    ***0***  (aw_en = '1')_0        (((axi_awready = '0') and (AWVALID = '1')) and (WVALID = '1'))
  Row   8:    ***0***  (aw_en = '1')_1        (((axi_awready = '0') and (AWVALID = '1')) and (WVALID = '1'))

----------------Focused Condition View-------------------
Line       102 Item    1  ((((axi_wready = '0') and (WVALID = '1')) and (AWVALID = '1')) and (aw_en = '1'))
Condition totals: 0 of 4 input terms covered = 0.0%

          Input Term   Covered  Reason for no coverage   Hint
         -----------  --------  -----------------------  --------------
  (axi_wready = '0')         N  No hits                  Hit '_0' and '_1'
      (WVALID = '1')         N  '_1' not hit             Hit '_1'
     (AWVALID = '1')         N  No hits                  Hit '_0' and '_1'
       (aw_en = '1')         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:    ***0***  (axi_wready = '0')_0  -                             
  Row   2:    ***0***  (axi_wready = '0')_1  (aw_en = '1') && (AWVALID = '1') && (WVALID = '1')
  Row   3:          1  (WVALID = '1')_0      (axi_wready = '0')            
  Row   4:    ***0***  (WVALID = '1')_1      (aw_en = '1') && (AWVALID = '1') && (axi_wready = '0')
  Row   5:    ***0***  (AWVALID = '1')_0     ((axi_wready = '0') and (WVALID = '1'))
  Row   6:    ***0***  (AWVALID = '1')_1     (aw_en = '1') && ((axi_wready = '0') and (WVALID = '1'))
  Row   7:    ***0***  (aw_en = '1')_0       (((axi_wready = '0') and (WVALID = '1')) and (AWVALID = '1'))
  Row   8:    ***0***  (aw_en = '1')_1       (((axi_wready = '0') and (WVALID = '1')) and (AWVALID = '1'))

----------------Focused Condition View-------------------
Line       646 Item    1  (((((axi_awready = '1') and (AWVALID = '1')) and (axi_wready = '1')) and (WVALID = '1')) and (axi_bvalid = '0'))
Condition totals: 0 of 5 input terms covered = 0.0%

           Input Term   Covered  Reason for no coverage   Hint
          -----------  --------  -----------------------  --------------
  (axi_awready = '1')         N  '_1' not hit             Hit '_1'
      (AWVALID = '1')         N  No hits                  Hit '_0' and '_1'
   (axi_wready = '1')         N  No hits                  Hit '_0' and '_1'
       (WVALID = '1')         N  No hits                  Hit '_0' and '_1'
   (axi_bvalid = '0')         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target             Non-masking condition(s)      
 ---------  ---------  --------------------   -------------------------     
  Row   1:          1  (axi_awready = '1')_0  -                             
  Row   2:    ***0***  (axi_awready = '1')_1  (axi_bvalid = '0') && (WVALID = '1') && (axi_wready = '1') && (AWVALID = '1')
  Row   3:    ***0***  (AWVALID = '1')_0      (axi_awready = '1')           
  Row   4:    ***0***  (AWVALID = '1')_1      (axi_bvalid = '0') && (WVALID = '1') && (axi_wready = '1') && (axi_awready = '1')
  Row   5:    ***0***  (axi_wready = '1')_0   ((axi_awready = '1') and (AWVALID = '1'))
  Row   6:    ***0***  (axi_wready = '1')_1   (axi_bvalid = '0') && (WVALID = '1') && ((axi_awready = '1') and (AWVALID = '1'))
  Row   7:    ***0***  (WVALID = '1')_0       (((axi_awready = '1') and (AWVALID = '1')) and (axi_wready = '1'))
  Row   8:    ***0***  (WVALID = '1')_1       (axi_bvalid = '0') && (((axi_awready = '1') and (AWVALID = '1')) and (axi_wready = '1'))
  Row   9:    ***0***  (axi_bvalid = '0')_0   ((((axi_awready = '1') and (AWVALID = '1')) and (axi_wready = '1')) and (WVALID = '1'))
 Row   10:    ***0***  (axi_bvalid = '0')_1   ((((axi_awready = '1') and (AWVALID = '1')) and (axi_wready = '1')) and (WVALID = '1'))

----------------Focused Condition View-------------------
Line       649 Item    1  ((BREADY = '1') and (axi_bvalid = '1'))
Condition totals: 0 of 2 input terms covered = 0.0%

          Input Term   Covered  Reason for no coverage   Hint
         -----------  --------  -----------------------  --------------
      (BREADY = '1')         N  '_1' not hit             Hit '_1'
  (axi_bvalid = '1')         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:          1  (BREADY = '1')_0      -                             
  Row   2:    ***0***  (BREADY = '1')_1      (axi_bvalid = '1')            
  Row   3:    ***0***  (axi_bvalid = '1')_0  (BREADY = '1')                
  Row   4:    ***0***  (axi_bvalid = '1')_1  (BREADY = '1')                

----------------Focused Condition View-------------------
Line       662 Item    1  ((axi_arready = '0') and (ARVALID = '1'))
Condition totals: 0 of 2 input terms covered = 0.0%

           Input Term   Covered  Reason for no coverage   Hint
          -----------  --------  -----------------------  --------------
  (axi_arready = '0')         N  No hits                  Hit '_0' and '_1'
      (ARVALID = '1')         N  '_1' not hit             Hit '_1'

     Rows:       Hits  FEC Target             Non-masking condition(s)      
 ---------  ---------  --------------------   -------------------------     
  Row   1:    ***0***  (axi_arready = '0')_0  -                             
  Row   2:    ***0***  (axi_arready = '0')_1  (ARVALID = '1')               
  Row   3:          1  (ARVALID = '1')_0      (axi_arready = '0')           
  Row   4:    ***0***  (ARVALID = '1')_1      (axi_arready = '0')           

----------------Focused Condition View-------------------
Line       678 Item    1  (((axi_arready = '1') and (ARVALID = '1')) and (axi_rvalid = '0'))
Condition totals: 0 of 3 input terms covered = 0.0%

           Input Term   Covered  Reason for no coverage   Hint
          -----------  --------  -----------------------  --------------
  (axi_arready = '1')         N  '_1' not hit             Hit '_1'
      (ARVALID = '1')         N  No hits                  Hit '_0' and '_1'
   (axi_rvalid = '0')         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target             Non-masking condition(s)      
 ---------  ---------  --------------------   -------------------------     
  Row   1:          1  (axi_arready = '1')_0  -                             
  Row   2:    ***0***  (axi_arready = '1')_1  (axi_rvalid = '0') && (ARVALID = '1')
  Row   3:    ***0***  (ARVALID = '1')_0      (axi_arready = '1')           
  Row   4:    ***0***  (ARVALID = '1')_1      (axi_rvalid = '0') && (axi_arready = '1')
  Row   5:    ***0***  (axi_rvalid = '0')_0   ((axi_arready = '1') and (ARVALID = '1'))
  Row   6:    ***0***  (axi_rvalid = '0')_1   ((axi_arready = '1') and (ARVALID = '1'))

----------------Focused Condition View-------------------
Line       681 Item    1  ((axi_rvalid = '1') and (RREADY = '1'))
Condition totals: 0 of 2 input terms covered = 0.0%

          Input Term   Covered  Reason for no coverage   Hint
         -----------  --------  -----------------------  --------------
  (axi_rvalid = '1')         N  '_1' not hit             Hit '_1'
      (RREADY = '1')         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:          1  (axi_rvalid = '1')_0  -                             
  Row   2:    ***0***  (axi_rvalid = '1')_1  (RREADY = '1')                
  Row   3:    ***0***  (RREADY = '1')_0      (axi_rvalid = '1')            
  Row   4:    ***0***  (RREADY = '1')_1      (axi_rvalid = '1')            


Expression Coverage:
    Enabled Coverage            Active   Covered    Misses % Covered
    ----------------            ------      ----    ------ ---------
    FEC Expression Terms             7         0         7       0.0

================================Expression Details================================

Expression Coverage for file ../modules/dut/vfpConfig.vhd --

----------------Focused Expression View-----------------
Line       110 Item    1  (((axi_wready and WVALID) and axi_awready) and AWVALID)
Expression totals: 0 of 4 input terms covered = 0.0%

   Input Term   Covered  Reason for no coverage   Hint
  -----------  --------  -----------------------  --------------
   axi_wready         N  No hits                  Hit '_0' and '_1'
       WVALID         N  No hits                  Hit '_0' and '_1'
  axi_awready         N  No hits                  Hit '_0' and '_1'
      AWVALID         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:    ***0***  axi_wready_0          AWVALID && axi_awready && WVALID
  Row   2:    ***0***  axi_wready_1          AWVALID && axi_awready && WVALID
  Row   3:    ***0***  WVALID_0              AWVALID && axi_awready && axi_wready
  Row   4:    ***0***  WVALID_1              AWVALID && axi_awready && axi_wready
  Row   5:    ***0***  axi_awready_0         AWVALID && (axi_wready and WVALID)
  Row   6:    ***0***  axi_awready_1         AWVALID && (axi_wready and WVALID)
  Row   7:    ***0***  AWVALID_0             ((axi_wready and WVALID) and axi_awready)
  Row   8:    ***0***  AWVALID_1             ((axi_wready and WVALID) and axi_awready)

----------------Focused Expression View-----------------
Line       687 Item    1  ((axi_arready and ARVALID) and not(axi_rvalid))
Expression totals: 0 of 3 input terms covered = 0.0%

   Input Term   Covered  Reason for no coverage   Hint
  -----------  --------  -----------------------  --------------
  axi_arready         N  No hits                  Hit '_0' and '_1'
      ARVALID         N  No hits                  Hit '_0' and '_1'
   axi_rvalid         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:    ***0***  axi_arready_0         not axi_rvalid && ARVALID     
  Row   2:    ***0***  axi_arready_1         not axi_rvalid && ARVALID     
  Row   3:    ***0***  ARVALID_0             not axi_rvalid && axi_arready 
  Row   4:    ***0***  ARVALID_1             not axi_rvalid && axi_arready 
  Row   5:    ***0***  axi_rvalid_0          (axi_arready and ARVALID)     
  Row   6:    ***0***  axi_rvalid_1          (axi_arready and ARVALID)     


FSM Coverage:
    Enabled Coverage            Active      Hits    Misses % Covered
    ----------------            ------      ----    ------ ---------
    FSMs                                                       100.0
        States                       0         0         0     100.0
        Transitions                  0         0         0     100.0

=================================================================================
=== File: ../modules/top.sv
=================================================================================
Statement Coverage:
    Enabled Coverage            Active      Hits    Misses % Covered
    ----------------            ------      ----    ------ ---------
    Stmts                           26        26         0     100.0

================================Statement Details================================

Statement Coverage for file ../modules/top.sv --

    1                                                `include "uvm_macros.svh"
    2                                                package socTest_pkg;
    3                                                import uvm_pkg::*;
    4                                                //----------------------------------------------------------------------------------//
    5                                                // UVM_CONFIGURATION
    6                                                //----------------------------------------------------------------------------------//
    7                                                
    8                                                // UVM_OBJECT : TEMPLATE_CONFIGURATION [TEMPLATE]
    9                                                class template_configuration extends uvm_object;
    10                                                   `uvm_object_utils(template_configuration)
    11                                                   function new(string name = "");
    12                                                       super.new(name);
    13                                                   endfunction: new
    14                                               endclass: template_configuration
    15                                               // UVM_OBJECT : AXILITE_CONFIGURATION [AXILITE]
    16                                               class axiLite_configuration extends uvm_object;
    17                                                   `uvm_object_utils(axiLite_configuration)
    18                                                   function new(string name = "");
    19                                                       super.new(name);
    20                                                   endfunction: new
    21                                               endclass: axiLite_configuration
    22                                               // UVM_OBJECT : RGB_CONFIGURATION [RGB]
    23                                               class rgb_configuration extends uvm_object;
    24                                                   `uvm_object_utils(rgb_configuration)
    25                                                   function new(string name = "");
    26                                                       super.new(name);
    27                                                   endfunction: new
    28                                                   rand int count;
    29                                                   constraint c_count    { count > 0; count < 128; }
    30                                               endclass: rgb_configuration
    31                                               
    32                                               
    33                                               
    34                                               
    35                                               
    36                                               //----------------------------------------------------------------------------------//
    37                                               typedef enum { READ, WRITE } axiLite_txn_e;
    38                                               //----------------------------------------------------------------------------------//
    39                                               
    40                                               
    41                                               //----------------------------------------------------------------------------------//
    42                                               // UVM_SEQUENCE_ITEM
    43                                               //----------------------------------------------------------------------------------//
    44                                               // UVM_SEQUENCE_ITEM : RGB_TRANSACTION [RGB]
    45                                               class rgb_transaction extends uvm_sequence_item; 
    46                                                   rand bit[7:0]       iRed;
    47                                                   rand bit[7:0]       iGreen;
    48                                                   rand bit[7:0]       iBlue;
    49                                                   rand bit            iPixelEn;
    50                                                   rand bit            iValid;
    51                                                   rand bit            iEof;
    52                                                   rand bit [10:0]     iX;
    53                                                   rand bit [10:0]     iY;
    54                                                   function new(string name = "");
    55                                                       super.new(name);
    56                                                   endfunction: new
    57                                                   `uvm_object_utils_begin(rgb_transaction)
    58                                                       `uvm_field_int(iRed,         UVM_ALL_ON)
    59                                                       `uvm_field_int(iGreen,       UVM_ALL_ON)
    60                                                       `uvm_field_int(iBlue,        UVM_ALL_ON)
    61                                                       `uvm_field_int(iPixelEn,     UVM_ALL_ON)
    62                                                       `uvm_field_int(iEof,         UVM_ALL_ON)
    63                                                       `uvm_field_int(iValid,       UVM_ALL_ON)
    64                                                       `uvm_field_int(iX,           UVM_ALL_ON)
    65                                                       `uvm_field_int(iY,           UVM_ALL_ON)
    66                                                   `uvm_object_utils_end
    67                                               endclass: rgb_transaction
    68                                               // UVM_SEQUENCE_ITEM : AXILITE_TXN [AXILITE]
    69                                               class axiLite_transaction extends uvm_sequence_item;
    70                                                   rand bit [15:0]     addr;
    71                                                   rand bit [31:0]     data;
    72                                                   rand bit [31:0]     WDATA;
    73                                                   rand bit [31:0]     RDATA;
    74                                                   rand axiLite_txn_e  reqWriteRead;
    75                                                   rand int unsigned   cycles;
    76                                                   constraint c_cycles { 
    77                                                   cycles <= 20; }
    78                                                   function new (string name = "");
    79                                                       super.new(name);
    80                                                   endfunction
    81                                                   function string convert2string();
    82                                                       return $sformatf("addr='h%h, data='h%0h, cycles='d%0d",addr, data, cycles);
    83                                                   endfunction
    84                                                   `uvm_object_utils_begin(axiLite_transaction)
    85                                                       `uvm_field_int  (addr,                          UVM_DEFAULT)
    86                                                       `uvm_field_int  (data,                          UVM_DEFAULT)
    87                                                       `uvm_field_int  (WDATA,                         UVM_DEFAULT)
    88                                                       `uvm_field_int  (RDATA,                         UVM_DEFAULT)
    89                                                       `uvm_field_enum (axiLite_txn_e, reqWriteRead,   UVM_DEFAULT)    
    90                                                       `uvm_field_int  (cycles,                        UVM_DEFAULT)
    91                                                   `uvm_object_utils_end
    92                                               endclass: axiLite_transaction
    93                                               // UVM_SEQUENCE_ITEM : TEMPLATE_TRANSACTION [TEMPLATE]
    94                                               class template_transaction extends uvm_sequence_item;
    95                                                   rand bit[1:0] ina;
    96                                                   rand bit[1:0] inb;
    97                                                   bit[2:0]      out;
    98                                                   function new(string name = "");
    99                                                       super.new(name);
    100                                                  endfunction: new
    101                                                  `uvm_object_utils_begin(template_transaction)
    102                                                      `uvm_field_int(ina, UVM_ALL_ON)
    103                                                      `uvm_field_int(inb, UVM_ALL_ON)
    104                                                      `uvm_field_int(out, UVM_ALL_ON)
    105                                                  `uvm_object_utils_end
    106                                              endclass: template_transaction
    107                                              
    108                                              
    109                                              
    110                                              
    111                                              //----------------------------------------------------------------------------------//
    112                                              // UVM_SEQUENCE
    113                                              //----------------------------------------------------------------------------------//
    114                                              // UVM_SEQUENCE : TEMPLATE_SEQUENCER [TEMPLATE]
    115                                              class template_sequencer extends uvm_sequencer #(template_transaction);
    116                                                  `uvm_component_utils(template_sequencer)
    117                                                  function new(string name, uvm_component parent);
    118                                                      super.new(name, parent);
    119                                                  endfunction
    120                                              endclass: template_sequencer
    121                                              // UVM_SEQUENCE : AXILITE_SQR [AXILITE]
    122                                              class axiLite_sequencer extends uvm_sequencer #(axiLite_transaction);
    123                                                  int id;
    124                                                  `uvm_component_utils_begin(axiLite_sequencer)
    125                                                      `uvm_field_int(id, UVM_DEFAULT)
    126                                                  `uvm_component_utils_end
    127                                                  function new (string name, uvm_component parent);
    128                                                      super.new(name, parent);
    129                                                  endfunction
    130                                              endclass: axiLite_sequencer
    131                                              // UVM_SEQUENCE : RGB_SEQUENCER [RGB]
    132                                              class rgb_sequencer extends uvm_sequencer #(rgb_transaction);
    133                                                  `uvm_component_utils(rgb_sequencer)
    134                                                  function new(string name, uvm_component parent);
    135                                                      super.new(name, parent);
    136                                                  endfunction
    137                                              endclass: rgb_sequencer
    138                                              
    139                                              
    140                                              
    141                                              
    142                                              
    143                                              //----------------------------------------------------------------------------------//
    144                                              // UVM_SEQUENCE
    145                                              //----------------------------------------------------------------------------------//
    146                                              // UVM_SEQUENCE : RGB_RANDOM_SEQUENCE [RGB]
    147                                              class rgb_random_sequence extends uvm_sequence #(rgb_transaction);
    148                                                  `uvm_object_utils(rgb_random_sequence);
    149                                                  function new(string name = "rgb_random_sequence");
    150                                                      super.new(name);
    151                                                  endfunction : new
    152                                                  task body();
    153                                                  rgb_transaction frame_tx = rgb_transaction::type_id::create("frame_tx");
    154                                                      repeat (100000) begin : random_loop
    155                                                          start_item(frame_tx);
    156                                                          assert(frame_tx.randomize());
    157                                                          finish_item(frame_tx);
    158                                                      end : random_loop
    159                                                  endtask : body
    160                                              endclass : rgb_random_sequence
    161                                              // UVM_SEQUENCE : RANDOM_SEQUENCE_R1 [RGB]
    162                                              class random_sequence_r1 extends uvm_sequence #(rgb_transaction);
    163                                                  `uvm_object_utils(random_sequence_r1);
    164                                                  function new(string name = "random_sequence_r1");
    165                                                      super.new(name);
    166                                                  endfunction : new
    167                                                  task body();
    168                                                  rgb_transaction frame_tx = rgb_transaction::type_id::create("frame_tx");
    169                                                  //`uvm_info("random_sequence_r1", "executing...", UVM_LOW)
    170                                                      repeat (100) begin : random_loop
    171                                                          start_item(frame_tx);
    172                                                          assert(frame_tx.randomize());
    173                                                          finish_item(frame_tx);
    174                                                      end : random_loop
    175                                                  endtask : body
    176                                              endclass : random_sequence_r1
    177                                              // UVM_SEQUENCE : RANDOM_SEQUENCE_R2 [RGB]
    178                                              class random_sequence_r2 extends random_sequence_r1;
    179                                                  `uvm_object_utils(random_sequence_r2);
    180                                                  function new(string name = "random_sequence_r2");
    181                                                      super.new(name);
    182                                                  endfunction : new
    183                                                  task body();
    184                                                  rgb_transaction frame_tx = rgb_transaction::type_id::create("frame_tx");
    185                                                  //`uvm_info("random_sequence_r2", "executing...", UVM_LOW)
    186                                                      repeat (1) begin : random_loop
    187                                                          start_item(frame_tx);
    188                                                          assert(frame_tx.randomize());
    189                                                          finish_item(frame_tx);
    190                                                      end : random_loop
    191                                                  endtask : body
    192                                              endclass : random_sequence_r2
    193                                              // UVM_SEQUENCE : TOP_SEQUENCE [RGB]
    194                                              class top_sequence extends uvm_sequence #(rgb_transaction);
    195                                                  `uvm_object_utils(top_sequence)
    196                                                  `uvm_declare_p_sequencer(rgb_sequencer)
    197                                                  function new (string name = "");
    198                                                      super.new(name);
    199                                                  endfunction
    200                                                  task body;
    201                                                      rgb_configuration cfg;
    202                                                      int count;
    203                                                      if ( uvm_config_db #(rgb_configuration)::get(p_sequencer, "", "config", cfg) ) begin
    204                                                          count    = cfg.count;
    205                                                      end
    206                                                      else
    207                                                      begin
    208                                                          count    = 1;
    209                                                      end
    210                                                      
    211                                                      if (starting_phase != null)
    212                                                          starting_phase.raise_objection(this);
    213                                                      repeat(count)
    214                                                      begin
    215                                                          random_sequence_r1 seq;
    216                                                          seq = random_sequence_r1::type_id::create("seq");
    217                                                          seq.start(p_sequencer, this);
    218                                                      end
    219                                                      if (starting_phase != null)
    220                                                          starting_phase.drop_objection(this);
    221                                                  endtask: body
    222                                              endclass: top_sequence
    223                                              // UVM_SEQUENCE : AXILITE_BASE_SEQ [AXILITE]
    224                                              virtual class axiLite_base_seq extends uvm_sequence #(axiLite_transaction);
    225                                                  function new (string name="axiLite_base_seq");
    226                                                      super.new(name);
    227                                                  endfunction
    228                                              endclass: axiLite_base_seq
    229                                              // UVM_SEQUENCE : AXILITE_NO_ACTIVITY_SEQ [AXILITE]
    230                                              class axiLite_no_activity_sequence extends axiLite_base_seq;
    231                                                  `uvm_object_utils(axiLite_no_activity_sequence)
    232                                                  function new(string name="axiLite_no_activity_sequence");
    233                                                      super.new(name);
    234                                                  endfunction
    235                                                  virtual task body();
    236                                                      `uvm_info("SEQ", "executing", UVM_LOW)
    237                                                  endtask: body
    238                                              endclass: axiLite_no_activity_sequence
    239                                              // UVM_SEQUENCE : AXILITE_RANDOM_SEQ [AXILITE]
    240                                              class axiLite_random_sequence extends axiLite_base_seq;
    241                                                  `uvm_object_utils(axiLite_random_sequence)
    242                                                  function new(string name="axiLite_random_sequence");
    243                                                      super.new(name);
    244                                                  endfunction
    245                                                  virtual task body();
    246                                                      axiLite_transaction item;
    247                                                      int num_txn;
    248                                                      bit typ_txn;
    249                                                      `uvm_info("SEQ", "executing...", UVM_LOW)
    250                                                      num_txn = $urandom_range(5,20);
    251                                                      repeat(num_txn) begin    
    252                                                      `uvm_create(item)
    253                                                      item.cycles         = $urandom_range(1,5);
    254                                                      item.addr           = $urandom();
    255                                                      item.data           = $urandom();
    256                                                      typ_txn             = $random();
    257                                                      item.reqWriteRead   = typ_txn ? WRITE : READ; 
    258                                                      `uvm_send(item);
    259                                                      end    
    260                                                  endtask: body
    261                                              endclass: axiLite_random_sequence
    262                                              // UVM_SEQUENCE : AXILITE_DIRECTED_SEQ [AXILITE]
    263                                              class axiLite_directed_sequence extends axiLite_base_seq;
    264                                                  `uvm_object_utils(axiLite_directed_sequence)
    265                                                  function new(string name="axiLite_directed_sequence");
    266                                                      super.new(name);
    267                                                  endfunction
    268                                                  virtual task body();
    269                                                      axiLite_transaction item;
    270                                                      bit [8:0] addr;
    271                                                      `uvm_info("SEQ", "executing...WR->RD->WR->RD", UVM_LOW)
    272                                                      for(addr = 0; addr < 256; addr ++) begin
    273                                                          `uvm_create(item)
    274                                                          item.addr           = {14'h0,addr[7:0]};
    275                                                          item.reqWriteRead   = addr[0] ? READ : WRITE;
    276                                                          item.cycles         = 0;
    277                                                          item.data           = addr;
    278                                                          `uvm_send(item);
    279                                                      end
    280                                                      `uvm_info("SEQ", "executing...WR->WR->RD->RD", UVM_LOW)
    281                                                      for(addr = 0; addr < 255; addr ++) begin
    282                                                          `uvm_create(item)
    283                                                          item.addr           = {14'h0,addr[7:0]};
    284                                                          item.reqWriteRead   = addr[8] ? READ : WRITE;
    285                                                          item.cycles         = 5;
    286                                                          item.data           = addr;
    287                                                          `uvm_send(item);
    288                                                      end
    289                                                  endtask: body
    290                                              endclass: axiLite_directed_sequence
    291                                              // UVM_SEQUENCE : AXILITE_USEVAR_SEQ [AXILITE]
    292                                              class axiLite_usevar_sequence extends axiLite_base_seq;
    293                                                  `uvm_object_utils(axiLite_usevar_sequence)
    294                                                  `uvm_declare_p_sequencer(axiLite_sequencer)
    295                                                  function new(string name="axiLite_usevar_sequence");
    296                                                      super.new(name);
    297                                                  endfunction
    298                                                  virtual task body();
    299                                                  axiLite_transaction item;
    300                                                  int id;
    301                                                  `uvm_info("SEQ", "executing...", UVM_LOW)
    302                                                  id = p_sequencer.id;
    303                                                  `uvm_info("SEQ", $sformatf("using id=%0hh from sequencer", id), UVM_LOW)
    304                                                  `uvm_create(item)
    305                                                  item.cycles = $urandom_range(1,5);
    306                                                  item.data = id;
    307                                                  `uvm_send(item);
    308                                                  endtask
    309                                              endclass:axiLite_usevar_sequence
    310                                              // UVM_SEQUENCE : TEMPLATE_BASE_SEQ [TEMPLATE]
    311                                              virtual class template_base_sequence extends uvm_sequence #(template_transaction);
    312                                                  function new (string name="template_base_sequence");
    313                                                      super.new(name);
    314                                                  endfunction
    315                                              endclass: template_base_sequence
    316                                              // UVM_SEQUENCE : TEMPLATE_SEQUENCE [TEMPLATE]
    317                                              class template_sequence extends uvm_sequence#(template_transaction);
    318                                                  `uvm_object_utils(template_sequence)
    319                                                  function new(string name = "");
    320                                                      super.new(name);
    321                                                  endfunction: new
    322                                                  task body();
    323                                                      template_transaction tx;
    324                                                      repeat(10000) begin
    325                                                      tx = template_transaction::type_id::create(.name("tx"), .contxt(get_full_name()));
    326                                                      start_item(tx);
    327                                                          assert(tx.randomize());
    328                                                          //`uvm_info("sa_sequence", tx.sprint(), UVM_LOW);
    329                                                      finish_item(tx);
    330                                                      end
    331                                                  endtask: body
    332                                              endclass: template_sequence
    333                                              
    334                                              
    335                                              
    336                                              
    337                                              //----------------------------------------------------------------------------------//
    338                                              // UVM_DRIVER
    339                                              //----------------------------------------------------------------------------------//
    340                                              // UVM_DRIVER : AXILITE_DRV [AXILITE]
    341                                              class axiLite_driver extends uvm_driver #(axiLite_transaction);
    342                                                  protected virtual axiLite_if axiLiteVif;
    343                                                  protected int     id;
    344                                                  `uvm_component_utils_begin(axiLite_driver)
    345                                                      `uvm_field_int(id, UVM_DEFAULT)
    346                                                  `uvm_component_utils_end
    347                                                  function new (string name, uvm_component parent);
    348                                                      super.new(name, parent);
    349                                                  endfunction
    350                                                  function void build_phase (uvm_phase phase);
    351                                                      super.build_phase(phase);
    352                                                      if (!uvm_config_db#(virtual axiLite_if)::get(this, "", "axiLiteVif", axiLiteVif))
    353                                                      `uvm_fatal("NOVIF", {"virtual interface must be set for: ",
    354                                                      get_full_name(), ".axiLiteVif"});
    355                                                  endfunction
    356                                                  virtual task run_phase (uvm_phase phase);
    357                                                      fork
    358                                                          get_and_drive();
    359                                                          reset_signals();
    360                                                      join
    361                                                  endtask: run_phase
    362                                                  virtual protected task get_and_drive();
    363                                                      forever begin
    364                                                          @(posedge axiLiteVif.ACLK);
    365                                                          if (axiLiteVif.ARESETN == 1'b0) begin
    366                                                              @(posedge axiLiteVif.ARESETN);
    367                                                              @(posedge axiLiteVif.ACLK);
    368                                                          end
    369                                                          seq_item_port.get_next_item(req);
    370                                                          //`uvm_info("DRV", req.convert2string(), UVM_LOW)
    371                                                          repeat(req.cycles) begin
    372                                                              @(posedge axiLiteVif.ACLK);
    373                                                          end
    374                                                          drive_transfer(req);
    375                                                          seq_item_port.item_done();
    376                                                      end
    377                                                  endtask: get_and_drive
    378                                                  virtual protected task reset_signals();
    379                                                      forever begin
    380                                                          @(negedge axiLiteVif.ARESETN);
    381                                                          axiLiteVif.AWADDR  <=  8'h0;
    382                                                          axiLiteVif.AWPROT  <=  3'h0;
    383                                                          axiLiteVif.AWVALID <=  1'b0;
    384                                                          axiLiteVif.WDATA   <= 32'h0;
    385                                                          axiLiteVif.WSTRB   <=  4'h0;
    386                                                          axiLiteVif.WVALID  <=  1'b0;
    387                                                          axiLiteVif.BREADY  <=  1'b1;
    388                                                          axiLiteVif.ARADDR  <=  8'h0;
    389                                                          axiLiteVif.ARPROT  <=  3'h0;
    390                                                          axiLiteVif.ARVALID <=  1'b0;
    391                                                          axiLiteVif.RREADY  <=  1'b1;
    392                                                      end
    393                                                  endtask: reset_signals
    394                                                  virtual protected task drive_transfer (axiLite_transaction aL_txn);
    395                                                      drive_address_phase(aL_txn);
    396                                                      drive_data_phase(aL_txn);
    397                                                  endtask: drive_transfer
    398                                                  virtual protected task drive_address_phase (axiLite_transaction aL_txn);
    399                                                      //`uvm_info("axiLite_master_driver", "drive_address_phase",UVM_HIGH)
    400                                                      case (aL_txn.reqWriteRead)
    401                                                          READ : drive_read_address_channel(aL_txn);
    402                                                          WRITE: drive_write_address_channel(aL_txn);
    403                                                      endcase
    404                                                  endtask: drive_address_phase
    405                                                  virtual protected task drive_data_phase (axiLite_transaction aL_txn);
    406                                                      bit[31:0] rw_data;
    407                                                      bit err;
    408                                                      rw_data = aL_txn.data;
    409                                                      case (aL_txn.reqWriteRead)
    410                                                      READ : drive_read_data_channel(rw_data, err);
    411                                                      WRITE: drive_write_data_channel(rw_data, err);
    412                                                      endcase    
    413                                                  endtask: drive_data_phase
    414                                                  virtual protected task drive_write_address_channel (axiLite_transaction aL_txn);
    415                                                      int axiLite_ctr;
    416                                                      axiLiteVif.AWADDR  <= {8'h0, aL_txn.addr};
    417                                                      axiLiteVif.AWPROT  <= 3'h0;
    418                                                      axiLiteVif.AWVALID <= 1'b1;
    419                                                      for(axiLite_ctr = 0; axiLite_ctr <= 31; axiLite_ctr ++) begin
    420                                                          @(posedge axiLiteVif.ACLK);
    421                                                          if (axiLiteVif.AWREADY) break;
    422                                                      end
    423                                                      if (axiLite_ctr == 31) begin
    424                                                          `uvm_error("axiLite_master_driver","AWVALID timeout");
    425                                                      end    
    426                                                      @(posedge axiLiteVif.ACLK);
    427                                                      // axiLiteVif.AWADDR  <= 8'h0;
    428                                                      // axiLiteVif.AWPROT  <= 3'h0;
    429                                                      // axiLiteVif.AWVALID <= 1'b0;    
    430                                                  endtask: drive_write_address_channel
    431                                                  virtual protected task drive_read_address_channel (axiLite_transaction aL_txn);
    432                                                      int axiLite_ctr;
    433                                                      axiLiteVif.ARADDR  <= {8'h0, aL_txn.addr};
    434                                                      axiLiteVif.ARPROT  <= 3'h0;
    435                                                      axiLiteVif.ARVALID <= 1'b1;
    436                                                      for(axiLite_ctr = 0; axiLite_ctr <= 31; axiLite_ctr ++) begin
    437                                                          @(posedge axiLiteVif.ACLK);
    438                                                          if (axiLiteVif.ARREADY) break;
    439                                                      end
    440                                                      if (axiLite_ctr == 31) begin
    441                                                          `uvm_error("axiLite_master_driver","ARVALID timeout");
    442                                                      end
    443                                                      @(posedge axiLiteVif.ACLK);
    444                                                      axiLiteVif.ARADDR  <= 8'h0;
    445                                                      axiLiteVif.ARPROT  <= 3'h0;
    446                                                      axiLiteVif.ARVALID <= 1'b0;    
    447                                                  endtask: drive_read_address_channel
    448                                                  virtual protected task drive_write_data_channel (bit[31:0] data, output bit error);
    449                                                      int axiLite_ctr;
    450                                                      axiLiteVif.WDATA  <= data;
    451                                                      axiLiteVif.WSTRB  <= 4'hf;
    452                                                      axiLiteVif.WVALID <= 1'b1;
    453                                                      @(posedge axiLiteVif.ACLK);
    454                                                          for(axiLite_ctr = 0; axiLite_ctr <= 31; axiLite_ctr ++) begin
    455                                                          @(posedge axiLiteVif.ACLK);
    456                                                          if (axiLiteVif.WREADY) 
    457                                                                  axiLiteVif.AWADDR  <= 8'h0;
    458                                                      axiLiteVif.AWPROT  <= 3'h0;
    459                                                      axiLiteVif.AWVALID <= 1'b0; 
    460                                                          break;
    461                                                      end
    462                                                      if (axiLite_ctr == 31) begin
    463                                                          `uvm_error("axiLite_master_driver","AWVALID timeout");
    464                                                      end
    465                                                      @(posedge axiLiteVif.ACLK);
    466                                                      axiLiteVif.WDATA  <= 32'h0;
    467                                                      axiLiteVif.WSTRB  <= 4'h0;
    468                                                      axiLiteVif.WVALID <= 1'b0;
    469                                                      //wait for write response
    470                                                      for(axiLite_ctr = 0; axiLite_ctr <= 31; axiLite_ctr ++) begin
    471                                                          @(posedge axiLiteVif.ACLK);
    472                                                          if (axiLiteVif.BVALID) break;
    473                                                      end
    474                                                      if (axiLite_ctr == 31) begin
    475                                                          `uvm_error("axiLite_master_driver","BVALID timeout");
    476                                                      end
    477                                                      else begin
    478                                                          if (axiLiteVif.BVALID == 1'b1 && axiLiteVif.BRESP != 2'h0)
    479                                                          `uvm_error("axiLite_master_driver","Received ERROR Write Response");
    480                                                          axiLiteVif.BREADY <= axiLiteVif.BVALID;
    481                                                       @(posedge axiLiteVif.ACLK);
    482                                                      end
    483                                                  endtask: drive_write_data_channel
    484                                                  // drive read data channel
    485                                                  virtual protected task drive_read_data_channel (output bit [31:0] data, output bit error);
    486                                                      int axiLite_ctr;
    487                                                      for(axiLite_ctr = 0; axiLite_ctr <= 31; axiLite_ctr ++) begin
    488                                                          @(posedge axiLiteVif.ACLK);
    489                                                          if (axiLiteVif.RVALID) break;
    490                                                      end
    491                                                      data = axiLiteVif.RDATA;
    492                                                      if (axiLite_ctr == 31) begin
    493                                                          `uvm_error("axiLite_master_driver","RVALID timeout");
    494                                                      end
    495                                                      else begin
    496                                                      if (axiLiteVif.RVALID == 1'b1 && axiLiteVif.RRESP != 2'h0)
    497                                                          `uvm_error("axiLite_master_driver","Received ERROR Read Response");
    498                                                          axiLiteVif.RREADY <= axiLiteVif.RVALID;
    499                                                          @(posedge axiLiteVif.ACLK);
    500                                                      end
    501                                                  endtask: drive_read_data_channel
    502                                              endclass: axiLite_driver
    503                                              // UVM_DRIVER : TEMPLATE_DRIVER [TEMPLATE]
    504                                              class template_driver extends uvm_driver#(template_transaction);
    505                                                  `uvm_component_utils(template_driver)
    506                                                  virtual template_if templateVif;
    507                                                  function new(string name, uvm_component parent);
    508                                                      super.new(name, parent);
    509                                                  endfunction: new
    510                                                  function void build_phase(uvm_phase phase);
    511                                                      super.build_phase(phase);
    512                                                      void'(uvm_resource_db#(virtual template_if)::read_by_name
    513                                                          (.scope("ifs"), .name("template_if"), .val(templateVif)));
    514                                                  endfunction: build_phase
    515                                                  task run_phase(uvm_phase phase);
    516                                                      drive();
    517                                                  endtask: run_phase
    518                                                  virtual task drive();
    519                                                      template_transaction tx;
    520                                                      integer counter = 0, state = 0;
    521                                                      templateVif.sig_ina = 0'b0;
    522                                                      templateVif.sig_inb = 0'b0;
    523                                                      templateVif.sig_en_i = 1'b0;
    524                                                      forever begin
    525                                                          if(counter==0)
    526                                                          begin
    527                                                              seq_item_port.get_next_item(tx);
    528                                                          end
    529                                                          @(posedge templateVif.sig_clock)
    530                                                          begin
    531                                                              if(counter==0)
    532                                                              begin
    533                                                                  templateVif.sig_en_i = 1'b1;
    534                                                                  state = 1;
    535                                                              end
    536                                                              if(counter==1)
    537                                                              begin
    538                                                                  templateVif.sig_en_i = 1'b0;
    539                                                              end
    540                                                              case(state)
    541                                                                  1: begin
    542                                                                      templateVif.sig_ina = tx.ina[1];
    543                                                                      templateVif.sig_inb = tx.inb[1];
    544                                                                      tx.ina = tx.ina << 1;
    545                                                                      tx.inb = tx.inb << 1;
    546                                                                      counter = counter + 1;
    547                                                                      if(counter==2) state = 2;
    548                                                                  end
    549                                                                  2: begin
    550                                                                      templateVif.sig_ina = 1'b0;
    551                                                                      templateVif.sig_inb = 1'b0;
    552                                                                      counter = counter + 1;
    553                                                                      if(counter==6)
    554                                                                      begin
    555                                                                          counter = 0;
    556                                                                          state = 0;
    557                                                                          seq_item_port.item_done();
    558                                                                      end
    559                                                                  end
    560                                                              endcase
    561                                                          end
    562                                                      end
    563                                                  endtask: drive
    564                                              endclass: template_driver
    565                                              // UVM_DRIVER : RGB_DRIVER [RGB]
    566                                              class rgb_driver extends uvm_driver#(rgb_transaction);
    567                                                  `uvm_component_utils(rgb_driver)
    568                                                  virtual rgb_if frame_vi;
    569                                                  function new(string name, uvm_component parent);
    570                                                      super.new(name, parent);
    571                                                  endfunction: new
    572                                                  function void build_phase(uvm_phase phase);
    573                                                      super.build_phase(phase);
    574                                                      void'(uvm_resource_db#(virtual rgb_if)::read_by_name(.scope("ifs"),.name("rgb_if"),.val(frame_vi)));
    575                                                  endfunction: build_phase
    576                                                  task run_phase(uvm_phase phase);
    577                                                      rgb_transaction frame_tx;
    578                                                      forever begin
    579                                                          @frame_vi.master_cb;
    580                                                          seq_item_port.get_next_item(frame_tx);
    581                                                          @frame_vi.master_cb;
    582                                                          frame_vi.master_cb.iRed        <= frame_tx.iRed;
    583                                                          frame_vi.master_cb.iGreen      <= frame_tx.iGreen;
    584                                                          frame_vi.master_cb.iBlue       <= frame_tx.iBlue;
    585                                                          frame_vi.master_cb.iX          <= frame_tx.iX;
    586                                                          frame_vi.master_cb.iY          <= frame_tx.iY;
    587                                                          frame_vi.master_cb.iPixelEn    <= frame_tx.iPixelEn;
    588                                                          frame_vi.master_cb.iValid      <= frame_tx.iValid;
    589                                                          frame_vi.master_cb.iEof        <= frame_tx.iEof;
    590                                                          seq_item_port.item_done();
    591                                                      end
    592                                                  endtask: run_phase
    593                                              endclass: rgb_driver
    594                                              
    595                                              
    596                                              
    597                                              //----------------------------------------------------------------------------------//
    598                                              // UVM_MONITOR
    599                                              //----------------------------------------------------------------------------------//
    600                                              // UVM_MONITOR : AXILITE_MON [AXILITE]
    601                                              class axiLite_monitor extends uvm_monitor;
    602                                                  protected virtual   axiLite_if axiLiteVif;
    603                                                  protected int       id;
    604                                                  uvm_analysis_port #(axiLite_transaction) item_collected_port;
    605                                                  uvm_analysis_port #(axiLite_transaction) dut_inputs_port; // analysis port for DUT inputs
    606                                                  uvm_analysis_port #(axiLite_transaction) dut_outputs_port; // analysis port for DUT outputs
    607                                                  protected axiLite_transaction aL_txn;
    608                                                  `uvm_component_utils_begin(axiLite_monitor)
    609                                                      `uvm_field_int(id, UVM_DEFAULT)
    610                                                  `uvm_component_utils_end
    611                                                  function new (string name, uvm_component parent);
    612                                                      super.new(name, parent);
    613                                                      aL_txn = new();
    614                                                      item_collected_port = new("item_collected_port", this);
    615                                                     // dut_inputs_port = new("dut_inputs_port", this); // construct the analysis port
    616                                                      //dut_outputs_port = new("dut_outputs_port", this); // construct the analysis port
    617                                                  endfunction
    618                                                  function void build_phase (uvm_phase phase);
    619                                                      super.build_phase(phase);
    620                                                      if(!uvm_config_db#(virtual axiLite_if)::get(this, "", "axiLiteVif", axiLiteVif))
    621                                                      `uvm_fatal("NOVIF",{"virtual interface must be set for: ",get_full_name(), ".axiLiteVif"});
    622                                                      dut_inputs_port = new(.name("dut_inputs_port"),.parent(this));
    623                                                      dut_outputs_port = new(.name("dut_outputs_port"),.parent(this));
    624                                                  endfunction // build_phase
    625                                                  virtual task run_phase (uvm_phase phase);
    626                                                      fork
    627                                                          collect_transactions();
    628                                                      join
    629                                                  endtask: run_phase
    630                                                  virtual protected task collect_transactions();
    631                                                      bit valid_txn = 0;
    632                                                      forever begin
    633                                                          axiLite_transaction tx_in,tx_out,tx_copy;
    634                                                          tx_in       = axiLite_transaction::type_id::create("tx_in"); 
    635                                                          tx_out      = axiLite_transaction::type_id::create("tx_out");
    636                                                          aL_txn      = new();
    637                                                          if (axiLiteVif.ARESETN == 'b0)
    638                                                          @(posedge axiLiteVif.ARESETN);
    639                                                              if (axiLiteVif.AWVALID == 'b1) begin
    640                                                                  tx_in.WDATA = axiLiteVif.WDATA; 
    641                                                                  aL_txn.reqWriteRead = WRITE;    
    642                                                                  aL_txn.addr  = axiLiteVif.AWADDR[7:0];
    643                                                                  @(posedge axiLiteVif.WVALID);
    644                                                                  aL_txn.data  = axiLiteVif.WDATA;
    645                                                                  @(negedge axiLiteVif.WVALID);
    646                                                                  valid_txn = 1;
    647                                                              end
    648                                                          else if (axiLiteVif.ARVALID == 'b1) begin
    649                                                              tx_out.RDATA = axiLiteVif.RDATA; 
    650                                                              aL_txn.reqWriteRead = READ;    
    651                                                              aL_txn.addr  = axiLiteVif.ARADDR[7:0];
    652                                                              @(posedge axiLiteVif.RVALID);
    653                                                              aL_txn.data  = axiLiteVif.RDATA;
    654                                                              @(negedge axiLiteVif.RVALID);
    655                                                              valid_txn = 1;
    656                                                          end
    657                                                          @(posedge axiLiteVif.ACLK);
    658                                                          //aL_txn.data = axiLiteVif.data;
    659                                                          //while (axiLiteVif.valid == 'b1) begin
    660                                                          //@(posedge axiLiteVif.ACLK);
    661                                                          //aL_txn.cycles++;
    662                                                          //end
    663                                                          //aL_txn.cycles--;
    664                                                           //`uvm_info("axiLiteVif data", aL_txn.sprint(), UVM_LOW);
    665                                                              if (valid_txn == 'b1 ) begin
    666                                                                  //`uvm_info("MON", aL_txn.convert2string(), UVM_LOW) 
    667                                                                  item_collected_port.write(aL_txn);
    668                                                                  //item_collected_port.write(aL_txn);
    669                                                              end
    670                                                          dut_inputs_port.write(tx_in);  
    671                                                          $cast(tx_copy, tx_out.clone());
    672                                                          dut_outputs_port.write(tx_copy);             
    673                                                          valid_txn = 0;
    674                                                      end
    675                                                  endtask: collect_transactions
    676                                              endclass: axiLite_monitor
    677                                              // UVM_MONITOR : TEMPLATE_MONITOR_AFTERTODUT [TEMPLATE]
    678                                              //The second monitor, monitor_afterToDut, will get both inputs 
    679                                              //and make a prediction of the expected result. 
    680                                              //The scoreboard will get this predicted result as well and make a comparison between the two values.
    681                                              class template_monitor_afterToDut extends uvm_monitor;
    682                                                  `uvm_component_utils(template_monitor_afterToDut)
    683                                                  uvm_analysis_port#(template_transaction) mon_ap_afterToDut;
    684                                                  virtual template_if templateVif;
    685                                                  template_transaction tx;
    686                                                  //For coverage
    687                                                  template_transaction sa_tx_cg;
    688                                                  //Define coverpoints
    689                                                  covergroup template_cg;
    690                                                            ina_cp:     coverpoint sa_tx_cg.ina;
    691                                                            inb_cp:     coverpoint sa_tx_cg.inb;
    692                                                      cross ina_cp, inb_cp;
    693                                                  endgroup: template_cg
    694                                                  function new(string name, uvm_component parent);
    695                                                      super.new(name, parent);
    696                                                      template_cg = new;
    697                                                  endfunction: new
    698                                                  function void build_phase(uvm_phase phase);
    699                                                      super.build_phase(phase);
    700                                                      void'(uvm_resource_db#(virtual template_if)::read_by_name(.scope("ifs"), .name("template_if"), .val(templateVif)));
    701                                                      mon_ap_afterToDut= new(.name("mon_ap_afterToDut"), .parent(this));
    702                                                  endfunction: build_phase
    703                                                  task run_phase(uvm_phase phase);
    704                                                      integer counter_mon = 0, state = 0;
    705                                                      tx = template_transaction::type_id::create
    706                                                          (.name("tx"), .contxt(get_full_name()));
    707                                                      forever begin
    708                                                          @(posedge templateVif.sig_clock)
    709                                                          begin
    710                                                              if(templateVif.sig_en_i==1'b1)
    711                                                              begin
    712                                                                  state = 1;
    713                                                                  tx.ina = 2'b00;
    714                                                                  tx.inb = 2'b00;
    715                                                                  tx.out = 3'b000;
    716                                                              end
    717                                                              if(state==1)
    718                                                              begin
    719                                                                  tx.ina    = tx.ina << 1;
    720                                                                  tx.inb    = tx.inb << 1;
    721                                                                  tx.ina[0] = templateVif.sig_ina;
    722                                                                  tx.inb[0] = templateVif.sig_inb;
    723                                                                  counter_mon = counter_mon + 1;
    724                                                                  if(counter_mon==2)
    725                                                                  begin
    726                                                                      state = 0;
    727                                                                      counter_mon = 0;
    728                                                                      //Predict the result
    729                                                                      predictor();
    730                                                                      sa_tx_cg = tx;
    731                                                                      //Coverage
    732                                                                      template_cg.sample();
    733                                                                      //Send the transaction to the analysis port
    734                                                                      mon_ap_afterToDut.write(tx);
    735                                                                  end
    736                                                              end
    737                                                          end
    738                                                      end
    739                                                  endtask: run_phase
    740                                                  virtual function void predictor();
    741                                                      tx.out = tx.ina + tx.inb;//Predict out value
    742                                                  endfunction: predictor
    743                                              endclass: template_monitor_afterToDut
    744                                              // UVM_MONITOR : TEMPLATE_MONITOR_BEFOREFROMDUT [TEMPLATE]
    745                                              //monitor_beforeFromDut, will look solely for the output of the device 
    746                                              //and it will pass the result to the scoreboard.
    747                                              class template_monitor_beforeFromDut extends uvm_monitor;
    748                                                  `uvm_component_utils(template_monitor_beforeFromDut)
    749                                                  uvm_analysis_port#(template_transaction) mon_ap_beforeFromDut;
    750                                                  virtual template_if templateVif;
    751                                                  function new(string name, uvm_component parent);
    752                                                      super.new(name, parent);
    753                                                  endfunction: new
    754                                                  function void build_phase(uvm_phase phase);
    755                                                      super.build_phase(phase);
    756                                                      void'(uvm_resource_db#(virtual template_if)::read_by_name
    757                                                          (.scope("ifs"), .name("template_if"), .val(templateVif)));
    758                                                      mon_ap_beforeFromDut = new(.name("mon_ap_beforeFromDut"), .parent(this));
    759                                                  endfunction: build_phase
    760                                                  task run_phase(uvm_phase phase);
    761                                                      integer counter_mon = 0, state = 0;
    762                                                      template_transaction tx;
    763                                                      tx = template_transaction::type_id::create
    764                                                          (.name("tx"), .contxt(get_full_name()));
    765                                                      forever begin
    766                                                          @(posedge templateVif.sig_clock)
    767                                                          begin
    768                                                              if(templateVif.sig_en_o==1'b1)begin
    769                                                                  state = 3;
    770                                                              end
    771                                                              if(state==3)begin
    772                                                                  tx.out = tx.out << 1;
    773                                                                  counter_mon = counter_mon + 1;
    774                                                                  if (counter_mon==3)begin
    775                                                                      tx.out[0]=templateVif.sig_out;
    776                                                                  end
    777                                                                  if(counter_mon==4)begin
    778                                                                      state       = 0;
    779                                                                      counter_mon = 0;
    780                                                                      //Send the transaction to the analysis port
    781                                                                      mon_ap_beforeFromDut.write(tx);
    782                                                                  end
    783                                                              end
    784                                                          end
    785                                                      end
    786                                                  endtask: run_phase
    787                                              endclass: template_monitor_beforeFromDut
    788                                              // UVM_MONITOR : RGB_MONITOR [RGB]
    789                                              class rgb_monitor extends uvm_monitor;
    790                                                  `uvm_component_utils(rgb_monitor)
    791                                                  uvm_analysis_port#(rgb_transaction) frame_ap;
    792                                                  virtual rgb_if frame_vi;
    793                                                  function new(string name, uvm_component parent);
    794                                                      super.new(name, parent);
    795                                                  endfunction: new
    796                                                  function void build_phase(uvm_phase phase);
    797                                                      super.build_phase(phase);
    798                                                      void'(uvm_resource_db#(virtual rgb_if)::read_by_name
    799                                                      (.scope("ifs"),.name("rgb_if"),.val(frame_vi)));
    800                                                      frame_ap = new(.name("frame_ap"),.parent(this));
    801                                                  endfunction: build_phase
    802                                                  task run_phase(uvm_phase phase);
    803                                                      forever begin
    804                                                          rgb_transaction frame_tx;
    805                                                          @frame_vi.slave_cb;
    806                                                          frame_tx               = rgb_transaction::type_id::create(.name("frame_tx"));
    807                                                          frame_tx.iRed          = frame_vi.slave_cb.iRed;
    808                                                          frame_tx.iGreen        = frame_vi.slave_cb.iGreen;
    809                                                          frame_tx.iBlue         = frame_vi.slave_cb.iBlue;
    810                                                          frame_tx.iPixelEn      = frame_vi.slave_cb.iPixelEn;
    811                                                          frame_tx.iValid        = frame_vi.slave_cb.iValid;
    812                                                          frame_tx.iEof          = frame_vi.slave_cb.iEof;
    813                                                          frame_tx.iX            = frame_vi.slave_cb.iX;
    814                                                          frame_tx.iY            = frame_vi.slave_cb.iY;
    815                                                          frame_ap.write(frame_tx);
    816                                                      end
    817                                                  endtask: run_phase
    818                                              endclass: rgb_monitor
    819                                              
    820                                              
    821                                              
    822                                              //----------------------------------------------------------------------------------//
    823                                              // UVM_AGENT
    824                                              //----------------------------------------------------------------------------------//
    825                                              // UVM_AGENT : AXILITE_AGT [AXILITE]
    826                                              class axiLite_agent extends uvm_agent;
    827                                                  `uvm_component_utils(axiLite_agent)
    828                                                  uvm_analysis_port#(axiLite_transaction) item_collected_port;
    829                                                  axiLite_sequencer       aL_sqr;
    830                                                  axiLite_driver          aL_drv;
    831                                                  axiLite_monitor         aL_mon;
    832                                                  function new (string name, uvm_component parent);
    833                                                      super.new(name, parent);
    834                                                  endfunction
    835                                                  function void build_phase(uvm_phase phase);
    836                                                      super.build_phase(phase);
    837                                                      item_collected_port    = new(.name("item_collected_port"),.parent(this));
    838                                                      aL_mon                 = axiLite_monitor::type_id::create("aL_mon", this);
    839                                                      if (get_is_active() == UVM_ACTIVE) begin
    840                                                          aL_sqr = axiLite_sequencer::type_id::create("aL_sqr", this);
    841                                                          aL_drv = axiLite_driver::type_id::create("aL_drv", this);
    842                                                      end
    843                                                  endfunction
    844                                                  function void connect_phase(uvm_phase phase);
    845                                                      if (get_is_active() == UVM_ACTIVE) begin
    846                                                          aL_drv.seq_item_port.connect(aL_sqr.seq_item_export);
    847                                                          aL_mon.item_collected_port.connect(item_collected_port);
    848                                                      end
    849                                                  endfunction
    850                                              endclass: axiLite_agent
    851                                              // UVM_AGENT : RGB_AGENT [RGB]
    852                                              class rgb_agent extends uvm_agent;
    853                                                  `uvm_component_utils(rgb_agent)
    854                                                  uvm_analysis_port#(rgb_transaction)  frame_ap;
    855                                                  rgb_sequencer                        frame_seqr;
    856                                                  rgb_driver                           frame_drvr;
    857                                                  rgb_monitor                          frame_mon;
    858                                                  function new(string name, uvm_component parent);
    859                                                      super.new(name, parent);
    860                                                  endfunction: new
    861                                                  function void build_phase(uvm_phase phase);
    862                                                      super.build_phase(phase);
    863                                                      frame_ap    = new(.name("frame_ap"),.parent(this));
    864                                                      frame_seqr = rgb_sequencer  ::type_id::create(.name("frame_seqr"),.parent(this));
    865                                                      frame_drvr = rgb_driver     ::type_id::create(.name("frame_drvr"),.parent(this));
    866                                                      frame_mon  = rgb_monitor    ::type_id::create(.name("frame_mon"),.parent(this));
    867                                                  endfunction: build_phase
    868                                                  function void connect_phase(uvm_phase phase);
    869                                                      super.connect_phase(phase);
    870                                                      frame_drvr.seq_item_port.connect(frame_seqr.seq_item_export);
    871                                                      frame_mon.frame_ap.connect(frame_ap);
    872                                                  endfunction: connect_phase
    873                                              endclass: rgb_agent
    874                                              // UVM_AGENT : TEMPLATE_AGENT [TEMPLATE]
    875                                              class template_agent extends uvm_agent;
    876                                                  `uvm_component_utils(template_agent)
    877                                                  uvm_analysis_port#(template_transaction) agent_ap_beforeFromDut;
    878                                                  uvm_analysis_port#(template_transaction) agent_ap_afterToDut;
    879                                                  template_sequencer                       sa_seqr;
    880                                                  template_driver                          sa_drvr;
    881                                                  template_monitor_beforeFromDut           sa_mon_beforeFromDut;
    882                                                  template_monitor_afterToDut              sa_mon_afterToDut;
    883                                                  function new(string name, uvm_component parent);
    884                                                      super.new(name, parent);
    885                                                  endfunction: new
    886                                                  function void build_phase(uvm_phase phase);
    887                                                      super.build_phase(phase);
    888                                                      agent_ap_beforeFromDut      = new(.name("agent_ap_beforeFromDut"), .parent(this));
    889                                                      agent_ap_afterToDut         = new(.name("agent_ap_afterToDut"), .parent(this));
    890                                                      sa_seqr                     = template_sequencer::type_id::create(.name("sa_seqr"), .parent(this));
    891                                                      sa_drvr                     = template_driver::type_id::create(.name("sa_drvr"), .parent(this));
    892                                                      sa_mon_beforeFromDut        = template_monitor_beforeFromDut::type_id::create(.name("sa_mon_beforeFromDut"), .parent(this));
    893                                                      sa_mon_afterToDut           = template_monitor_afterToDut::type_id::create(.name("sa_mon_afterToDut"), .parent(this));
    894                                                  endfunction: build_phase
    895                                                  function void connect_phase(uvm_phase phase);
    896                                                      super.connect_phase(phase);
    897                                                      sa_drvr.seq_item_port.connect(sa_seqr.seq_item_export);
    898                                                      sa_mon_beforeFromDut.mon_ap_beforeFromDut.connect(agent_ap_beforeFromDut);
    899                                                      sa_mon_afterToDut.mon_ap_afterToDut.connect(agent_ap_afterToDut);
    900                                                  endfunction: connect_phase
    901                                              endclass: template_agent
    902                                              
    903                                              
    904                                              
    905                                              
    906                                              //----------------------------------------------------------------------------------//
    907                                              // UVM_SUBSCRIBER
    908                                              //----------------------------------------------------------------------------------//
    909                                              // UVM_SUBSCRIBER : AXILITE_FC_SUBSCRIBER [AXILITE]
    910                                              class axiLite_fc_subscriber extends uvm_subscriber#(axiLite_transaction);
    911                                                  `uvm_component_utils(axiLite_fc_subscriber)
    912                                                  axiLite_transaction aL_txn;
    913                                                  covergroup aL_cg;
    914                                                      WDATA_cp:            coverpoint aL_txn.WDATA;
    915                                                      AWADDR_cp:           coverpoint aL_txn.RDATA;
    916                                                      // cross WDATA_cp, AWADDR_cp;
    917                                                  endgroup: aL_cg
    918                                                  function new(string name, uvm_component parent);
    919                                                      super.new(name, parent);
    920                                                      aL_cg = new;
    921                                                  endfunction: new
    922                                                  function void write(axiLite_transaction t);
    923                                                      aL_txn = t;
    924                                                      aL_cg.sample();
    925                                                  endfunction: write
    926                                              endclass: axiLite_fc_subscriber
    927                                              // UVM_SUBSCRIBER : RGB_FC_SUBSCRIBER [RGB]
    928                                              //The functional coverage subscriber (fc_sucbscriber) identifies 
    929                                              //the generated frame_tx. 
    930                                              //The rgb_transaction sent from the monitor is sampled by the write function.
    931                                              class rgb_fc_subscriber extends uvm_subscriber#(rgb_transaction);
    932                                                  `uvm_component_utils(rgb_fc_subscriber)
    933                                                  rgb_transaction frame_tx;
    934                                                  covergroup rgb_cg;
    935                                                      iRed_cp:            coverpoint frame_tx.iRed;
    936                                                      iGreen_cp:          coverpoint frame_tx.iGreen;
    937                                                      iBlue_cp:           coverpoint frame_tx.iBlue;
    938                                                      iPixelEn_cp:        coverpoint frame_tx.iPixelEn;
    939                                                      iValid_cp:          coverpoint frame_tx.iValid;
    940                                                      iEof_cp:            coverpoint frame_tx.iEof;
    941                                                      iX_cp:              coverpoint frame_tx.iX;
    942                                                      iY_cp:              coverpoint frame_tx.iY;
    943                                                      cross iRed_cp, iEof_cp;
    944                                                  endgroup: rgb_cg
    945                                                  function new(string name, uvm_component parent);
    946                                                      super.new(name, parent);
    947                                                      rgb_cg = new;
    948                                                  endfunction: new
    949                                                  function void write(rgb_transaction t);
    950                                                      frame_tx = t;
    951                                                      rgb_cg.sample();
    952                                                  endfunction: write
    953                                              endclass: rgb_fc_subscriber
    954                                              typedef class rgb_scoreboard;
    955                                              // UVM_SUBSCRIBER : RGB_SB_SUBSCRIBER [RGB]
    956                                              class rgb_sb_subscriber extends uvm_subscriber#(rgb_transaction);
    957                                                  `uvm_component_utils(rgb_sb_subscriber)
    958                                                  function new(string name, uvm_component parent);
    959                                                      super.new(name, parent);
    960                                                  endfunction: new
    961                                                  function void write(rgb_transaction t);
    962                                                      rgb_scoreboard frame_sb;
    963                                                      $cast(frame_sb, m_parent);
    964                                                      frame_sb.check_rgb_taste(t);
    965                                                  endfunction: write
    966                                              endclass: rgb_sb_subscriber
    967                                              
    968                                              
    969                                              
    970                                              
    971                                              //----------------------------------------------------------------------------------//
    972                                              // UVM_SCORECARD
    973                                              //----------------------------------------------------------------------------------//
    974                                              // UVM_SCORECARD : RGB_SCOREBOARD [RGB]
    975                                              class rgb_scoreboard extends uvm_scoreboard;
    976                                                  `uvm_component_utils(rgb_scoreboard)
    977                                                  uvm_analysis_export#(rgb_transaction)    frame_analysis_export;
    978                                                  local rgb_sb_subscriber                  frame_sb_sub;
    979                                                  function new(string name, uvm_component parent);
    980                                                      super.new(name, parent);
    981                                                  endfunction: new
    982                                                  function void build_phase(uvm_phase phase);
    983                                                      super.build_phase(phase);
    984                                                      frame_analysis_export = new(.name("frame_analysis_export"),.parent(this));
    985                                                      frame_sb_sub = rgb_sb_subscriber::type_id::create(.name("frame_sb_sub"),.parent(this));
    986                                                  endfunction: build_phase
    987                                                  function void connect_phase(uvm_phase phase);
    988                                                      super.connect_phase(phase);
    989                                                      frame_analysis_export.connect(frame_sb_sub.analysis_export);
    990                                                  endfunction: connect_phase
    991                                                  virtual function void check_rgb_taste(rgb_transaction frame_tx);
    992                                                      uvm_table_printer p = new;
    993                                                  endfunction: check_rgb_taste
    994                                              endclass: rgb_scoreboard
    995                                              // UVM_SCORECARD : TEMPLATE_SCOREBOARD [TEMPLATE]
    996                                              class template_scoreboard extends uvm_scoreboard;
    997                                                  `uvm_component_utils(template_scoreboard)
    998                                                  uvm_analysis_export #(template_transaction)     sb_export_beforeFromDut;
    999                                                  uvm_analysis_export #(template_transaction)     sb_export_afterToDut;
    1000                                                 uvm_tlm_analysis_fifo #(template_transaction)   before_fifo;
    1001                                                 uvm_tlm_analysis_fifo #(template_transaction)   after_fifo;
    1002                                                 template_transaction transaction_beforeFromDut;
    1003                                                 template_transaction transaction_afterToDut;
    1004                                                 function new(string name, uvm_component parent);
    1005                                                     super.new(name, parent);
    1006                                                     transaction_beforeFromDut       = new("transaction_beforeFromDut");
    1007                                                     transaction_afterToDut          = new("transaction_afterToDut");
    1008                                                 endfunction: new
    1009                                                 function void build_phase(uvm_phase phase);
    1010                                                     super.build_phase(phase);
    1011                                                     sb_export_beforeFromDut         = new("sb_export_beforeFromDut", this);
    1012                                                     sb_export_afterToDut            = new("sb_export_afterToDut", this);
    1013                                                        before_fifo                  = new("before_fifo", this);
    1014                                                     after_fifo                      = new("after_fifo", this);
    1015                                                 endfunction: build_phase
    1016                                                 function void connect_phase(uvm_phase phase);
    1017                                                     sb_export_beforeFromDut.connect(before_fifo.analysis_export);
    1018                                                     sb_export_afterToDut.connect(after_fifo.analysis_export);
    1019                                                 endfunction: connect_phase
    1020                                                 task run();
    1021                                                     forever begin
    1022                                                         before_fifo.get(transaction_beforeFromDut);
    1023                                                         after_fifo.get(transaction_afterToDut);
    1024                                                         compare();
    1025                                                     end
    1026                                                 endtask: run
    1027                                                 // function string convert2string();
    1028                                                     // return $sformatf("addr");
    1029                                                 // endfunction
    1030                                                 virtual function void compare();
    1031                                                 //`uvm_info("FROMDUT", transaction_beforeFromDut.sprint(), UVM_LOW);
    1032                                                 //`uvm_info("TODUT", transaction_afterToDut.sprint(), UVM_LOW);
    1033                                                     if(transaction_beforeFromDut.out == transaction_afterToDut.out) begin
    1034                                                         `uvm_info("compare", {"Test: OK!"}, UVM_LOW);
    1035                                                     end else begin
    1036                                                         `uvm_info("compare", {"Test: Fail!"}, UVM_LOW);
    1037                                                     end
    1038                                                 endfunction: compare
    1039                                             endclass: template_scoreboard
    1040                                             
    1041                                             `uvm_analysis_imp_decl(_beforeFromDut)
    1042                                             `uvm_analysis_imp_decl(_afterToDut)
    1043                                             
    1044                                             
    1045                                             //----------------------------------------------------------------------------------//
    1046                                             // UVM_ENV
    1047                                             //----------------------------------------------------------------------------------//
    1048                                             // UVM_ENV : TEMPLATE_ENV
    1049                                             class template_env extends uvm_env;
    1050                                                 `uvm_component_utils(template_env)
    1051                                                 protected virtual interface axiLite_if axiLiteVif;
    1052                                                 template_agent              sa_agent;       //[TEMPLATE]
    1053                                                 template_scoreboard         sa_sb;          //[TEMPLATE]
    1054                                                 axiLite_agent               aL_agt;         //[AXILITE]
    1055                                                 axiLite_fc_subscriber       aL_fc_sub;      //[AXILITE]
    1056                                                 rgb_agent                   frame_agent;    //[RGB]
    1057                                                 rgb_fc_subscriber           frame_fc_sub;   //[RGB]
    1058                                                 rgb_scoreboard              frame_sb;       //[RGB]
    1059                                                 function new(string name, uvm_component parent);
    1060                                                     super.new(name, parent);
    1061                                                 endfunction: new
    1062                                                 function void build_phase(uvm_phase phase);
    1063                                                     super.build_phase(phase);
    1064                                                     sa_agent        = template_agent     ::type_id::create(.name("sa_agent"), .parent(this));
    1065                                                     sa_sb           = template_scoreboard::type_id::create(.name("sa_sb"), .parent(this));
    1066                                                     frame_agent     = rgb_agent          ::type_id::create(.name("frame_agent"),.parent(this));
    1067                                                     frame_fc_sub    = rgb_fc_subscriber  ::type_id::create(.name("frame_fc_sub"),.parent(this));
    1068                                                     frame_sb        = rgb_scoreboard     ::type_id::create(.name("frame_sb"),.parent(this));
    1069                                                     if (!uvm_config_db#(virtual axiLite_if)::get(this, "", "axiLiteVif", axiLiteVif))
    1070                                                     `uvm_fatal("NOVIF",{"virtual interface must be set for: ",get_full_name(),".axiLiteVif"});
    1071                                                     aL_agt          = axiLite_agent::type_id::create("aL_agt", this);
    1072                                                     if (!uvm_config_db#(virtual axiLite_if)::get(this, "", "axiLiteVif", axiLiteVif))
    1073                                                     `uvm_fatal("NOVIF",{"virtual interface must be set for: ",get_full_name(),".axiLiteVif"});
    1074                                                     aL_fc_sub       = axiLite_fc_subscriber::type_id::create("aL_fc_sub", this);
    1075                                                 endfunction: build_phase
    1076                                                 function void connect_phase(uvm_phase phase);
    1077                                                     super.connect_phase(phase);
    1078                                                     sa_agent.agent_ap_beforeFromDut.connect(sa_sb.sb_export_beforeFromDut);
    1079                                                     sa_agent.agent_ap_afterToDut.connect(sa_sb.sb_export_afterToDut);
    1080                                                     aL_agt.item_collected_port.connect(aL_fc_sub.analysis_export);
    1081                                                     frame_agent.frame_ap.connect(frame_fc_sub.analysis_export);
    1082                                                     frame_agent.frame_ap.connect(frame_sb.frame_analysis_export);
    1083                                                 endfunction: connect_phase
    1084                                             endclass: template_env
    1085                                             
    1086                                             
    1087                                             
    1088                                             //----------------------------------------------------------------------------------//
    1089                                             // UVM_TEST
    1090                                             //----------------------------------------------------------------------------------//
    1091                                             // UVM_TEST : TEMPLATE_TEST [TEMPLATE]
    1092                                             class template_test extends uvm_test;
    1093                                                 `uvm_component_utils(template_test)
    1094                                                 template_env sa_env;
    1095                                                 function new(string name, uvm_component parent);
    1096                                                     super.new(name, parent);
    1097                                                 endfunction: new
    1098                                                 function void build_phase(uvm_phase phase);
    1099                                                     super.build_phase(phase);
    1100                                                     sa_env = template_env::type_id::create(.name("sa_env"), .parent(this));
    1101                                                 endfunction: build_phase
    1102                                                 function void end_of_elaboration_phase(uvm_phase phase);
    1103                                                     super.end_of_elaboration_phase(phase);
    1104                                                     this.print();
    1105                                                     factory.print();
    1106                                                 endfunction
    1107                                                 task run_phase(uvm_phase phase);
    1108                                                     template_sequence sa_seq;
    1109                                                     phase.raise_objection(.obj(this));
    1110                                                         sa_seq = template_sequence::type_id::create(.name("sa_seq"), .contxt(get_full_name()));
    1111                                                         assert(sa_seq.randomize());
    1112                                                     sa_seq.start(sa_env.sa_agent.sa_seqr);
    1113                                                     phase.drop_objection(.obj(this));
    1114                                                 endtask: run_phase
    1115                                             endclass: template_test
    1116                                             // UVM_TEST : AXILITE_TEST [AXILITE]
    1117                                             class axiLite_test extends uvm_test;
    1118                                                 `uvm_component_utils(axiLite_test)
    1119                                                 template_env aL_env;
    1120                                                 function new(string name, uvm_component parent);
    1121                                                     super.new(name, parent);
    1122                                                 endfunction: new
    1123                                                 function void build_phase(uvm_phase phase);
    1124                                                     super.build_phase(phase);
    1125                                                     begin
    1126                                                         axiLite_configuration axiLite_cfg;
    1127                                                         axiLite_cfg = new;
    1128                                                         assert(axiLite_cfg.randomize());
    1129                                                         uvm_config_db#(axiLite_configuration)::set(.cntxt(this),.inst_name("*"),.field_name("config"),.value(axiLite_cfg));
    1130                                                         aL_env = template_env::type_id::create(.name("aL_env"),.parent(this));
    1131                                                     end
    1132                                                 endfunction: build_phase
    1133                                                 function void end_of_elaboration_phase(uvm_phase phase);
    1134                                                     super.end_of_elaboration_phase(phase);
    1135                                                     this.print();
    1136                                                     factory.print();
    1137                                                 endfunction
    1138                                                 task run_phase(uvm_phase phase);
    1139                                                     axiLite_directed_sequence    axiLite_seq;
    1140                                                     phase.raise_objection(.obj(this));
    1141                                                     axiLite_seq = axiLite_directed_sequence::type_id::create(.name("axiLite_seq"));
    1142                                                     assert(axiLite_seq.randomize());
    1143                                                     `uvm_info("aL_env", { "\n", axiLite_seq.sprint() }, UVM_LOW)
    1144                                                     axiLite_seq.start(aL_env.aL_agt.aL_sqr);
    1145                                                     phase.drop_objection(.obj(this));
    1146                                                 endtask: run_phase
    1147                                             endclass: axiLite_test
    1148                                             // UVM_TEST : RGB_TEST [RGB]
    1149                                             class rgb_test extends uvm_test;
    1150                                                 `uvm_component_utils(rgb_test)
    1151                                                 template_env frame_env;
    1152                                                 function new(string name, uvm_component parent);
    1153                                                     super.new(name, parent);
    1154                                                 endfunction
    1155                                                 function void build_phase(uvm_phase phase);
    1156                                                     super.build_phase(phase);
    1157                                                     begin
    1158                                                     rgb_configuration frame_cfg;
    1159                                                     frame_cfg = new;
    1160                                                     assert(frame_cfg.randomize());
    1161                                                     uvm_config_db#(rgb_configuration)::set(.cntxt(this),.inst_name("*"),.field_name("config"),.value(frame_cfg));
    1162                                                     frame_env = template_env::type_id::create(.name("frame_env"),.parent(this));
    1163                                                     end
    1164                                                 endfunction: build_phase
    1165                                                 task run_phase(uvm_phase phase);
    1166                                                     top_sequence        random_sqr;
    1167                                                     uvm_component       component;
    1168                                                     rgb_sequencer       sequencer;
    1169                                                     random_sqr = top_sequence::type_id::create("random_sqr");
    1170                                                     if( !random_sqr.randomize() ) 
    1171                                                     `uvm_error("", "Randomize failed")
    1172                                                     random_sqr.starting_phase = phase;
    1173                                                     component = uvm_top.find("*.frame_seqr");
    1174                                                     if ($cast(sequencer, component))
    1175                                                     random_sqr.start(sequencer);
    1176                                                 endtask: run_phase
    1177                                             endclass: rgb_test
    1178                                             class rgb_test2 extends rgb_test;
    1179                                                 `uvm_component_utils(rgb_test2)
    1180                                                 function new (string name, uvm_component parent);
    1181                                                     super.new(name, parent);
    1182                                                 endfunction : new
    1183                                                 function void start_of_simulation_phase(uvm_phase phase);
    1184                                                     super.start_of_simulation_phase(phase);
    1185                                                     random_sequence_r1::type_id::set_type_override(random_sequence_r2::get_type());
    1186                                                 endfunction : start_of_simulation_phase
    1187                                             endclass: rgb_test2
    1188                                             
    1189                                             endpackage: socTest_pkg
    1190                                             
    1191                                             //----------------------------------------------------------------------------------//
    1192                                             // INTERFACE
    1193                                             //----------------------------------------------------------------------------------//
    1194                                             // INTERFACE : TEMPLATE_IF [TEMPLATE]
    1195                                             interface template_if;
    1196                                                 logic        sig_clock;
    1197                                                 logic        sig_ina;
    1198                                                 logic        sig_inb;
    1199                                                 logic        sig_en_i;
    1200                                                 logic        sig_en_o;
    1201                                                 logic        sig_out;
    1202                                                 modport      templateSlave (input sig_clock,sig_ina,sig_inb,sig_en_i,output sig_en_o,sig_out);
    1203                                             endinterface: template_if
    1204                                             // INTERFACE : AXILITE_IF [AXILITE]
    1205                                             interface axiLite_if(input bit ACLK,ARESETN);
    1206                                                 logic [7:0]     AWADDR;
    1207                                                 logic [ 2:0]    AWPROT;
    1208                                                 logic           AWVALID;
    1209                                                 logic           AWREADY;
    1210                                                 logic [31:0]    WDATA;
    1211                                                 logic [ 3:0]    WSTRB;
    1212                                                 logic           WVALID;
    1213                                                 logic           WREADY;
    1214                                                 logic [1:0]     BRESP;
    1215                                                 logic           BVALID;
    1216                                                 logic           BREADY;
    1217                                                 logic [7:0]     ARADDR;
    1218                                                 logic [ 2:0]    ARPROT;
    1219                                                 logic           ARVALID;
    1220                                                 logic           ARREADY;
    1221                                                 logic [31:0]    RDATA;
    1222                                                 logic [ 1:0]    RRESP;
    1223                                                 logic           RVALID;
    1224                                                 logic           RREADY;
    1225                                                 modport         ConfigMaster(input ACLK,ARESETN,AWADDR,AWPROT,AWVALID,WDATA,WSTRB,WVALID,BREADY,ARADDR,ARPROT,ARVALID,RREADY, output  AWREADY,ARREADY,RDATA,RRESP,RVALID,WREADY,BRESP,BVALID);
    1226                                             endinterface: axiLite_if
    1227                                             // INTERFACE : RGB_IF [RGB]
    1228                                             interface rgb_if(input bit clk);
    1229                                                 logic [7:0]  iRed;
    1230                                                 logic [7:0]  iGreen;
    1231                                                 logic [7:0]  iBlue;
    1232                                                 logic        iValid;
    1233                                                 logic        iPixelEn;
    1234                                                 logic        iEof;
    1235                                                 int unsigned iX;
    1236                                                 int unsigned iY;
    1237                                                 logic [7:0]  oRed;
    1238                                                 logic [7:0]  oGreen;
    1239                                                 logic [7:0]  oBlue;
    1240                                                 logic        oValid;
    1241            1                          1         clocking master_cb @ (posedge clk);
    1242                                                     default input #1step output #1ns;
    1243                                                     output iPixelEn,iX,iY,iRed,iGreen,iBlue,iValid,iEof;
    1244            1                          1             input  oRed;
    1245                                                 endclocking: master_cb
    1246            1                          1         clocking slave_cb @ (posedge clk);
    1247                                                     default input #1step output #1ns;
    1248            1                          1             input  iX,iY,iRed,iGreen,iBlue,iPixelEn,iValid,iEof;
    1249                                                     output oRed;
    1250                                                 endclocking: slave_cb
    1251                                                 modport master_mp(input clk, output  oRed,oGreen,oBlue,oValid);
    1252                                                 modport slave_mp (input clk,iRed,iGreen,iBlue,iValid,iPixelEn,iEof,iX,iY,output oRed,oGreen,oBlue,oValid);
    1253                                                 modport master_sync_mp(clocking master_cb);
    1254                                                 modport slave_sync_mp (clocking slave_cb);
    1255                                             endinterface: rgb_if
    1256                                             
    1257                                             
    1258                                             
    1259                                             //----------------------------------------------------------------------------------//
    1260                                             // MODULE
    1261                                             //----------------------------------------------------------------------------------//
    1262                                             // MODULE : ADDER [TEMPLATE]
    1263                                             module adder(template_if.templateSlave templateVif);
    1264                                                 import socTest_pkg::*;
    1265                                                 template dut (
    1266                                                .clk         (templateVif.sig_clock),
    1267                                                .en_i        (templateVif.sig_en_i),
    1268                                                .ina         (templateVif.sig_ina),
    1269                                                .inb         (templateVif.sig_inb),
    1270                                                .en_o        (templateVif.sig_en_o),
    1271                                                .out         (templateVif.sig_out));
    1272                                             endmodule: adder
    1273                                             // MODULE : VFPCONFIGDUT [AXILITE]
    1274                                             module vfpConfigDut(axiLite_if.ConfigMaster axiLiteVif);
    1275                                                 import socTest_pkg::*;
    1276                                                 vfpConfig dutModuleInst (
    1277                                                 .ACLK       (axiLiteVif.ACLK   ),
    1278                                                 .ARESETN    (axiLiteVif.ARESETN),
    1279                                                 .AWADDR     (axiLiteVif.AWADDR ),
    1280                                                 .AWPROT     (axiLiteVif.AWPROT ),
    1281                                                 .AWVALID    (axiLiteVif.AWVALID),
    1282                                                 .AWREADY    (axiLiteVif.AWREADY),
    1283                                                 .WDATA      (axiLiteVif.WDATA  ),
    1284                                                 .WSTRB      (axiLiteVif.WSTRB  ),
    1285                                                 .WVALID     (axiLiteVif.WVALID ),
    1286                                                 .WREADY     (axiLiteVif.WREADY ),
    1287                                                 .BRESP      (axiLiteVif.BRESP  ),
    1288                                                 .BVALID     (axiLiteVif.BVALID ),
    1289                                                 .BREADY     (axiLiteVif.BREADY ),
    1290                                                 .ARADDR     (axiLiteVif.ARADDR ),
    1291                                                 .ARPROT     (axiLiteVif.ARPROT ),
    1292                                                 .ARVALID    (axiLiteVif.ARVALID),
    1293                                                 .ARREADY    (axiLiteVif.ARREADY),
    1294                                                 .RDATA      (axiLiteVif.RDATA  ),
    1295                                                 .RRESP      (axiLiteVif.RRESP  ),
    1296                                                 .RVALID     (axiLiteVif.RVALID ),
    1297                                                 .RREADY     (axiLiteVif.RREADY ));
    1298                                             endmodule: vfpConfigDut
    1299                                             // MODULE : RGB_COLOR [RGB]
    1300                                             module rgb_color(rgb_if.slave_mp frame_slave_if);
    1301                                                 import socTest_pkg::*;
    1302                                                 pixelCord dutModule2Inst (
    1303                                                .clk         (frame_slave_if.clk),
    1304                                                .iRed        (frame_slave_if.iRed),
    1305                                                .iGreen      (frame_slave_if.iGreen),
    1306                                                .iBlue       (frame_slave_if.iBlue),
    1307                                                .iValid      (frame_slave_if.iValid),
    1308                                                .iPixelEn    (frame_slave_if.iPixelEn),
    1309                                                .iEof        (frame_slave_if.iEof),
    1310                                                .iX          (frame_slave_if.iX),
    1311                                                .iY          (frame_slave_if.iY),
    1312                                                .oRed        (frame_slave_if.oRed),
    1313                                                .oGreen      (frame_slave_if.oGreen),
    1314                                                .oBlue       (frame_slave_if.oBlue),
    1315                                                .oValid      (frame_slave_if.oValid));
    1316                                             endmodule: rgb_color
    1317                                             
    1318                                             
    1319                                             //----------------------------------------------------------------------------------//
    1320                                             // MODULE TOP
    1321                                             //----------------------------------------------------------------------------------//
    1322                                             module top;
    1323                                                 import uvm_pkg::*;
    1324                                                 import socTest_pkg::*;
    1325                                                 reg ACLK;
    1326                                                 reg ARESETN;
    1327                                                 reg clk;
    1328                                                 axiLite_if          axiLiteVif(ACLK,ARESETN);
    1329                                                 vfpConfigDut        vfpConfig_test(axiLiteVif); // [AXILITE]
    1330                                                 template_if         templateVif();
    1331                                                 adder               templateDut(templateVif);   // [TEMPLATE]
    1332                                                 rgb_if              frame_slave_if(clk);
    1333                                                 rgb_color           frame_color(frame_slave_if);// [RGB]
    1334                                                 initial begin
    1335            1                          1             ARESETN = 1'b0;
    1336            1                          1         #1000;
    1337            1                          1             ARESETN = 1'b1;
    1338                                                 end
    1339                                                 initial begin
    1340            1                          1             ACLK = 0;
    1341            1                          1         #5ns ;
    1342            1                          1         forever #5ns ACLK = ! ACLK;
    1342            2                        440     
    1342            3                        439     
    1343                                                 end
    1344                                                 initial begin
    1345            1                          1             templateVif.sig_clock = 0;
    1346            1                          1         #5ns ;
    1347            1                          1         forever #5ns templateVif.sig_clock = ! templateVif.sig_clock;
    1347            2                        440     
    1347            3                        439     
    1348                                                 end
    1349                                                 initial begin
    1350            1                          1             clk = 0;
    1351            1                          1             #5ns ;
    1352            1                          1             forever #5ns clk = ! clk;
    1352            2                        440     
    1352            3                        439     
    1353                                                 end
    1354                                                 initial begin
    1355            1                          1         uvm_config_db #(virtual axiLite_if)::set(null, "*", "axiLiteVif", axiLiteVif);
    1356            1                          1         uvm_resource_db#(virtual template_if)::set(.scope("ifs"), .name("template_if"), .val(templateVif));
    1357            1                          1         uvm_resource_db#(virtual rgb_if)::set(.scope("ifs"),.name("rgb_if"),.val(frame_slave_if));
    1358            1                          1         run_test();
    1359                                                 end
    1360                                             endmodule: top
    1361                                             //----------------------------------------------------------------------------------//

Branch Coverage:
    Enabled Coverage            Active      Hits    Misses % Covered
    ----------------            ------      ----    ------ ---------
    Branches                         0         0         0     100.0
Condition Coverage:
    Enabled Coverage            Active   Covered    Misses % Covered
    ----------------            ------      ----    ------ ---------
    FEC Condition Terms              0         0         0     100.0
Expression Coverage:
    Enabled Coverage            Active   Covered    Misses % Covered
    ----------------            ------      ----    ------ ---------
    FEC Expression Terms             0         0         0     100.0
FSM Coverage:
    Enabled Coverage            Active      Hits    Misses % Covered
    ----------------            ------      ----    ------ ---------
    FSMs                                                       100.0
        States                       0         0         0     100.0
        Transitions                  0         0         0     100.0

COVERGROUP COVERAGE:
-----------------------------------------------------------------------------------------------
Covergroup                                             Metric       Goal    Status               
                                                                                              
-----------------------------------------------------------------------------------------------
 TYPE /socTest_pkg/template_monitor_afterToDut/template_cg 
                                                         0.0%        100    ZERO                 
    covered/total bins:                                     0         24                      
    missing/total bins:                                    24         24                      
    % Hit:                                               0.0%        100                      
    type_option.weight=1
    type_option.goal=100
    type_option.comment=
    type_option.strobe=0
    type_option.merge_instances=auto(1)
    Coverpoint template_cg::ina_cp                       0.0%        100    ZERO                 
        covered/total bins:                                 0          4                      
        missing/total bins:                                 4          4                      
        % Hit:                                           0.0%        100                      
        type_option.weight=1
        type_option.goal=100
        type_option.comment=
        bin auto[0]                                         0          1    ZERO                 
        bin auto[1]                                         0          1    ZERO                 
        bin auto[2]                                         0          1    ZERO                 
        bin auto[3]                                         0          1    ZERO                 
    Coverpoint template_cg::inb_cp                       0.0%        100    ZERO                 
        covered/total bins:                                 0          4                      
        missing/total bins:                                 4          4                      
        % Hit:                                           0.0%        100                      
        type_option.weight=1
        type_option.goal=100
        type_option.comment=
        bin auto[0]                                         0          1    ZERO                 
        bin auto[1]                                         0          1    ZERO                 
        bin auto[2]                                         0          1    ZERO                 
        bin auto[3]                                         0          1    ZERO                 
    Cross template_cg::#cross__0#                        0.0%        100    ZERO                 
        covered/total bins:                                 0         16                      
        missing/total bins:                                16         16                      
        % Hit:                                           0.0%        100                      
        type_option.weight=1
        type_option.goal=100
        type_option.comment=
        bin <auto[0],auto[0]>                               0          1    ZERO                 
        bin <auto[1],auto[0]>                               0          1    ZERO                 
        bin <auto[2],auto[0]>                               0          1    ZERO                 
        bin <auto[3],auto[0]>                               0          1    ZERO                 
        bin <auto[0],auto[1]>                               0          1    ZERO                 
        bin <auto[1],auto[1]>                               0          1    ZERO                 
        bin <auto[2],auto[1]>                               0          1    ZERO                 
        bin <auto[3],auto[1]>                               0          1    ZERO                 
        bin <auto[0],auto[2]>                               0          1    ZERO                 
        bin <auto[1],auto[2]>                               0          1    ZERO                 
        bin <auto[2],auto[2]>                               0          1    ZERO                 
        bin <auto[3],auto[2]>                               0          1    ZERO                 
        bin <auto[0],auto[3]>                               0          1    ZERO                 
        bin <auto[1],auto[3]>                               0          1    ZERO                 
        bin <auto[2],auto[3]>                               0          1    ZERO                 
        bin <auto[3],auto[3]>                               0          1    ZERO                 
 CLASS template_monitor_afterToDut
 TYPE /socTest_pkg/axiLite_fc_subscriber/aL_cg           0.0%        100    ZERO                 
    covered/total bins:                                     0        128                      
    missing/total bins:                                   128        128                      
    % Hit:                                               0.0%        100                      
    type_option.weight=1
    type_option.goal=100
    type_option.comment=
    type_option.strobe=0
    type_option.merge_instances=auto(1)
    Coverpoint aL_cg::WDATA_cp                           0.0%        100    ZERO                 
        covered/total bins:                                 0         64                      
        missing/total bins:                                64         64                      
        % Hit:                                           0.0%        100                      
        type_option.weight=1
        type_option.goal=100
        type_option.comment=
        bin auto[0:67108863]                                0          1    ZERO                 
        bin auto[67108864:134217727]                        0          1    ZERO                 
        bin auto[134217728:201326591]                       0          1    ZERO                 
        bin auto[201326592:268435455]                       0          1    ZERO                 
        bin auto[268435456:335544319]                       0          1    ZERO                 
        bin auto[335544320:402653183]                       0          1    ZERO                 
        bin auto[402653184:469762047]                       0          1    ZERO                 
        bin auto[469762048:536870911]                       0          1    ZERO                 
        bin auto[536870912:603979775]                       0          1    ZERO                 
        bin auto[603979776:671088639]                       0          1    ZERO                 
        bin auto[671088640:738197503]                       0          1    ZERO                 
        bin auto[738197504:805306367]                       0          1    ZERO                 
        bin auto[805306368:872415231]                       0          1    ZERO                 
        bin auto[872415232:939524095]                       0          1    ZERO                 
        bin auto[939524096:1006632959]                      0          1    ZERO                 
        bin auto[1006632960:1073741823]                     0          1    ZERO                 
        bin auto[1073741824:1140850687]                     0          1    ZERO                 
        bin auto[1140850688:1207959551]                     0          1    ZERO                 
        bin auto[1207959552:1275068415]                     0          1    ZERO                 
        bin auto[1275068416:1342177279]                     0          1    ZERO                 
        bin auto[1342177280:1409286143]                     0          1    ZERO                 
        bin auto[1409286144:1476395007]                     0          1    ZERO                 
        bin auto[1476395008:1543503871]                     0          1    ZERO                 
        bin auto[1543503872:1610612735]                     0          1    ZERO                 
        bin auto[1610612736:1677721599]                     0          1    ZERO                 
        bin auto[1677721600:1744830463]                     0          1    ZERO                 
        bin auto[1744830464:1811939327]                     0          1    ZERO                 
        bin auto[1811939328:1879048191]                     0          1    ZERO                 
        bin auto[1879048192:1946157055]                     0          1    ZERO                 
        bin auto[1946157056:2013265919]                     0          1    ZERO                 
        bin auto[2013265920:2080374783]                     0          1    ZERO                 
        bin auto[2080374784:2147483647]                     0          1    ZERO                 
        bin auto[2147483648:2214592511]                     0          1    ZERO                 
        bin auto[2214592512:2281701375]                     0          1    ZERO                 
        bin auto[2281701376:2348810239]                     0          1    ZERO                 
        bin auto[2348810240:2415919103]                     0          1    ZERO                 
        bin auto[2415919104:2483027967]                     0          1    ZERO                 
        bin auto[2483027968:2550136831]                     0          1    ZERO                 
        bin auto[2550136832:2617245695]                     0          1    ZERO                 
        bin auto[2617245696:2684354559]                     0          1    ZERO                 
        bin auto[2684354560:2751463423]                     0          1    ZERO                 
        bin auto[2751463424:2818572287]                     0          1    ZERO                 
        bin auto[2818572288:2885681151]                     0          1    ZERO                 
        bin auto[2885681152:2952790015]                     0          1    ZERO                 
        bin auto[2952790016:3019898879]                     0          1    ZERO                 
        bin auto[3019898880:3087007743]                     0          1    ZERO                 
        bin auto[3087007744:3154116607]                     0          1    ZERO                 
        bin auto[3154116608:3221225471]                     0          1    ZERO                 
        bin auto[3221225472:3288334335]                     0          1    ZERO                 
        bin auto[3288334336:3355443199]                     0          1    ZERO                 
        bin auto[3355443200:3422552063]                     0          1    ZERO                 
        bin auto[3422552064:3489660927]                     0          1    ZERO                 
        bin auto[3489660928:3556769791]                     0          1    ZERO                 
        bin auto[3556769792:3623878655]                     0          1    ZERO                 
        bin auto[3623878656:3690987519]                     0          1    ZERO                 
        bin auto[3690987520:3758096383]                     0          1    ZERO                 
        bin auto[3758096384:3825205247]                     0          1    ZERO                 
        bin auto[3825205248:3892314111]                     0          1    ZERO                 
        bin auto[3892314112:3959422975]                     0          1    ZERO                 
        bin auto[3959422976:4026531839]                     0          1    ZERO                 
        bin auto[4026531840:4093640703]                     0          1    ZERO                 
        bin auto[4093640704:4160749567]                     0          1    ZERO                 
        bin auto[4160749568:4227858431]                     0          1    ZERO                 
        bin auto[4227858432:4294967295]                     0          1    ZERO                 
    Coverpoint aL_cg::AWADDR_cp                          0.0%        100    ZERO                 
        covered/total bins:                                 0         64                      
        missing/total bins:                                64         64                      
        % Hit:                                           0.0%        100                      
        type_option.weight=1
        type_option.goal=100
        type_option.comment=
        bin auto[0:67108863]                                0          1    ZERO                 
        bin auto[67108864:134217727]                        0          1    ZERO                 
        bin auto[134217728:201326591]                       0          1    ZERO                 
        bin auto[201326592:268435455]                       0          1    ZERO                 
        bin auto[268435456:335544319]                       0          1    ZERO                 
        bin auto[335544320:402653183]                       0          1    ZERO                 
        bin auto[402653184:469762047]                       0          1    ZERO                 
        bin auto[469762048:536870911]                       0          1    ZERO                 
        bin auto[536870912:603979775]                       0          1    ZERO                 
        bin auto[603979776:671088639]                       0          1    ZERO                 
        bin auto[671088640:738197503]                       0          1    ZERO                 
        bin auto[738197504:805306367]                       0          1    ZERO                 
        bin auto[805306368:872415231]                       0          1    ZERO                 
        bin auto[872415232:939524095]                       0          1    ZERO                 
        bin auto[939524096:1006632959]                      0          1    ZERO                 
        bin auto[1006632960:1073741823]                     0          1    ZERO                 
        bin auto[1073741824:1140850687]                     0          1    ZERO                 
        bin auto[1140850688:1207959551]                     0          1    ZERO                 
        bin auto[1207959552:1275068415]                     0          1    ZERO                 
        bin auto[1275068416:1342177279]                     0          1    ZERO                 
        bin auto[1342177280:1409286143]                     0          1    ZERO                 
        bin auto[1409286144:1476395007]                     0          1    ZERO                 
        bin auto[1476395008:1543503871]                     0          1    ZERO                 
        bin auto[1543503872:1610612735]                     0          1    ZERO                 
        bin auto[1610612736:1677721599]                     0          1    ZERO                 
        bin auto[1677721600:1744830463]                     0          1    ZERO                 
        bin auto[1744830464:1811939327]                     0          1    ZERO                 
        bin auto[1811939328:1879048191]                     0          1    ZERO                 
        bin auto[1879048192:1946157055]                     0          1    ZERO                 
        bin auto[1946157056:2013265919]                     0          1    ZERO                 
        bin auto[2013265920:2080374783]                     0          1    ZERO                 
        bin auto[2080374784:2147483647]                     0          1    ZERO                 
        bin auto[2147483648:2214592511]                     0          1    ZERO                 
        bin auto[2214592512:2281701375]                     0          1    ZERO                 
        bin auto[2281701376:2348810239]                     0          1    ZERO                 
        bin auto[2348810240:2415919103]                     0          1    ZERO                 
        bin auto[2415919104:2483027967]                     0          1    ZERO                 
        bin auto[2483027968:2550136831]                     0          1    ZERO                 
        bin auto[2550136832:2617245695]                     0          1    ZERO                 
        bin auto[2617245696:2684354559]                     0          1    ZERO                 
        bin auto[2684354560:2751463423]                     0          1    ZERO                 
        bin auto[2751463424:2818572287]                     0          1    ZERO                 
        bin auto[2818572288:2885681151]                     0          1    ZERO                 
        bin auto[2885681152:2952790015]                     0          1    ZERO                 
        bin auto[2952790016:3019898879]                     0          1    ZERO                 
        bin auto[3019898880:3087007743]                     0          1    ZERO                 
        bin auto[3087007744:3154116607]                     0          1    ZERO                 
        bin auto[3154116608:3221225471]                     0          1    ZERO                 
        bin auto[3221225472:3288334335]                     0          1    ZERO                 
        bin auto[3288334336:3355443199]                     0          1    ZERO                 
        bin auto[3355443200:3422552063]                     0          1    ZERO                 
        bin auto[3422552064:3489660927]                     0          1    ZERO                 
        bin auto[3489660928:3556769791]                     0          1    ZERO                 
        bin auto[3556769792:3623878655]                     0          1    ZERO                 
        bin auto[3623878656:3690987519]                     0          1    ZERO                 
        bin auto[3690987520:3758096383]                     0          1    ZERO                 
        bin auto[3758096384:3825205247]                     0          1    ZERO                 
        bin auto[3825205248:3892314111]                     0          1    ZERO                 
        bin auto[3892314112:3959422975]                     0          1    ZERO                 
        bin auto[3959422976:4026531839]                     0          1    ZERO                 
        bin auto[4026531840:4093640703]                     0          1    ZERO                 
        bin auto[4093640704:4160749567]                     0          1    ZERO                 
        bin auto[4160749568:4227858431]                     0          1    ZERO                 
        bin auto[4227858432:4294967295]                     0          1    ZERO                 
 CLASS axiLite_fc_subscriber
 TYPE /socTest_pkg/rgb_fc_subscriber/rgb_cg             86.2%        100    Uncovered            
    covered/total bins:                                   346        454                      
    missing/total bins:                                   108        454                      
    % Hit:                                              76.2%        100                      
    type_option.weight=1
    type_option.goal=100
    type_option.comment=
    type_option.strobe=0
    type_option.merge_instances=auto(1)
    Coverpoint rgb_cg::iRed_cp                          79.6%        100    Uncovered            
        covered/total bins:                                51         64                      
        missing/total bins:                                13         64                      
        % Hit:                                          79.6%        100                      
        type_option.weight=1
        type_option.goal=100
        type_option.comment=
        bin auto[0:3]                                       4          1    Covered              
        bin auto[4:7]                                       0          1    ZERO                 
        bin auto[8:11]                                      6          1    Covered              
        bin auto[12:15]                                     0          1    ZERO                 
        bin auto[16:19]                                     4          1    Covered              
        bin auto[20:23]                                     0          1    ZERO                 
        bin auto[24:27]                                     6          1    Covered              
        bin auto[28:31]                                     8          1    Covered              
        bin auto[32:35]                                     2          1    Covered              
        bin auto[36:39]                                     4          1    Covered              
        bin auto[40:43]                                     6          1    Covered              
        bin auto[44:47]                                     4          1    Covered              
        bin auto[48:51]                                     2          1    Covered              
        bin auto[52:55]                                     8          1    Covered              
        bin auto[56:59]                                     2          1    Covered              
        bin auto[60:63]                                     2          1    Covered              
        bin auto[64:67]                                     2          1    Covered              
        bin auto[68:71]                                     0          1    ZERO                 
        bin auto[72:75]                                     4          1    Covered              
        bin auto[76:79]                                     0          1    ZERO                 
        bin auto[80:83]                                     6          1    Covered              
        bin auto[84:87]                                     2          1    Covered              
        bin auto[88:91]                                     2          1    Covered              
        bin auto[92:95]                                     8          1    Covered              
        bin auto[96:99]                                     2          1    Covered              
        bin auto[100:103]                                   0          1    ZERO                 
        bin auto[104:107]                                   0          1    ZERO                 
        bin auto[108:111]                                   2          1    Covered              
        bin auto[112:115]                                   2          1    Covered              
        bin auto[116:119]                                   0          1    ZERO                 
        bin auto[120:123]                                   2          1    Covered              
        bin auto[124:127]                                   2          1    Covered              
        bin auto[128:131]                                   6          1    Covered              
        bin auto[132:135]                                   6          1    Covered              
        bin auto[136:139]                                   0          1    ZERO                 
        bin auto[140:143]                                   2          1    Covered              
        bin auto[144:147]                                   8          1    Covered              
        bin auto[148:151]                                   0          1    ZERO                 
        bin auto[152:155]                                   4          1    Covered              
        bin auto[156:159]                                   6          1    Covered              
        bin auto[160:163]                                   0          1    ZERO                 
        bin auto[164:167]                                   2          1    Covered              
        bin auto[168:171]                                   2          1    Covered              
        bin auto[172:175]                                   4          1    Covered              
        bin auto[176:179]                                   6          1    Covered              
        bin auto[180:183]                                   6          1    Covered              
        bin auto[184:187]                                   4          1    Covered              
        bin auto[188:191]                                   6          1    Covered              
        bin auto[192:195]                                   4          1    Covered              
        bin auto[196:199]                                   4          1    Covered              
        bin auto[200:203]                                   4          1    Covered              
        bin auto[204:207]                                   4          1    Covered              
        bin auto[208:211]                                   2          1    Covered              
        bin auto[212:215]                                   8          1    Covered              
        bin auto[216:219]                                   2          1    Covered              
        bin auto[220:223]                                   8          1    Covered              
        bin auto[224:227]                                   4          1    Covered              
        bin auto[228:231]                                   6          1    Covered              
        bin auto[232:235]                                   4          1    Covered              
        bin auto[236:239]                                   0          1    ZERO                 
        bin auto[240:243]                                   2          1    Covered              
        bin auto[244:247]                                  10          1    Covered              
        bin auto[248:251]                                   4          1    Covered              
        bin auto[252:255]                                   0          1    ZERO                 
    Coverpoint rgb_cg::iGreen_cp                        81.2%        100    Uncovered            
        covered/total bins:                                52         64                      
        missing/total bins:                                12         64                      
        % Hit:                                          81.2%        100                      
        type_option.weight=1
        type_option.goal=100
        type_option.comment=
        bin auto[0:3]                                       6          1    Covered              
        bin auto[4:7]                                       6          1    Covered              
        bin auto[8:11]                                      6          1    Covered              
        bin auto[12:15]                                     0          1    ZERO                 
        bin auto[16:19]                                     4          1    Covered              
        bin auto[20:23]                                     2          1    Covered              
        bin auto[24:27]                                     2          1    Covered              
        bin auto[28:31]                                     8          1    Covered              
        bin auto[32:35]                                     2          1    Covered              
        bin auto[36:39]                                     4          1    Covered              
        bin auto[40:43]                                     8          1    Covered              
        bin auto[44:47]                                    10          1    Covered              
        bin auto[48:51]                                     0          1    ZERO                 
        bin auto[52:55]                                     2          1    Covered              
        bin auto[56:59]                                     0          1    ZERO                 
        bin auto[60:63]                                     6          1    Covered              
        bin auto[64:67]                                     0          1    ZERO                 
        bin auto[68:71]                                     2          1    Covered              
        bin auto[72:75]                                     0          1    ZERO                 
        bin auto[76:79]                                     4          1    Covered              
        bin auto[80:83]                                     2          1    Covered              
        bin auto[84:87]                                     2          1    Covered              
        bin auto[88:91]                                     2          1    Covered              
        bin auto[92:95]                                     2          1    Covered              
        bin auto[96:99]                                     6          1    Covered              
        bin auto[100:103]                                   6          1    Covered              
        bin auto[104:107]                                   4          1    Covered              
        bin auto[108:111]                                  12          1    Covered              
        bin auto[112:115]                                   4          1    Covered              
        bin auto[116:119]                                   2          1    Covered              
        bin auto[120:123]                                   0          1    ZERO                 
        bin auto[124:127]                                   2          1    Covered              
        bin auto[128:131]                                   2          1    Covered              
        bin auto[132:135]                                  10          1    Covered              
        bin auto[136:139]                                   0          1    ZERO                 
        bin auto[140:143]                                   4          1    Covered              
        bin auto[144:147]                                   2          1    Covered              
        bin auto[148:151]                                   4          1    Covered              
        bin auto[152:155]                                   0          1    ZERO                 
        bin auto[156:159]                                   4          1    Covered              
        bin auto[160:163]                                   0          1    ZERO                 
        bin auto[164:167]                                   2          1    Covered              
        bin auto[168:171]                                   6          1    Covered              
        bin auto[172:175]                                   2          1    Covered              
        bin auto[176:179]                                   6          1    Covered              
        bin auto[180:183]                                   2          1    Covered              
        bin auto[184:187]                                   4          1    Covered              
        bin auto[188:191]                                   2          1    Covered              
        bin auto[192:195]                                   2          1    Covered              
        bin auto[196:199]                                   4          1    Covered              
        bin auto[200:203]                                   6          1    Covered              
        bin auto[204:207]                                   2          1    Covered              
        bin auto[208:211]                                   0          1    ZERO                 
        bin auto[212:215]                                   6          1    Covered              
        bin auto[216:219]                                   2          1    Covered              
        bin auto[220:223]                                   4          1    Covered              
        bin auto[224:227]                                   4          1    Covered              
        bin auto[228:231]                                   2          1    Covered              
        bin auto[232:235]                                   0          1    ZERO                 
        bin auto[236:239]                                   0          1    ZERO                 
        bin auto[240:243]                                   2          1    Covered              
        bin auto[244:247]                                   8          1    Covered              
        bin auto[248:251]                                   8          1    Covered              
        bin auto[252:255]                                   4          1    Covered              
    Coverpoint rgb_cg::iBlue_cp                         89.0%        100    Uncovered            
        covered/total bins:                                57         64                      
        missing/total bins:                                 7         64                      
        % Hit:                                          89.0%        100                      
        type_option.weight=1
        type_option.goal=100
        type_option.comment=
        bin auto[0:3]                                       4          1    Covered              
        bin auto[4:7]                                       2          1    Covered              
        bin auto[8:11]                                      2          1    Covered              
        bin auto[12:15]                                     6          1    Covered              
        bin auto[16:19]                                     2          1    Covered              
        bin auto[20:23]                                     2          1    Covered              
        bin auto[24:27]                                     2          1    Covered              
        bin auto[28:31]                                     0          1    ZERO                 
        bin auto[32:35]                                     6          1    Covered              
        bin auto[36:39]                                     2          1    Covered              
        bin auto[40:43]                                     2          1    Covered              
        bin auto[44:47]                                     0          1    ZERO                 
        bin auto[48:51]                                     2          1    Covered              
        bin auto[52:55]                                     4          1    Covered              
        bin auto[56:59]                                     4          1    Covered              
        bin auto[60:63]                                     2          1    Covered              
        bin auto[64:67]                                     4          1    Covered              
        bin auto[68:71]                                     8          1    Covered              
        bin auto[72:75]                                     0          1    ZERO                 
        bin auto[76:79]                                     6          1    Covered              
        bin auto[80:83]                                     4          1    Covered              
        bin auto[84:87]                                     6          1    Covered              
        bin auto[88:91]                                     0          1    ZERO                 
        bin auto[92:95]                                     2          1    Covered              
        bin auto[96:99]                                     6          1    Covered              
        bin auto[100:103]                                   6          1    Covered              
        bin auto[104:107]                                   4          1    Covered              
        bin auto[108:111]                                   6          1    Covered              
        bin auto[112:115]                                   2          1    Covered              
        bin auto[116:119]                                   4          1    Covered              
        bin auto[120:123]                                   0          1    ZERO                 
        bin auto[124:127]                                   2          1    Covered              
        bin auto[128:131]                                   2          1    Covered              
        bin auto[132:135]                                   4          1    Covered              
        bin auto[136:139]                                   6          1    Covered              
        bin auto[140:143]                                   4          1    Covered              
        bin auto[144:147]                                   2          1    Covered              
        bin auto[148:151]                                   4          1    Covered              
        bin auto[152:155]                                   6          1    Covered              
        bin auto[156:159]                                   4          1    Covered              
        bin auto[160:163]                                  10          1    Covered              
        bin auto[164:167]                                   6          1    Covered              
        bin auto[168:171]                                   2          1    Covered              
        bin auto[172:175]                                   4          1    Covered              
        bin auto[176:179]                                   2          1    Covered              
        bin auto[180:183]                                   2          1    Covered              
        bin auto[184:187]                                   2          1    Covered              
        bin auto[188:191]                                   2          1    Covered              
        bin auto[192:195]                                   6          1    Covered              
        bin auto[196:199]                                   2          1    Covered              
        bin auto[200:203]                                   2          1    Covered              
        bin auto[204:207]                                   0          1    ZERO                 
        bin auto[208:211]                                   2          1    Covered              
        bin auto[212:215]                                   2          1    Covered              
        bin auto[216:219]                                   0          1    ZERO                 
        bin auto[220:223]                                   2          1    Covered              
        bin auto[224:227]                                   8          1    Covered              
        bin auto[228:231]                                   6          1    Covered              
        bin auto[232:235]                                   6          1    Covered              
        bin auto[236:239]                                   2          1    Covered              
        bin auto[240:243]                                   2          1    Covered              
        bin auto[244:247]                                   4          1    Covered              
        bin auto[248:251]                                   8          1    Covered              
        bin auto[252:255]                                   4          1    Covered              
    Coverpoint rgb_cg::iPixelEn_cp                     100.0%        100    Covered              
        covered/total bins:                                 2          2                      
        missing/total bins:                                 0          2                      
        % Hit:                                         100.0%        100                      
        type_option.weight=1
        type_option.goal=100
        type_option.comment=
        bin auto[0]                                       120          1    Covered              
        bin auto[1]                                       100          1    Covered              
    Coverpoint rgb_cg::iValid_cp                       100.0%        100    Covered              
        covered/total bins:                                 2          2                      
        missing/total bins:                                 0          2                      
        % Hit:                                         100.0%        100                      
        type_option.weight=1
        type_option.goal=100
        type_option.comment=
        bin auto[0]                                       132          1    Covered              
        bin auto[1]                                        88          1    Covered              
    Coverpoint rgb_cg::iEof_cp                         100.0%        100    Covered              
        covered/total bins:                                 2          2                      
        missing/total bins:                                 0          2                      
        % Hit:                                         100.0%        100                      
        type_option.weight=1
        type_option.goal=100
        type_option.comment=
        bin auto[0]                                       114          1    Covered              
        bin auto[1]                                       106          1    Covered              
    Coverpoint rgb_cg::iX_cp                            85.9%        100    Uncovered            
        covered/total bins:                                55         64                      
        missing/total bins:                                 9         64                      
        % Hit:                                          85.9%        100                      
        type_option.weight=1
        type_option.goal=100
        type_option.comment=
        bin auto[0:31]                                      4          1    Covered              
        bin auto[32:63]                                     2          1    Covered              
        bin auto[64:95]                                     6          1    Covered              
        bin auto[96:127]                                   10          1    Covered              
        bin auto[128:159]                                   8          1    Covered              
        bin auto[160:191]                                   0          1    ZERO                 
        bin auto[192:223]                                   2          1    Covered              
        bin auto[224:255]                                   4          1    Covered              
        bin auto[256:287]                                   2          1    Covered              
        bin auto[288:319]                                   8          1    Covered              
        bin auto[320:351]                                   6          1    Covered              
        bin auto[352:383]                                   4          1    Covered              
        bin auto[384:415]                                   0          1    ZERO                 
        bin auto[416:447]                                   2          1    Covered              
        bin auto[448:479]                                   4          1    Covered              
        bin auto[480:511]                                   0          1    ZERO                 
        bin auto[512:543]                                   4          1    Covered              
        bin auto[544:575]                                   6          1    Covered              
        bin auto[576:607]                                   2          1    Covered              
        bin auto[608:639]                                   8          1    Covered              
        bin auto[640:671]                                   2          1    Covered              
        bin auto[672:703]                                   2          1    Covered              
        bin auto[704:735]                                   4          1    Covered              
        bin auto[736:767]                                   2          1    Covered              
        bin auto[768:799]                                   2          1    Covered              
        bin auto[800:831]                                   6          1    Covered              
        bin auto[832:863]                                   0          1    ZERO                 
        bin auto[864:895]                                   2          1    Covered              
        bin auto[896:927]                                   2          1    Covered              
        bin auto[928:959]                                   2          1    Covered              
        bin auto[960:991]                                   4          1    Covered              
        bin auto[992:1023]                                  4          1    Covered              
        bin auto[1024:1055]                                 4          1    Covered              
        bin auto[1056:1087]                                 4          1    Covered              
        bin auto[1088:1119]                                 4          1    Covered              
        bin auto[1120:1151]                                 0          1    ZERO                 
        bin auto[1152:1183]                                 6          1    Covered              
        bin auto[1184:1215]                                 6          1    Covered              
        bin auto[1216:1247]                                 8          1    Covered              
        bin auto[1248:1279]                                 4          1    Covered              
        bin auto[1280:1311]                                 6          1    Covered              
        bin auto[1312:1343]                                 0          1    ZERO                 
        bin auto[1344:1375]                                 0          1    ZERO                 
        bin auto[1376:1407]                                 4          1    Covered              
        bin auto[1408:1439]                                 6          1    Covered              
        bin auto[1440:1471]                                 0          1    ZERO                 
        bin auto[1472:1503]                                 2          1    Covered              
        bin auto[1504:1535]                                 2          1    Covered              
        bin auto[1536:1567]                                 4          1    Covered              
        bin auto[1568:1599]                                 2          1    Covered              
        bin auto[1600:1631]                                 2          1    Covered              
        bin auto[1632:1663]                                 0          1    ZERO                 
        bin auto[1664:1695]                                 4          1    Covered              
        bin auto[1696:1727]                                 2          1    Covered              
        bin auto[1728:1759]                                 4          1    Covered              
        bin auto[1760:1791]                                 6          1    Covered              
        bin auto[1792:1823]                                 2          1    Covered              
        bin auto[1824:1855]                                 4          1    Covered              
        bin auto[1856:1887]                                 2          1    Covered              
        bin auto[1888:1919]                                 2          1    Covered              
        bin auto[1920:1951]                                 2          1    Covered              
        bin auto[1952:1983]                                 2          1    Covered              
        bin auto[1984:2015]                                 8          1    Covered              
        bin auto[2016:2047]                                 4          1    Covered              
    Coverpoint rgb_cg::iY_cp                            85.9%        100    Uncovered            
        covered/total bins:                                55         64                      
        missing/total bins:                                 9         64                      
        % Hit:                                          85.9%        100                      
        type_option.weight=1
        type_option.goal=100
        type_option.comment=
        bin auto[0:31]                                      2          1    Covered              
        bin auto[32:63]                                     2          1    Covered              
        bin auto[64:95]                                     6          1    Covered              
        bin auto[96:127]                                    6          1    Covered              
        bin auto[128:159]                                   2          1    Covered              
        bin auto[160:191]                                   4          1    Covered              
        bin auto[192:223]                                   4          1    Covered              
        bin auto[224:255]                                   6          1    Covered              
        bin auto[256:287]                                   6          1    Covered              
        bin auto[288:319]                                   4          1    Covered              
        bin auto[320:351]                                   2          1    Covered              
        bin auto[352:383]                                   8          1    Covered              
        bin auto[384:415]                                   0          1    ZERO                 
        bin auto[416:447]                                   2          1    Covered              
        bin auto[448:479]                                   6          1    Covered              
        bin auto[480:511]                                   6          1    Covered              
        bin auto[512:543]                                   6          1    Covered              
        bin auto[544:575]                                   4          1    Covered              
        bin auto[576:607]                                   2          1    Covered              
        bin auto[608:639]                                   0          1    ZERO                 
        bin auto[640:671]                                   4          1    Covered              
        bin auto[672:703]                                   4          1    Covered              
        bin auto[704:735]                                   2          1    Covered              
        bin auto[736:767]                                   4          1    Covered              
        bin auto[768:799]                                   6          1    Covered              
        bin auto[800:831]                                   4          1    Covered              
        bin auto[832:863]                                   4          1    Covered              
        bin auto[864:895]                                   4          1    Covered              
        bin auto[896:927]                                   4          1    Covered              
        bin auto[928:959]                                   2          1    Covered              
        bin auto[960:991]                                   4          1    Covered              
        bin auto[992:1023]                                  6          1    Covered              
        bin auto[1024:1055]                                 0          1    ZERO                 
        bin auto[1056:1087]                                 2          1    Covered              
        bin auto[1088:1119]                                 2          1    Covered              
        bin auto[1120:1151]                                 4          1    Covered              
        bin auto[1152:1183]                                 2          1    Covered              
        bin auto[1184:1215]                                 4          1    Covered              
        bin auto[1216:1247]                                 6          1    Covered              
        bin auto[1248:1279]                                 4          1    Covered              
        bin auto[1280:1311]                                 6          1    Covered              
        bin auto[1312:1343]                                 2          1    Covered              
        bin auto[1344:1375]                                 4          1    Covered              
        bin auto[1376:1407]                                 0          1    ZERO                 
        bin auto[1408:1439]                                 4          1    Covered              
        bin auto[1440:1471]                                 0          1    ZERO                 
        bin auto[1472:1503]                                 4          1    Covered              
        bin auto[1504:1535]                                 2          1    Covered              
        bin auto[1536:1567]                                 4          1    Covered              
        bin auto[1568:1599]                                 8          1    Covered              
        bin auto[1600:1631]                                 6          1    Covered              
        bin auto[1632:1663]                                 2          1    Covered              
        bin auto[1664:1695]                                 2          1    Covered              
        bin auto[1696:1727]                                 0          1    ZERO                 
        bin auto[1728:1759]                                 4          1    Covered              
        bin auto[1760:1791]                                 6          1    Covered              
        bin auto[1792:1823]                                 4          1    Covered              
        bin auto[1824:1855]                                 2          1    Covered              
        bin auto[1856:1887]                                 0          1    ZERO                 
        bin auto[1888:1919]                                 0          1    ZERO                 
        bin auto[1920:1951]                                 4          1    Covered              
        bin auto[1952:1983]                                 0          1    ZERO                 
        bin auto[1984:2015]                                 4          1    Covered              
        bin auto[2016:2047]                                 2          1    Covered              
    Cross rgb_cg::#cross__0#                            54.6%        100    Uncovered            
        covered/total bins:                                70        128                      
        missing/total bins:                                58        128                      
        % Hit:                                          54.6%        100                      
        type_option.weight=1
        type_option.goal=100
        type_option.comment=
        bin <auto[0:3],auto[0]>                             4          1    Covered              
        bin <auto[8:11],auto[0]>                            6          1    Covered              
        bin <auto[16:19],auto[0]>                           2          1    Covered              
        bin <auto[24:27],auto[0]>                           6          1    Covered              
        bin <auto[28:31],auto[0]>                           2          1    Covered              
        bin <auto[32:35],auto[0]>                           2          1    Covered              
        bin <auto[40:43],auto[0]>                           2          1    Covered              
        bin <auto[44:47],auto[0]>                           4          1    Covered              
        bin <auto[48:51],auto[0]>                           2          1    Covered              
        bin <auto[52:55],auto[0]>                           4          1    Covered              
        bin <auto[56:59],auto[0]>                           2          1    Covered              
        bin <auto[72:75],auto[0]>                           2          1    Covered              
        bin <auto[80:83],auto[0]>                           4          1    Covered              
        bin <auto[88:91],auto[0]>                           2          1    Covered              
        bin <auto[108:111],auto[0]>                         2          1    Covered              
        bin <auto[112:115],auto[0]>                         2          1    Covered              
        bin <auto[120:123],auto[0]>                         2          1    Covered              
        bin <auto[128:131],auto[0]>                         2          1    Covered              
        bin <auto[132:135],auto[0]>                         2          1    Covered              
        bin <auto[144:147],auto[0]>                         6          1    Covered              
        bin <auto[152:155],auto[0]>                         4          1    Covered              
        bin <auto[156:159],auto[0]>                         4          1    Covered              
        bin <auto[172:175],auto[0]>                         2          1    Covered              
        bin <auto[180:183],auto[0]>                         6          1    Covered              
        bin <auto[184:187],auto[0]>                         2          1    Covered              
        bin <auto[188:191],auto[0]>                         4          1    Covered              
        bin <auto[192:195],auto[0]>                         4          1    Covered              
        bin <auto[196:199],auto[0]>                         4          1    Covered              
        bin <auto[200:203],auto[0]>                         2          1    Covered              
        bin <auto[204:207],auto[0]>                         2          1    Covered              
        bin <auto[208:211],auto[0]>                         2          1    Covered              
        bin <auto[212:215],auto[0]>                         6          1    Covered              
        bin <auto[216:219],auto[0]>                         2          1    Covered              
        bin <auto[220:223],auto[0]>                         2          1    Covered              
        bin <auto[224:227],auto[0]>                         2          1    Covered              
        bin <auto[228:231],auto[0]>                         2          1    Covered              
        bin <auto[232:235],auto[0]>                         4          1    Covered              
        bin <auto[16:19],auto[1]>                           2          1    Covered              
        bin <auto[28:31],auto[1]>                           6          1    Covered              
        bin <auto[36:39],auto[1]>                           4          1    Covered              
        bin <auto[40:43],auto[1]>                           4          1    Covered              
        bin <auto[52:55],auto[1]>                           4          1    Covered              
        bin <auto[60:63],auto[1]>                           2          1    Covered              
        bin <auto[64:67],auto[1]>                           2          1    Covered              
        bin <auto[72:75],auto[1]>                           2          1    Covered              
        bin <auto[80:83],auto[1]>                           2          1    Covered              
        bin <auto[84:87],auto[1]>                           2          1    Covered              
        bin <auto[92:95],auto[1]>                           8          1    Covered              
        bin <auto[96:99],auto[1]>                           2          1    Covered              
        bin <auto[124:127],auto[1]>                         2          1    Covered              
        bin <auto[128:131],auto[1]>                         4          1    Covered              
        bin <auto[132:135],auto[1]>                         4          1    Covered              
        bin <auto[140:143],auto[1]>                         2          1    Covered              
        bin <auto[144:147],auto[1]>                         2          1    Covered              
        bin <auto[156:159],auto[1]>                         2          1    Covered              
        bin <auto[164:167],auto[1]>                         2          1    Covered              
        bin <auto[168:171],auto[1]>                         2          1    Covered              
        bin <auto[172:175],auto[1]>                         2          1    Covered              
        bin <auto[176:179],auto[1]>                         6          1    Covered              
        bin <auto[184:187],auto[1]>                         2          1    Covered              
        bin <auto[188:191],auto[1]>                         2          1    Covered              
        bin <auto[200:203],auto[1]>                         2          1    Covered              
        bin <auto[204:207],auto[1]>                         2          1    Covered              
        bin <auto[212:215],auto[1]>                         2          1    Covered              
        bin <auto[220:223],auto[1]>                         6          1    Covered              
        bin <auto[224:227],auto[1]>                         2          1    Covered              
        bin <auto[228:231],auto[1]>                         4          1    Covered              
        bin <auto[240:243],auto[1]>                         2          1    Covered              
        bin <auto[244:247],auto[1]>                        10          1    Covered              
        bin <auto[248:251],auto[1]>                         4          1    Covered              
        bin <auto[4:7],auto[0]>                             0          1    ZERO                 
        bin <auto[12:15],auto[0]>                           0          1    ZERO                 
        bin <auto[20:23],auto[0]>                           0          1    ZERO                 
        bin <auto[36:39],auto[0]>                           0          1    ZERO                 
        bin <auto[60:63],auto[0]>                           0          1    ZERO                 
        bin <auto[64:67],auto[0]>                           0          1    ZERO                 
        bin <auto[68:71],auto[0]>                           0          1    ZERO                 
        bin <auto[76:79],auto[0]>                           0          1    ZERO                 
        bin <auto[84:87],auto[0]>                           0          1    ZERO                 
        bin <auto[92:95],auto[0]>                           0          1    ZERO                 
        bin <auto[96:99],auto[0]>                           0          1    ZERO                 
        bin <auto[100:103],auto[0]>                         0          1    ZERO                 
        bin <auto[104:107],auto[0]>                         0          1    ZERO                 
        bin <auto[116:119],auto[0]>                         0          1    ZERO                 
        bin <auto[124:127],auto[0]>                         0          1    ZERO                 
        bin <auto[136:139],auto[0]>                         0          1    ZERO                 
        bin <auto[140:143],auto[0]>                         0          1    ZERO                 
        bin <auto[148:151],auto[0]>                         0          1    ZERO                 
        bin <auto[160:163],auto[0]>                         0          1    ZERO                 
        bin <auto[164:167],auto[0]>                         0          1    ZERO                 
        bin <auto[168:171],auto[0]>                         0          1    ZERO                 
        bin <auto[176:179],auto[0]>                         0          1    ZERO                 
        bin <auto[236:239],auto[0]>                         0          1    ZERO                 
        bin <auto[240:243],auto[0]>                         0          1    ZERO                 
        bin <auto[244:247],auto[0]>                         0          1    ZERO                 
        bin <auto[248:251],auto[0]>                         0          1    ZERO                 
        bin <auto[252:255],auto[0]>                         0          1    ZERO                 
        bin <auto[0:3],auto[1]>                             0          1    ZERO                 
        bin <auto[4:7],auto[1]>                             0          1    ZERO                 
        bin <auto[8:11],auto[1]>                            0          1    ZERO                 
        bin <auto[12:15],auto[1]>                           0          1    ZERO                 
        bin <auto[20:23],auto[1]>                           0          1    ZERO                 
        bin <auto[24:27],auto[1]>                           0          1    ZERO                 
        bin <auto[32:35],auto[1]>                           0          1    ZERO                 
        bin <auto[44:47],auto[1]>                           0          1    ZERO                 
        bin <auto[48:51],auto[1]>                           0          1    ZERO                 
        bin <auto[56:59],auto[1]>                           0          1    ZERO                 
        bin <auto[68:71],auto[1]>                           0          1    ZERO                 
        bin <auto[76:79],auto[1]>                           0          1    ZERO                 
        bin <auto[88:91],auto[1]>                           0          1    ZERO                 
        bin <auto[100:103],auto[1]>                         0          1    ZERO                 
        bin <auto[104:107],auto[1]>                         0          1    ZERO                 
        bin <auto[108:111],auto[1]>                         0          1    ZERO                 
        bin <auto[112:115],auto[1]>                         0          1    ZERO                 
        bin <auto[116:119],auto[1]>                         0          1    ZERO                 
        bin <auto[120:123],auto[1]>                         0          1    ZERO                 
        bin <auto[136:139],auto[1]>                         0          1    ZERO                 
        bin <auto[148:151],auto[1]>                         0          1    ZERO                 
        bin <auto[152:155],auto[1]>                         0          1    ZERO                 
        bin <auto[160:163],auto[1]>                         0          1    ZERO                 
        bin <auto[180:183],auto[1]>                         0          1    ZERO                 
        bin <auto[192:195],auto[1]>                         0          1    ZERO                 
        bin <auto[196:199],auto[1]>                         0          1    ZERO                 
        bin <auto[208:211],auto[1]>                         0          1    ZERO                 
        bin <auto[216:219],auto[1]>                         0          1    ZERO                 
        bin <auto[232:235],auto[1]>                         0          1    ZERO                 
        bin <auto[236:239],auto[1]>                         0          1    ZERO                 
        bin <auto[252:255],auto[1]>                         0          1    ZERO                 
 CLASS rgb_fc_subscriber

TOTAL COVERGROUP COVERAGE: 28.7%  COVERGROUP TYPES: 3

ASSERTION RESULTS:
-------------------------------------------------------
Name                 File(Line)           Failure Pass 
                                          Count   Count 
-------------------------------------------------------
/socTest_pkg/random_sequence_r2/body/random_loop/immed__188
                     ../modules/top.sv(188)       0     1
/socTest_pkg/rgb_test/build_phase/#ublk#215236535#1157/immed__1160
                     ../modules/top.sv(1160)       0     1

Total Coverage By File (code coverage only, filtered view): 8.9%

