Coverage Report by file with details

=================================================================================
=== File: ../modules/dut/pixelCord.vhd
=================================================================================
Statement Coverage:
    Enabled Coverage            Active      Hits    Misses % Covered
    ----------------            ------      ----    ------ ---------
    Stmts                           97        49        48      50.5

================================Statement Details================================

Statement Coverage for file ../modules/dut/pixelCord.vhd --

    1                                                
    2                                                library ieee;
    3                                                use ieee.std_logic_1164.all;
    4                                                use ieee.numeric_std.all;
    5                                                use work.constantspackage.all;
    6                                                use work.vpfRecords.all;
    7                                                
    8                                                entity pixelCord is
    9                                                port (
    10                                                   clk            : in std_logic;
    11                                                   iRed           : in std_logic_vector(7 downto 0);
    12                                                   iGreen         : in std_logic_vector(7 downto 0);
    13                                                   iBlue          : in std_logic_vector(7 downto 0);
    14                                                   iValid         : in std_logic;
    15                                                   iPixelEn       : in std_logic;
    16                                                   iEof           : in std_logic;
    17                                                   iX             : in integer;
    18                                                   iY             : in integer;
    19                                                   oRed           : out std_logic_vector(7 downto 0);
    20                                                   oGreen         : out std_logic_vector(7 downto 0);
    21                                                   oBlue          : out std_logic_vector(7 downto 0);
    22                                                   oValid         : out std_logic);
    23                                               end entity;
    24                                               architecture rtl of pixelCord is
    25                                                   signal iCord           : cord;
    26                                                   signal oRgb            : channel;
    27                                                   signal iRgb            : channel;
    28                                                   signal frameSize       : intersectPoint;
    29                                                   signal initCord        : intersectPoint;
    30                                                   signal newCord         : intersectPoint;
    31                                                   signal grid1Cord       : intersectPoint;
    32                                                   signal grid2Cord       : intersectPoint;
    33                                                   signal grid3Cord       : intersectPoint;
    34                                                   signal grid4Cord       : intersectPoint;
    35                                                   signal rgb             : channel;
    36                                               begin
    37              1                        110         iCord.x         <= iX;
    38              1                        110         iCord.y         <= iY;
    39                                                   
    40              1                        110         iRgb.red         <= iRed;
    41              1                        110         iRgb.green       <= iGreen;
    42              1                        110         iRgb.blue        <= iBlue;
    43              1                         71         iRgb.valid       <= iValid;
    44                                                   
    45              1                         54         oRed             <= oRgb.red;
    46              1                         54         oGreen           <= oRgb.green;
    47              1                         54         oBlue            <= oRgb.blue;
    48              1                         72         oValid           <= oRgb.valid;
    49                                                   
    50                                                   
    51              1                          1         initCord.rht   <= initCordValueRht;
    52              1                          1         initCord.lft   <= initCordValueLft;
    53              1                          1         initCord.top   <= initCordValueTop;
    54              1                          1         initCord.bot   <= initCordValueBot;
    55              1                          1         frameSize.lft  <= frameSizeLft;
    56              1                          1         frameSize.rht  <= frameSizeRht;
    57              1                          1         frameSize.top  <= frameSizeTop;
    58              1                          1         frameSize.bot  <= frameSizeBot;
    59                                               dataOutP: process (clk)begin
    60                                                   if rising_edge(clk) then
    61              1                        124             oRgb.valid  <= iRgb.valid;
    62              1                        124             oRgb.red    <= rgb.red;
    63              1                        124             oRgb.green  <= rgb.green;
    64              1                        124             oRgb.blue   <= rgb.blue;
    65                                                   end if;
    66                                               end process dataOutP;
    67                                               pixelCordP: process (clk)begin
    68                                                   if rising_edge(clk) then
    69                                                       if (iRgb.valid = hi) then
    70                                                           ------------------------------------
    71                                                           if (iPixelEn = hi) then 
    72                                                               ------------------------------------
    73                                                               --Left Coordinates
    74                                                               ------------------------------------
    75                                                               if (iCord.x <= newCord.lft) then
    76                                                                   if ( iCord.x >= frameSize.lft) then 
    77              1                         20                             newCord.lft <= iCord.x - 1;
    78                                                                   end if;   
    79                                                               end if;
    80                                                               ------------------------------------
    81                                                               --Right Coordinates
    82                                                               ------------------------------------
    83                                                               if (iCord.x >= newCord.rht) then
    84                                                                   if ( iCord.x <= frameSize.rht) then 
    85              1                         19                             newCord.rht <= iCord.x + 1;
    86                                                                   end if;   
    87                                                               end if;
    88                                                               ------------------------------------
    89                                                               --Top Coordinates
    90                                                               ------------------------------------
    91                                                               if (iCord.y <= newCord.top) then
    92                                                                   if ( iCord.y >= frameSize.top) then 
    93              1                         20                             newCord.top <= iCord.y - 1;
    94                                                                   end if;   
    95                                                               end if;
    96                                                               ------------------------------------
    97                                                               --Bottom Coordinates
    98                                                               ------------------------------------
    99                                                               if (iCord.y >= newCord.bot) then
    100                                                                  if ( iCord.y <= frameSize.bot) then 
    101             1                         12                             newCord.bot <= iCord.y + 1;
    102                                                                  end if;   
    103                                                              end if;
    104                                                          end if;--iPixelEn
    105                                                          ------------------------------------
    106                                                          -- 4TH FRAME
    107                                                          ------------------------------------
    108                                                          if ((iCord.y = grid4Cord.bot) and ((iCord.x >= grid4Cord.lft) and (iCord.x <= grid4Cord.rht)))then
    109             1                    ***0***                     rgb.red        <= white;
    110             1                    ***0***                     rgb.green      <= black;
    111             1                    ***0***                     rgb.blue       <= black;
    112                                                          elsif ((iCord.y = grid4Cord.top) and ((iCord.x >= grid4Cord.lft) and (iCord.x <= grid4Cord.rht)))then
    113             1                    ***0***                     rgb.red        <= white;
    114             1                    ***0***                     rgb.green      <= black;
    115             1                    ***0***                     rgb.blue       <= black;
    116                                                          elsif ((iCord.x = grid4Cord.lft) and ((iCord.y >= grid4Cord.top) and (iCord.y <= grid4Cord.bot)))then
    117             1                    ***0***                     rgb.red        <= white;
    118             1                    ***0***                     rgb.green      <= black;
    119             1                    ***0***                     rgb.blue       <= black;
    120                                                          elsif ((iCord.x = grid4Cord.rht) and ((iCord.y >= grid4Cord.top) and (iCord.y <= grid4Cord.bot)))then
    121             1                    ***0***                     rgb.red        <= white;
    122             1                    ***0***                     rgb.green      <= black;
    123             1                    ***0***                     rgb.blue       <= black;
    124                                                          ------------------------------------
    125                                                         -- 3RD FRAME
    126                                                          ------------------------------------
    127                                                          elsif ((iCord.y = grid3Cord.bot) and ((iCord.x >= grid3Cord.lft) and (iCord.x <= grid3Cord.rht)))then
    128             1                    ***0***                     rgb.red        <= black;
    129             1                    ***0***                     rgb.green      <= white;
    130             1                    ***0***                     rgb.blue       <= black;
    131                                                          elsif ((iCord.y = grid3Cord.top) and ((iCord.x >= grid3Cord.lft) and (iCord.x <= grid3Cord.rht)))then
    132             1                    ***0***                     rgb.red        <= black;
    133             1                    ***0***                     rgb.green      <= white;
    134             1                    ***0***                     rgb.blue       <= black;
    135                                                          elsif ((iCord.x = grid3Cord.lft) and ((iCord.y >= grid3Cord.top) and (iCord.y <= grid3Cord.bot)))then
    136             1                    ***0***                     rgb.red        <= black;
    137             1                    ***0***                     rgb.green      <= white;
    138             1                    ***0***                     rgb.blue       <= black;
    139                                                          elsif ((iCord.x = grid3Cord.rht) and ((iCord.y >= grid3Cord.top) and (iCord.y <= grid3Cord.bot)))then
    140             1                    ***0***                     rgb.red        <= black;
    141             1                    ***0***                     rgb.green      <= white;
    142             1                    ***0***                     rgb.blue       <= black;
    143                                                          ------------------------------------
    144                                                          -- 2ND FRAME
    145                                                          ------------------------------------
    146                                                          elsif ((iCord.y = grid2Cord.bot) and ((iCord.x >= grid2Cord.lft) and (iCord.x <= grid3Cord.rht)))then
    147             1                    ***0***                     rgb.red        <= black;
    148             1                    ***0***                     rgb.green      <= black;
    149             1                    ***0***                     rgb.blue       <= white;
    150                                                          elsif ((iCord.y = grid2Cord.top) and ((iCord.x >= grid2Cord.lft) and (iCord.x <= grid3Cord.rht)))then
    151             1                    ***0***                     rgb.red        <= black;
    152             1                    ***0***                     rgb.green      <= black;
    153             1                    ***0***                     rgb.blue       <= white;
    154                                                          elsif ((iCord.x = grid2Cord.lft) and ((iCord.y >= grid2Cord.top) and (iCord.y <= grid2Cord.bot)))then
    155             1                    ***0***                     rgb.red        <= black;
    156             1                    ***0***                     rgb.green      <= black;
    157             1                    ***0***                     rgb.blue       <= white;
    158                                                          elsif ((iCord.x = grid3Cord.rht) and ((iCord.y >= grid2Cord.top) and (iCord.y <= grid2Cord.bot)))then
    159             1                    ***0***                     rgb.red        <= black;
    160             1                    ***0***                     rgb.green      <= black;
    161             1                    ***0***                     rgb.blue       <= white;
    162                                                          ------------------------------------
    163                                                          -- 1ST FRAME
    164                                                          ------------------------------------
    165                                                          elsif ((iCord.y = grid1Cord.bot) and ((iCord.x >= grid1Cord.lft) and (iCord.x <= grid1Cord.rht)))then
    166             1                    ***0***                     rgb.red        <= x"80";
    167             1                    ***0***                     rgb.green      <= black;
    168             1                    ***0***                     rgb.blue       <= x"80";
    169                                                          elsif ((iCord.y = grid1Cord.top) and ((iCord.x >= grid1Cord.lft) and (iCord.x <= grid1Cord.rht)))then
    170             1                    ***0***                     rgb.red        <= x"80";
    171             1                    ***0***                     rgb.green      <= black;
    172             1                    ***0***                     rgb.blue       <= x"80";
    173                                                          elsif ((iCord.x = grid1Cord.lft) and ((iCord.y >= grid1Cord.top) and (iCord.y <= grid1Cord.bot)))then
    174             1                    ***0***                     rgb.red        <= x"80";
    175             1                    ***0***                     rgb.green      <= black;
    176             1                    ***0***                     rgb.blue       <= x"80";
    177                                                          elsif ((iCord.x = grid1Cord.rht) and ((iCord.y >= grid1Cord.top) and (iCord.y <= grid1Cord.bot)))then
    178             1                    ***0***                     rgb.red        <= x"80";
    179             1                    ***0***                     rgb.green      <= black;
    180             1                    ***0***                     rgb.blue       <= x"80";
    181                                                          else
    182             1                         76                     rgb.red        <= iRgb.red;
    183             1                         76                     rgb.green      <= iRgb.green;
    184             1                         76                     rgb.blue       <= iRgb.blue;
    185                                                          end if;
    186                                                      end if;--iRgb.valid
    187                                                      if (iEof = hi)then
    188                                                          --RESET COORDINATES TO DEFAULT
    189             1                         75                 newCord.lft       <= initCord.lft;
    190             1                         75                 newCord.rht       <= initCord.rht;
    191             1                         75                 newCord.top       <= initCord.top;
    192             1                         75                 newCord.bot       <= initCord.bot;
    193                                                          -- 1ST FRAME
    194             1                         75                 grid1Cord.lft     <= newCord.lft;
    195             1                         75                 grid1Cord.rht     <= newCord.rht;
    196             1                         75                 grid1Cord.top     <= newCord.top;
    197             1                         75                 grid1Cord.bot     <= newCord.bot;
    198                                                          -- 2ND FRAME
    199             1                         75                 grid2Cord.lft     <= grid1Cord.lft;
    200             1                         75                 grid2Cord.rht     <= grid1Cord.rht;
    201             1                         75                 grid2Cord.top     <= grid1Cord.top;
    202             1                         75                 grid2Cord.bot     <= grid1Cord.bot;
    203                                                          -- 3RD FRAME
    204             1                         75                 grid3Cord.lft     <= grid2Cord.lft;
    205             1                         75                 grid3Cord.rht     <= grid2Cord.rht;
    206             1                         75                 grid3Cord.top     <= grid2Cord.top;
    207             1                         75                 grid3Cord.bot     <= grid2Cord.bot;
    208                                                          -- 4TH FRAME
    209             1                         75                 grid4Cord.lft     <= grid3Cord.lft;
    210             1                         75                 grid4Cord.rht     <= grid3Cord.rht;
    211             1                         75                 grid4Cord.top     <= grid3Cord.top;
    212             1                         75                 grid4Cord.bot     <= grid3Cord.bot;
    213                                                      end if;--iEof
    214                                                  end if;
    215                                              end process pixelCordP;
    216                                              end architecture;

Branch Coverage:
    Enabled Coverage            Active      Hits    Misses % Covered
    ----------------            ------      ----    ------ ---------
    Branches                        41        24        17      58.5

================================Branch Details================================

Branch Coverage for file ../modules/dut/pixelCord.vhd --

------------------------------------IF Branch------------------------------------
    60                                       124     Count coming in to IF
    60              1                        124         if rising_edge(clk) then
                                            ECOP     All False Count
Branch totals: 1 hit of 1 branch = 100.0%

------------------------------------IF Branch------------------------------------
    68                                       147     Count coming in to IF
    68              1                        147         if rising_edge(clk) then
                                            ECOP     All False Count
Branch totals: 1 hit of 1 branch = 100.0%

------------------------------------IF Branch------------------------------------
    69                                       147     Count coming in to IF
    69              1                         76             if (iRgb.valid = hi) then
                                              71     All False Count
Branch totals: 2 hits of 2 branches = 100.0%

------------------------------------IF Branch------------------------------------
    71                                        76     Count coming in to IF
    71              1                         38                 if (iPixelEn = hi) then 
                                              38     All False Count
Branch totals: 2 hits of 2 branches = 100.0%

------------------------------------IF Branch------------------------------------
    75                                        38     Count coming in to IF
    75              1                         20                     if (iCord.x <= newCord.lft) then
                                              18     All False Count
Branch totals: 2 hits of 2 branches = 100.0%

------------------------------------IF Branch------------------------------------
    76                                        20     Count coming in to IF
    76              1                         20                         if ( iCord.x >= frameSize.lft) then 
                                         ***0***     All False Count
Branch totals: 1 hit of 2 branches = 50.0%

------------------------------------IF Branch------------------------------------
    83                                        38     Count coming in to IF
    83              1                         23                     if (iCord.x >= newCord.rht) then
                                              15     All False Count
Branch totals: 2 hits of 2 branches = 100.0%

------------------------------------IF Branch------------------------------------
    84                                        23     Count coming in to IF
    84              1                         19                         if ( iCord.x <= frameSize.rht) then 
                                               4     All False Count
Branch totals: 2 hits of 2 branches = 100.0%

------------------------------------IF Branch------------------------------------
    91                                        38     Count coming in to IF
    91              1                         22                     if (iCord.y <= newCord.top) then
                                              16     All False Count
Branch totals: 2 hits of 2 branches = 100.0%

------------------------------------IF Branch------------------------------------
    92                                        22     Count coming in to IF
    92              1                         20                         if ( iCord.y >= frameSize.top) then 
                                               2     All False Count
Branch totals: 2 hits of 2 branches = 100.0%

------------------------------------IF Branch------------------------------------
    99                                        38     Count coming in to IF
    99              1                         28                     if (iCord.y >= newCord.bot) then
                                              10     All False Count
Branch totals: 2 hits of 2 branches = 100.0%

------------------------------------IF Branch------------------------------------
    100                                       28     Count coming in to IF
    100             1                         12                         if ( iCord.y <= frameSize.bot) then 
                                              16     All False Count
Branch totals: 2 hits of 2 branches = 100.0%

------------------------------------IF Branch------------------------------------
    108                                       76     Count coming in to IF
    108             1                    ***0***                 if ((iCord.y = grid4Cord.bot) and ((iCord.x >= grid4Cord.lft) and (iCord.x <= grid4Cord.rht)))then
    112             1                    ***0***                 elsif ((iCord.y = grid4Cord.top) and ((iCord.x >= grid4Cord.lft) and (iCord.x <= grid4Cord.rht)))then
    116             1                    ***0***                 elsif ((iCord.x = grid4Cord.lft) and ((iCord.y >= grid4Cord.top) and (iCord.y <= grid4Cord.bot)))then
    120             1                    ***0***                 elsif ((iCord.x = grid4Cord.rht) and ((iCord.y >= grid4Cord.top) and (iCord.y <= grid4Cord.bot)))then
    127             1                    ***0***                 elsif ((iCord.y = grid3Cord.bot) and ((iCord.x >= grid3Cord.lft) and (iCord.x <= grid3Cord.rht)))then
    131             1                    ***0***                 elsif ((iCord.y = grid3Cord.top) and ((iCord.x >= grid3Cord.lft) and (iCord.x <= grid3Cord.rht)))then
    135             1                    ***0***                 elsif ((iCord.x = grid3Cord.lft) and ((iCord.y >= grid3Cord.top) and (iCord.y <= grid3Cord.bot)))then
    139             1                    ***0***                 elsif ((iCord.x = grid3Cord.rht) and ((iCord.y >= grid3Cord.top) and (iCord.y <= grid3Cord.bot)))then
    146             1                    ***0***                 elsif ((iCord.y = grid2Cord.bot) and ((iCord.x >= grid2Cord.lft) and (iCord.x <= grid3Cord.rht)))then
    150             1                    ***0***                 elsif ((iCord.y = grid2Cord.top) and ((iCord.x >= grid2Cord.lft) and (iCord.x <= grid3Cord.rht)))then
    154             1                    ***0***                 elsif ((iCord.x = grid2Cord.lft) and ((iCord.y >= grid2Cord.top) and (iCord.y <= grid2Cord.bot)))then
    158             1                    ***0***                 elsif ((iCord.x = grid3Cord.rht) and ((iCord.y >= grid2Cord.top) and (iCord.y <= grid2Cord.bot)))then
    165             1                    ***0***                 elsif ((iCord.y = grid1Cord.bot) and ((iCord.x >= grid1Cord.lft) and (iCord.x <= grid1Cord.rht)))then
    169             1                    ***0***                 elsif ((iCord.y = grid1Cord.top) and ((iCord.x >= grid1Cord.lft) and (iCord.x <= grid1Cord.rht)))then
    173             1                    ***0***                 elsif ((iCord.x = grid1Cord.lft) and ((iCord.y >= grid1Cord.top) and (iCord.y <= grid1Cord.bot)))then
    177             1                    ***0***                 elsif ((iCord.x = grid1Cord.rht) and ((iCord.y >= grid1Cord.top) and (iCord.y <= grid1Cord.bot)))then
    181             1                         76                 else
Branch totals: 1 hit of 17 branches = 5.8%

------------------------------------IF Branch------------------------------------
    187                                      147     Count coming in to IF
    187             1                         75             if (iEof = hi)then
                                              72     All False Count
Branch totals: 2 hits of 2 branches = 100.0%


Condition Coverage:
    Enabled Coverage            Active   Covered    Misses % Covered
    ----------------            ------      ----    ------ ---------
    FEC Condition Terms             48         0        48       0.0

================================Condition Details================================

Condition Coverage for file ../modules/dut/pixelCord.vhd --

----------------Focused Condition View-------------------
Line       108 Item    1  ((iCord.y = grid4Cord.bot) and ((iCord.x >= grid4Cord.lft) and (iCord.x <= grid4Cord.rht)))
Condition totals: 0 of 3 input terms covered = 0.0%

                  Input Term   Covered  Reason for no coverage   Hint
                 -----------  --------  -----------------------  --------------
   (iCord.y = grid4Cord.bot)         N  '_1' not hit             Hit '_1'
  (iCord.x >= grid4Cord.lft)         N  No hits                  Hit '_0' and '_1'
  (iCord.x <= grid4Cord.rht)         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target                    Non-masking condition(s)      
 ---------  ---------  --------------------          -------------------------     
  Row   1:          1  (iCord.y = grid4Cord.bot)_0   -                             
  Row   2:    ***0***  (iCord.y = grid4Cord.bot)_1   ((iCord.x >= grid4Cord.lft) and (iCord.x <= grid4Cord.rht))
  Row   3:    ***0***  (iCord.x >= grid4Cord.lft)_0  (iCord.y = grid4Cord.bot)     
  Row   4:    ***0***  (iCord.x >= grid4Cord.lft)_1  (iCord.y = grid4Cord.bot) && (iCord.x <= grid4Cord.rht)
  Row   5:    ***0***  (iCord.x <= grid4Cord.rht)_0  (iCord.y = grid4Cord.bot) && (iCord.x >= grid4Cord.lft)
  Row   6:    ***0***  (iCord.x <= grid4Cord.rht)_1  (iCord.y = grid4Cord.bot) && (iCord.x >= grid4Cord.lft)

----------------Focused Condition View-------------------
Line       112 Item    1  ((iCord.y = grid4Cord.top) and ((iCord.x >= grid4Cord.lft) and (iCord.x <= grid4Cord.rht)))
Condition totals: 0 of 3 input terms covered = 0.0%

                  Input Term   Covered  Reason for no coverage   Hint
                 -----------  --------  -----------------------  --------------
   (iCord.y = grid4Cord.top)         N  '_1' not hit             Hit '_1'
  (iCord.x >= grid4Cord.lft)         N  No hits                  Hit '_0' and '_1'
  (iCord.x <= grid4Cord.rht)         N  '_1' not hit             Hit '_1'

     Rows:       Hits  FEC Target                    Non-masking condition(s)      
 ---------  ---------  --------------------          -------------------------     
  Row   1:          1  (iCord.y = grid4Cord.top)_0   -                             
  Row   2:    ***0***  (iCord.y = grid4Cord.top)_1   ((iCord.x >= grid4Cord.lft) and (iCord.x <= grid4Cord.rht))
  Row   3:    ***0***  (iCord.x >= grid4Cord.lft)_0  (iCord.y = grid4Cord.top)     
  Row   4:    ***0***  (iCord.x >= grid4Cord.lft)_1  (iCord.y = grid4Cord.top) && (iCord.x <= grid4Cord.rht)
  Row   5:          1  (iCord.x <= grid4Cord.rht)_0  (iCord.y = grid4Cord.top) && (iCord.x >= grid4Cord.lft)
  Row   6:    ***0***  (iCord.x <= grid4Cord.rht)_1  (iCord.y = grid4Cord.top) && (iCord.x >= grid4Cord.lft)

----------------Focused Condition View-------------------
Line       116 Item    1  ((iCord.x = grid4Cord.lft) and ((iCord.y >= grid4Cord.top) and (iCord.y <= grid4Cord.bot)))
Condition totals: 0 of 3 input terms covered = 0.0%

                  Input Term   Covered  Reason for no coverage   Hint
                 -----------  --------  -----------------------  --------------
   (iCord.x = grid4Cord.lft)         N  '_1' not hit             Hit '_1'
  (iCord.y >= grid4Cord.top)         N  No hits                  Hit '_0' and '_1'
  (iCord.y <= grid4Cord.bot)         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target                    Non-masking condition(s)      
 ---------  ---------  --------------------          -------------------------     
  Row   1:          1  (iCord.x = grid4Cord.lft)_0   -                             
  Row   2:    ***0***  (iCord.x = grid4Cord.lft)_1   ((iCord.y >= grid4Cord.top) and (iCord.y <= grid4Cord.bot))
  Row   3:    ***0***  (iCord.y >= grid4Cord.top)_0  (iCord.x = grid4Cord.lft)     
  Row   4:    ***0***  (iCord.y >= grid4Cord.top)_1  (iCord.x = grid4Cord.lft) && (iCord.y <= grid4Cord.bot)
  Row   5:    ***0***  (iCord.y <= grid4Cord.bot)_0  (iCord.x = grid4Cord.lft) && (iCord.y >= grid4Cord.top)
  Row   6:    ***0***  (iCord.y <= grid4Cord.bot)_1  (iCord.x = grid4Cord.lft) && (iCord.y >= grid4Cord.top)

----------------Focused Condition View-------------------
Line       120 Item    1  ((iCord.x = grid4Cord.rht) and ((iCord.y >= grid4Cord.top) and (iCord.y <= grid4Cord.bot)))
Condition totals: 0 of 3 input terms covered = 0.0%

                  Input Term   Covered  Reason for no coverage   Hint
                 -----------  --------  -----------------------  --------------
   (iCord.x = grid4Cord.rht)         N  '_1' not hit             Hit '_1'
  (iCord.y >= grid4Cord.top)         N  No hits                  Hit '_0' and '_1'
  (iCord.y <= grid4Cord.bot)         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target                    Non-masking condition(s)      
 ---------  ---------  --------------------          -------------------------     
  Row   1:          1  (iCord.x = grid4Cord.rht)_0   -                             
  Row   2:    ***0***  (iCord.x = grid4Cord.rht)_1   ((iCord.y >= grid4Cord.top) and (iCord.y <= grid4Cord.bot))
  Row   3:    ***0***  (iCord.y >= grid4Cord.top)_0  (iCord.x = grid4Cord.rht)     
  Row   4:    ***0***  (iCord.y >= grid4Cord.top)_1  (iCord.x = grid4Cord.rht) && (iCord.y <= grid4Cord.bot)
  Row   5:    ***0***  (iCord.y <= grid4Cord.bot)_0  (iCord.x = grid4Cord.rht) && (iCord.y >= grid4Cord.top)
  Row   6:    ***0***  (iCord.y <= grid4Cord.bot)_1  (iCord.x = grid4Cord.rht) && (iCord.y >= grid4Cord.top)

----------------Focused Condition View-------------------
Line       127 Item    1  ((iCord.y = grid3Cord.bot) and ((iCord.x >= grid3Cord.lft) and (iCord.x <= grid3Cord.rht)))
Condition totals: 0 of 3 input terms covered = 0.0%

                  Input Term   Covered  Reason for no coverage   Hint
                 -----------  --------  -----------------------  --------------
   (iCord.y = grid3Cord.bot)         N  '_1' not hit             Hit '_1'
  (iCord.x >= grid3Cord.lft)         N  No hits                  Hit '_0' and '_1'
  (iCord.x <= grid3Cord.rht)         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target                    Non-masking condition(s)      
 ---------  ---------  --------------------          -------------------------     
  Row   1:          1  (iCord.y = grid3Cord.bot)_0   -                             
  Row   2:    ***0***  (iCord.y = grid3Cord.bot)_1   ((iCord.x >= grid3Cord.lft) and (iCord.x <= grid3Cord.rht))
  Row   3:    ***0***  (iCord.x >= grid3Cord.lft)_0  (iCord.y = grid3Cord.bot)     
  Row   4:    ***0***  (iCord.x >= grid3Cord.lft)_1  (iCord.y = grid3Cord.bot) && (iCord.x <= grid3Cord.rht)
  Row   5:    ***0***  (iCord.x <= grid3Cord.rht)_0  (iCord.y = grid3Cord.bot) && (iCord.x >= grid3Cord.lft)
  Row   6:    ***0***  (iCord.x <= grid3Cord.rht)_1  (iCord.y = grid3Cord.bot) && (iCord.x >= grid3Cord.lft)

----------------Focused Condition View-------------------
Line       131 Item    1  ((iCord.y = grid3Cord.top) and ((iCord.x >= grid3Cord.lft) and (iCord.x <= grid3Cord.rht)))
Condition totals: 0 of 3 input terms covered = 0.0%

                  Input Term   Covered  Reason for no coverage   Hint
                 -----------  --------  -----------------------  --------------
   (iCord.y = grid3Cord.top)         N  '_1' not hit             Hit '_1'
  (iCord.x >= grid3Cord.lft)         N  No hits                  Hit '_0' and '_1'
  (iCord.x <= grid3Cord.rht)         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target                    Non-masking condition(s)      
 ---------  ---------  --------------------          -------------------------     
  Row   1:          1  (iCord.y = grid3Cord.top)_0   -                             
  Row   2:    ***0***  (iCord.y = grid3Cord.top)_1   ((iCord.x >= grid3Cord.lft) and (iCord.x <= grid3Cord.rht))
  Row   3:    ***0***  (iCord.x >= grid3Cord.lft)_0  (iCord.y = grid3Cord.top)     
  Row   4:    ***0***  (iCord.x >= grid3Cord.lft)_1  (iCord.y = grid3Cord.top) && (iCord.x <= grid3Cord.rht)
  Row   5:    ***0***  (iCord.x <= grid3Cord.rht)_0  (iCord.y = grid3Cord.top) && (iCord.x >= grid3Cord.lft)
  Row   6:    ***0***  (iCord.x <= grid3Cord.rht)_1  (iCord.y = grid3Cord.top) && (iCord.x >= grid3Cord.lft)

----------------Focused Condition View-------------------
Line       135 Item    1  ((iCord.x = grid3Cord.lft) and ((iCord.y >= grid3Cord.top) and (iCord.y <= grid3Cord.bot)))
Condition totals: 0 of 3 input terms covered = 0.0%

                  Input Term   Covered  Reason for no coverage   Hint
                 -----------  --------  -----------------------  --------------
   (iCord.x = grid3Cord.lft)         N  '_1' not hit             Hit '_1'
  (iCord.y >= grid3Cord.top)         N  No hits                  Hit '_0' and '_1'
  (iCord.y <= grid3Cord.bot)         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target                    Non-masking condition(s)      
 ---------  ---------  --------------------          -------------------------     
  Row   1:          1  (iCord.x = grid3Cord.lft)_0   -                             
  Row   2:    ***0***  (iCord.x = grid3Cord.lft)_1   ((iCord.y >= grid3Cord.top) and (iCord.y <= grid3Cord.bot))
  Row   3:    ***0***  (iCord.y >= grid3Cord.top)_0  (iCord.x = grid3Cord.lft)     
  Row   4:    ***0***  (iCord.y >= grid3Cord.top)_1  (iCord.x = grid3Cord.lft) && (iCord.y <= grid3Cord.bot)
  Row   5:    ***0***  (iCord.y <= grid3Cord.bot)_0  (iCord.x = grid3Cord.lft) && (iCord.y >= grid3Cord.top)
  Row   6:    ***0***  (iCord.y <= grid3Cord.bot)_1  (iCord.x = grid3Cord.lft) && (iCord.y >= grid3Cord.top)

----------------Focused Condition View-------------------
Line       139 Item    1  ((iCord.x = grid3Cord.rht) and ((iCord.y >= grid3Cord.top) and (iCord.y <= grid3Cord.bot)))
Condition totals: 0 of 3 input terms covered = 0.0%

                  Input Term   Covered  Reason for no coverage   Hint
                 -----------  --------  -----------------------  --------------
   (iCord.x = grid3Cord.rht)         N  '_1' not hit             Hit '_1'
  (iCord.y >= grid3Cord.top)         N  No hits                  Hit '_0' and '_1'
  (iCord.y <= grid3Cord.bot)         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target                    Non-masking condition(s)      
 ---------  ---------  --------------------          -------------------------     
  Row   1:          1  (iCord.x = grid3Cord.rht)_0   -                             
  Row   2:    ***0***  (iCord.x = grid3Cord.rht)_1   ((iCord.y >= grid3Cord.top) and (iCord.y <= grid3Cord.bot))
  Row   3:    ***0***  (iCord.y >= grid3Cord.top)_0  (iCord.x = grid3Cord.rht)     
  Row   4:    ***0***  (iCord.y >= grid3Cord.top)_1  (iCord.x = grid3Cord.rht) && (iCord.y <= grid3Cord.bot)
  Row   5:    ***0***  (iCord.y <= grid3Cord.bot)_0  (iCord.x = grid3Cord.rht) && (iCord.y >= grid3Cord.top)
  Row   6:    ***0***  (iCord.y <= grid3Cord.bot)_1  (iCord.x = grid3Cord.rht) && (iCord.y >= grid3Cord.top)

----------------Focused Condition View-------------------
Line       146 Item    1  ((iCord.y = grid2Cord.bot) and ((iCord.x >= grid2Cord.lft) and (iCord.x <= grid3Cord.rht)))
Condition totals: 0 of 3 input terms covered = 0.0%

                  Input Term   Covered  Reason for no coverage   Hint
                 -----------  --------  -----------------------  --------------
   (iCord.y = grid2Cord.bot)         N  '_1' not hit             Hit '_1'
  (iCord.x >= grid2Cord.lft)         N  No hits                  Hit '_0' and '_1'
  (iCord.x <= grid3Cord.rht)         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target                    Non-masking condition(s)      
 ---------  ---------  --------------------          -------------------------     
  Row   1:          1  (iCord.y = grid2Cord.bot)_0   -                             
  Row   2:    ***0***  (iCord.y = grid2Cord.bot)_1   ((iCord.x >= grid2Cord.lft) and (iCord.x <= grid3Cord.rht))
  Row   3:    ***0***  (iCord.x >= grid2Cord.lft)_0  (iCord.y = grid2Cord.bot)     
  Row   4:    ***0***  (iCord.x >= grid2Cord.lft)_1  (iCord.y = grid2Cord.bot) && (iCord.x <= grid3Cord.rht)
  Row   5:    ***0***  (iCord.x <= grid3Cord.rht)_0  (iCord.y = grid2Cord.bot) && (iCord.x >= grid2Cord.lft)
  Row   6:    ***0***  (iCord.x <= grid3Cord.rht)_1  (iCord.y = grid2Cord.bot) && (iCord.x >= grid2Cord.lft)

----------------Focused Condition View-------------------
Line       150 Item    1  ((iCord.y = grid2Cord.top) and ((iCord.x >= grid2Cord.lft) and (iCord.x <= grid3Cord.rht)))
Condition totals: 0 of 3 input terms covered = 0.0%

                  Input Term   Covered  Reason for no coverage   Hint
                 -----------  --------  -----------------------  --------------
   (iCord.y = grid2Cord.top)         N  '_1' not hit             Hit '_1'
  (iCord.x >= grid2Cord.lft)         N  No hits                  Hit '_0' and '_1'
  (iCord.x <= grid3Cord.rht)         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target                    Non-masking condition(s)      
 ---------  ---------  --------------------          -------------------------     
  Row   1:          1  (iCord.y = grid2Cord.top)_0   -                             
  Row   2:    ***0***  (iCord.y = grid2Cord.top)_1   ((iCord.x >= grid2Cord.lft) and (iCord.x <= grid3Cord.rht))
  Row   3:    ***0***  (iCord.x >= grid2Cord.lft)_0  (iCord.y = grid2Cord.top)     
  Row   4:    ***0***  (iCord.x >= grid2Cord.lft)_1  (iCord.y = grid2Cord.top) && (iCord.x <= grid3Cord.rht)
  Row   5:    ***0***  (iCord.x <= grid3Cord.rht)_0  (iCord.y = grid2Cord.top) && (iCord.x >= grid2Cord.lft)
  Row   6:    ***0***  (iCord.x <= grid3Cord.rht)_1  (iCord.y = grid2Cord.top) && (iCord.x >= grid2Cord.lft)

----------------Focused Condition View-------------------
Line       154 Item    1  ((iCord.x = grid2Cord.lft) and ((iCord.y >= grid2Cord.top) and (iCord.y <= grid2Cord.bot)))
Condition totals: 0 of 3 input terms covered = 0.0%

                  Input Term   Covered  Reason for no coverage   Hint
                 -----------  --------  -----------------------  --------------
   (iCord.x = grid2Cord.lft)         N  '_1' not hit             Hit '_1'
  (iCord.y >= grid2Cord.top)         N  No hits                  Hit '_0' and '_1'
  (iCord.y <= grid2Cord.bot)         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target                    Non-masking condition(s)      
 ---------  ---------  --------------------          -------------------------     
  Row   1:          1  (iCord.x = grid2Cord.lft)_0   -                             
  Row   2:    ***0***  (iCord.x = grid2Cord.lft)_1   ((iCord.y >= grid2Cord.top) and (iCord.y <= grid2Cord.bot))
  Row   3:    ***0***  (iCord.y >= grid2Cord.top)_0  (iCord.x = grid2Cord.lft)     
  Row   4:    ***0***  (iCord.y >= grid2Cord.top)_1  (iCord.x = grid2Cord.lft) && (iCord.y <= grid2Cord.bot)
  Row   5:    ***0***  (iCord.y <= grid2Cord.bot)_0  (iCord.x = grid2Cord.lft) && (iCord.y >= grid2Cord.top)
  Row   6:    ***0***  (iCord.y <= grid2Cord.bot)_1  (iCord.x = grid2Cord.lft) && (iCord.y >= grid2Cord.top)

----------------Focused Condition View-------------------
Line       158 Item    1  ((iCord.x = grid3Cord.rht) and ((iCord.y >= grid2Cord.top) and (iCord.y <= grid2Cord.bot)))
Condition totals: 0 of 3 input terms covered = 0.0%

                  Input Term   Covered  Reason for no coverage   Hint
                 -----------  --------  -----------------------  --------------
   (iCord.x = grid3Cord.rht)         N  '_1' not hit             Hit '_1'
  (iCord.y >= grid2Cord.top)         N  No hits                  Hit '_0' and '_1'
  (iCord.y <= grid2Cord.bot)         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target                    Non-masking condition(s)      
 ---------  ---------  --------------------          -------------------------     
  Row   1:          1  (iCord.x = grid3Cord.rht)_0   -                             
  Row   2:    ***0***  (iCord.x = grid3Cord.rht)_1   ((iCord.y >= grid2Cord.top) and (iCord.y <= grid2Cord.bot))
  Row   3:    ***0***  (iCord.y >= grid2Cord.top)_0  (iCord.x = grid3Cord.rht)     
  Row   4:    ***0***  (iCord.y >= grid2Cord.top)_1  (iCord.x = grid3Cord.rht) && (iCord.y <= grid2Cord.bot)
  Row   5:    ***0***  (iCord.y <= grid2Cord.bot)_0  (iCord.x = grid3Cord.rht) && (iCord.y >= grid2Cord.top)
  Row   6:    ***0***  (iCord.y <= grid2Cord.bot)_1  (iCord.x = grid3Cord.rht) && (iCord.y >= grid2Cord.top)

----------------Focused Condition View-------------------
Line       165 Item    1  ((iCord.y = grid1Cord.bot) and ((iCord.x >= grid1Cord.lft) and (iCord.x <= grid1Cord.rht)))
Condition totals: 0 of 3 input terms covered = 0.0%

                  Input Term   Covered  Reason for no coverage   Hint
                 -----------  --------  -----------------------  --------------
   (iCord.y = grid1Cord.bot)         N  '_1' not hit             Hit '_1'
  (iCord.x >= grid1Cord.lft)         N  No hits                  Hit '_0' and '_1'
  (iCord.x <= grid1Cord.rht)         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target                    Non-masking condition(s)      
 ---------  ---------  --------------------          -------------------------     
  Row   1:          1  (iCord.y = grid1Cord.bot)_0   -                             
  Row   2:    ***0***  (iCord.y = grid1Cord.bot)_1   ((iCord.x >= grid1Cord.lft) and (iCord.x <= grid1Cord.rht))
  Row   3:    ***0***  (iCord.x >= grid1Cord.lft)_0  (iCord.y = grid1Cord.bot)     
  Row   4:    ***0***  (iCord.x >= grid1Cord.lft)_1  (iCord.y = grid1Cord.bot) && (iCord.x <= grid1Cord.rht)
  Row   5:    ***0***  (iCord.x <= grid1Cord.rht)_0  (iCord.y = grid1Cord.bot) && (iCord.x >= grid1Cord.lft)
  Row   6:    ***0***  (iCord.x <= grid1Cord.rht)_1  (iCord.y = grid1Cord.bot) && (iCord.x >= grid1Cord.lft)

----------------Focused Condition View-------------------
Line       169 Item    1  ((iCord.y = grid1Cord.top) and ((iCord.x >= grid1Cord.lft) and (iCord.x <= grid1Cord.rht)))
Condition totals: 0 of 3 input terms covered = 0.0%

                  Input Term   Covered  Reason for no coverage   Hint
                 -----------  --------  -----------------------  --------------
   (iCord.y = grid1Cord.top)         N  '_1' not hit             Hit '_1'
  (iCord.x >= grid1Cord.lft)         N  No hits                  Hit '_0' and '_1'
  (iCord.x <= grid1Cord.rht)         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target                    Non-masking condition(s)      
 ---------  ---------  --------------------          -------------------------     
  Row   1:          1  (iCord.y = grid1Cord.top)_0   -                             
  Row   2:    ***0***  (iCord.y = grid1Cord.top)_1   ((iCord.x >= grid1Cord.lft) and (iCord.x <= grid1Cord.rht))
  Row   3:    ***0***  (iCord.x >= grid1Cord.lft)_0  (iCord.y = grid1Cord.top)     
  Row   4:    ***0***  (iCord.x >= grid1Cord.lft)_1  (iCord.y = grid1Cord.top) && (iCord.x <= grid1Cord.rht)
  Row   5:    ***0***  (iCord.x <= grid1Cord.rht)_0  (iCord.y = grid1Cord.top) && (iCord.x >= grid1Cord.lft)
  Row   6:    ***0***  (iCord.x <= grid1Cord.rht)_1  (iCord.y = grid1Cord.top) && (iCord.x >= grid1Cord.lft)

----------------Focused Condition View-------------------
Line       173 Item    1  ((iCord.x = grid1Cord.lft) and ((iCord.y >= grid1Cord.top) and (iCord.y <= grid1Cord.bot)))
Condition totals: 0 of 3 input terms covered = 0.0%

                  Input Term   Covered  Reason for no coverage   Hint
                 -----------  --------  -----------------------  --------------
   (iCord.x = grid1Cord.lft)         N  '_1' not hit             Hit '_1'
  (iCord.y >= grid1Cord.top)         N  No hits                  Hit '_0' and '_1'
  (iCord.y <= grid1Cord.bot)         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target                    Non-masking condition(s)      
 ---------  ---------  --------------------          -------------------------     
  Row   1:          1  (iCord.x = grid1Cord.lft)_0   -                             
  Row   2:    ***0***  (iCord.x = grid1Cord.lft)_1   ((iCord.y >= grid1Cord.top) and (iCord.y <= grid1Cord.bot))
  Row   3:    ***0***  (iCord.y >= grid1Cord.top)_0  (iCord.x = grid1Cord.lft)     
  Row   4:    ***0***  (iCord.y >= grid1Cord.top)_1  (iCord.x = grid1Cord.lft) && (iCord.y <= grid1Cord.bot)
  Row   5:    ***0***  (iCord.y <= grid1Cord.bot)_0  (iCord.x = grid1Cord.lft) && (iCord.y >= grid1Cord.top)
  Row   6:    ***0***  (iCord.y <= grid1Cord.bot)_1  (iCord.x = grid1Cord.lft) && (iCord.y >= grid1Cord.top)

----------------Focused Condition View-------------------
Line       177 Item    1  ((iCord.x = grid1Cord.rht) and ((iCord.y >= grid1Cord.top) and (iCord.y <= grid1Cord.bot)))
Condition totals: 0 of 3 input terms covered = 0.0%

                  Input Term   Covered  Reason for no coverage   Hint
                 -----------  --------  -----------------------  --------------
   (iCord.x = grid1Cord.rht)         N  '_1' not hit             Hit '_1'
  (iCord.y >= grid1Cord.top)         N  No hits                  Hit '_0' and '_1'
  (iCord.y <= grid1Cord.bot)         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target                    Non-masking condition(s)      
 ---------  ---------  --------------------          -------------------------     
  Row   1:          1  (iCord.x = grid1Cord.rht)_0   -                             
  Row   2:    ***0***  (iCord.x = grid1Cord.rht)_1   ((iCord.y >= grid1Cord.top) and (iCord.y <= grid1Cord.bot))
  Row   3:    ***0***  (iCord.y >= grid1Cord.top)_0  (iCord.x = grid1Cord.rht)     
  Row   4:    ***0***  (iCord.y >= grid1Cord.top)_1  (iCord.x = grid1Cord.rht) && (iCord.y <= grid1Cord.bot)
  Row   5:    ***0***  (iCord.y <= grid1Cord.bot)_0  (iCord.x = grid1Cord.rht) && (iCord.y >= grid1Cord.top)
  Row   6:    ***0***  (iCord.y <= grid1Cord.bot)_1  (iCord.x = grid1Cord.rht) && (iCord.y >= grid1Cord.top)


Expression Coverage:
    Enabled Coverage            Active   Covered    Misses % Covered
    ----------------            ------      ----    ------ ---------
    FEC Expression Terms             0         0         0     100.0
FSM Coverage:
    Enabled Coverage            Active      Hits    Misses % Covered
    ----------------            ------      ----    ------ ---------
    FSMs                                                       100.0
        States                       0         0         0     100.0
        Transitions                  0         0         0     100.0

=================================================================================
=== File: ../modules/dut/template.v
=================================================================================
Statement Coverage:
    Enabled Coverage            Active      Hits    Misses % Covered
    ----------------            ------      ----    ------ ---------
    Stmts                           24         8        16      33.3

================================Statement Details================================

Statement Coverage for file ../modules/dut/template.v --

    1                                                module template(input wire clk,
    2                                                		   input wire en_i,
    3                                                		   input wire ina,
    4                                                		   input wire inb,
    5                                                		   output reg en_o,
    6                                                		   output reg out);
    7                                                	integer counter, state;
    8                                                	reg[1:0] temp_a, temp_b;
    9                                                	reg[2:0] temp_out;
    10                                               	//Init
    11                                               	initial begin
    12              1                          1     		counter = 0;
    13              1                          1     		temp_a = 2'b00;
    14              1                          1     		temp_b = 2'b00;
    15              1                          1     		temp_out = 3'b000;
    16              1                          1     		out = 1;
    17              1                          1     		en_o <= 0;
    18              1                          1     		state = 0;
    19                                               	end
    20              1                        220     	always@(posedge clk)
    21                                               	begin
    22                                               		//State 0: Wait for en_i
    23                                               		if(en_i==1'b1)
    24                                               		begin
    25              1                    ***0***     			state = 1;
    26                                               		end
    27                                               		case(state)
    28                                               			//State 1: Start reading inputs
    29                                               			1: begin
    30              1                    ***0***     				temp_a = temp_a << 1;
    31              1                    ***0***     				temp_a = temp_a | ina;
    32              1                    ***0***     				temp_b = temp_b << 1;
    33              1                    ***0***     				temp_b = temp_b | inb;
    34              1                    ***0***     				counter = counter + 1;
    35                                               				//After 2 bits, do the operation an move to the next state
    36                                               				if(counter==2) begin
    37              1                    ***0***     					temp_out = temp_a + temp_b;
    38              1                    ***0***     					state = 2;
    39                                               				end
    40                                               			end
    41                                               			//State 2: Enable en_o and sends result to the output
    42                                               			2: begin
    43              1                    ***0***     				out <= temp_out[2];
    44              1                    ***0***     				temp_out = temp_out << 1;
    45              1                    ***0***     				counter = counter + 1;
    46              1                    ***0***     				if(counter==3) en_o <= 1'b1;
    47              1                    ***0***     				if(counter==4) en_o <= 1'b0;
    48                                               				if(counter==6) begin
    49              1                    ***0***     					counter = 0;
    50              1                    ***0***     					out <= 1'b1;
    51              1                    ***0***     					state = 0;
    52                                               				end
    53                                               			end
    54                                               		endcase
    55                                               	end
    56                                               endmodule

Branch Coverage:
    Enabled Coverage            Active      Hits    Misses % Covered
    ----------------            ------      ----    ------ ---------
    Branches                        13         2        11      15.3

================================Branch Details================================

Branch Coverage for file ../modules/dut/template.v --

------------------------------------IF Branch------------------------------------
    23                                       220     Count coming in to IF
    23              1                    ***0***     		if(en_i==1'b1)
                                             220     All False Count
Branch totals: 1 hit of 2 branches = 50.0%

------------------------------------CASE Branch------------------------------------
    27                                       220     Count coming in to CASE
    29              1                    ***0***     			1: begin
    42              1                    ***0***     			2: begin
                                             220     All False Count
Branch totals: 1 hit of 3 branches = 33.3%

------------------------------------IF Branch------------------------------------
    36                                   ***0***     Count coming in to IF
    36              1                    ***0***     				if(counter==2) begin
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.0%

------------------------------------IF Branch------------------------------------
    46                                   ***0***     Count coming in to IF
    46              1                    ***0***     				if(counter==3) en_o <= 1'b1;
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.0%

------------------------------------IF Branch------------------------------------
    47                                   ***0***     Count coming in to IF
    47              1                    ***0***     				if(counter==4) en_o <= 1'b0;
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.0%

------------------------------------IF Branch------------------------------------
    48                                   ***0***     Count coming in to IF
    48              1                    ***0***     				if(counter==6) begin
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.0%


Condition Coverage:
    Enabled Coverage            Active   Covered    Misses % Covered
    ----------------            ------      ----    ------ ---------
    FEC Condition Terms              0         0         0     100.0
Expression Coverage:
    Enabled Coverage            Active   Covered    Misses % Covered
    ----------------            ------      ----    ------ ---------
    FEC Expression Terms             0         0         0     100.0
FSM Coverage:
    Enabled Coverage            Active      Hits    Misses % Covered
    ----------------            ------      ----    ------ ---------
    FSMs                                                         0.0
        States                       3         0         3       0.0
        Transitions                  4         0         4       0.0

================================FSM Details================================

FSM Coverage for file ../modules/dut/template.v --

FSM_ID: state
    Current State Object : state
    ----------------------
    State Value MapInfo :
    ---------------------
Line          State Name               Value
----          ----------               -----
  29                 st0                   1
  42                 st1                   2
  25                 st2                   0
    Uncovered States :
    ------------------
                   State
                   -----
                     st0
                     st1
                     st2
    Uncovered Transitions :
    -----------------------
Line            Trans_ID          Transition          
----            --------          ----------          
  38                   0          st0 -> st1          
  51                   1          st1 -> st2          
  25                   2          st1 -> st0          
  25                   3          st2 -> st0          


    Summary                     Active      Hits    Misses % Covered
    -------                     ------      ----    ------ ---------
        States                       3         0         3       0.0
        Transitions                  4         0         4       0.0

=================================================================================
=== File: ../modules/dut/vfpConfig.vhd
=================================================================================
Statement Coverage:
    Enabled Coverage            Active      Hits    Misses % Covered
    ----------------            ------      ----    ------ ---------
    Stmts                          492        95       397      19.3

================================Statement Details================================

Statement Coverage for file ../modules/dut/vfpConfig.vhd --

    1                                                --02072019 [02-07-2019]
    2                                                library ieee;
    3                                                use ieee.std_logic_1164.all;
    4                                                use ieee.numeric_std.all;
    5                                                use work.constantspackage.all;
    6                                                use work.vpfRecords.all;
    7                                                
    8                                                entity vfpConfig is
    9                                                    port (
    10                                                       ACLK               : in std_logic;
    11                                                       ARESETN            : in std_logic;
    12                                                       AWADDR             : in std_logic_vector(7 downto 0);
    13                                                       AWPROT             : in std_logic_vector(2 downto 0);
    14                                                       AWVALID            : in std_logic;
    15                                                       AWREADY            : out std_logic;
    16                                                       WDATA              : in std_logic_vector(31 downto 0);
    17                                                       WSTRB              : in std_logic_vector(3 downto 0);
    18                                                       WVALID             : in std_logic;
    19                                                       WREADY             : out std_logic;
    20                                                       BRESP              : out std_logic_vector(1 downto 0);
    21                                                       BVALID             : out std_logic;
    22                                                       BREADY             : in std_logic;
    23                                                       ARADDR             : in std_logic_vector(7 downto 0);
    24                                                       ARPROT             : in std_logic_vector(2 downto 0);
    25                                                       ARVALID            : in std_logic;
    26                                                       ARREADY            : out std_logic;
    27                                                       RDATA              : out std_logic_vector(31 downto 0);
    28                                                       RRESP              : out std_logic_vector(1 downto 0);
    29                                                       RVALID             : out std_logic;
    30                                                       RREADY             : in std_logic);
    31                                               end vfpConfig;
    32                                               architecture arch_imp of vfpConfig is
    33                                                   constant C_DATA_WIDTH        : integer := 32;
    34                                                   constant C_ADDR_WIDTH        : integer := 8;
    35                                               	constant ADDR_LSB            : integer := (C_DATA_WIDTH/32)+ 1;
    36                                               	constant OPT_MEM_ADDR_BITS   : integer := 5;
    37                                               	signal axi_awaddr	         : std_logic_vector(C_ADDR_WIDTH-1 downto 0);
    38                                               	signal axi_awready	         : std_logic;
    39                                               	signal axi_wready	         : std_logic;
    40                                               	signal axi_bresp	         : std_logic_vector(1 downto 0);
    41                                               	signal axi_bvalid	         : std_logic;
    42                                               	signal axi_araddr	         : std_logic_vector(C_ADDR_WIDTH-1 downto 0);
    43                                               	signal axi_arready	         : std_logic;
    44                                               	signal axi_rdata	         : std_logic_vector(C_DATA_WIDTH-1 downto 0);
    45                                               	signal axi_rresp	         : std_logic_vector(1 downto 0);
    46                                               	signal axi_rvalid	         : std_logic;
    47                                                   signal slv_reg_rden          : std_logic;
    48                                                   signal slv_reg_wren          : std_logic;
    49                                                   signal reg_data_out          : std_logic_vector(C_DATA_WIDTH-1 downto 0);
    50                                                   signal byte_index            : integer;
    51                                                   signal aw_en                 : std_logic;
    52                                                   signal localRegs             : mRegs;
    53                                                   signal wrRegsOut             : mRegs;
    54                                                   signal rdRegsIn              : mRegs;
    55                                                   
    56                                               begin
    57              1                          2         rdRegsIn            <= wrRegsOut;
    58              1                          2         AWREADY             <= axi_awready;
    59              1                          2         WREADY              <= axi_wready;
    60              1                          2         BRESP               <= axi_bresp;
    61              1                          2         BVALID              <= axi_bvalid;
    62              1                          2         ARREADY             <= axi_arready;
    63              1                          2         RDATA               <= axi_rdata;
    64              1                          2         RRESP               <= axi_rresp;
    65              1                          2         RVALID              <= axi_rvalid;
    66                                                   process (ACLK)
    67                                                   begin
    68                                                     if rising_edge(ACLK) then 
    69                                                       if ARESETN = '0' then
    70              1                          2               axi_awready <= '0';
    71              1                          2               aw_en <= '1';
    72                                                       else
    73                                                         if (axi_awready = '0' and AWVALID = '1' and WVALID = '1' and aw_en = '1') then
    74              1                    ***0***                 axi_awready <= '1';
    75                                                           elsif (BREADY = '1' and axi_bvalid = '1') then
    76              1                    ***0***                     aw_en <= '1';
    77              1                    ***0***                     axi_awready <= '0';
    78                                                         else
    79              1                          1                 axi_awready <= '0';
    80                                                         end if;
    81                                                       end if;
    82                                                     end if;
    83                                                   end process;
    84                                                   process (ACLK)
    85                                                   begin
    86                                                     if rising_edge(ACLK) then 
    87                                                       if ARESETN = '0' then
    88              1                          2               axi_awaddr <= (others => '0');
    89                                                       else
    90                                                         if (axi_awready = '0' and AWVALID = '1' and WVALID = '1' and aw_en = '1') then
    91              1                    ***0***                 axi_awaddr <= AWADDR;
    92                                                         end if;
    93                                                       end if;
    94                                                     end if;                   
    95                                                   end process; 
    96                                                   process (ACLK)
    97                                                   begin
    98                                                     if rising_edge(ACLK) then 
    99                                                       if ARESETN = '0' then
    100             1                          2               axi_wready <= '0';
    101                                                      else
    102                                                        if (axi_wready = '0' and WVALID = '1' and AWVALID = '1' and aw_en = '1') then
    103             1                    ***0***                   axi_wready <= '1';
    104                                                        else
    105             1                          1                 axi_wready <= '0';
    106                                                        end if;
    107                                                      end if;
    108                                                    end if;
    109                                                  end process; 
    110             1                          2         slv_reg_wren <= axi_wready and WVALID and axi_awready and AWVALID ;
    111                                              	process (ACLK)
    112                                              	variable loc_addr :std_logic_vector(OPT_MEM_ADDR_BITS downto 0); 
    113                                              	begin
    114                                              	  if rising_edge(ACLK) then 
    115                                              	    if ARESETN = '0' then
    116             1                         99     	      localRegs.cfigReg0 <= (others => '0');
    117             1                         99     	      localRegs.cfigReg1 <= (others => '0');
    118             1                         99     	      localRegs.cfigReg2 <= (others => '0');
    119             1                         99     	      localRegs.cfigReg3 <= (others => '0');
    120             1                         99     	      localRegs.cfigReg4 <= (others => '0');
    121             1                         99     	      localRegs.cfigReg5 <= (others => '0');
    122             1                         99     	      localRegs.cfigReg6 <= (others => '0');
    123             1                         99     	      localRegs.cfigReg7 <= (others => '0');
    124             1                         99     	      localRegs.cfigReg8 <= (others => '0');
    125             1                         99     	      localRegs.cfigReg9 <= (others => '0');
    126             1                         99     	      localRegs.cfigReg10 <= (others => '0');
    127             1                         99     	      localRegs.cfigReg11 <= (others => '0');
    128             1                         99     	      localRegs.cfigReg12 <= (others => '0');
    129             1                         99     	      localRegs.cfigReg13 <= (others => '0');
    130             1                         99     	      localRegs.cfigReg14 <= (others => '0');
    131             1                         99     	      localRegs.cfigReg15 <= (others => '0');
    132             1                         99     	      localRegs.cfigReg16 <= (others => '0');
    133             1                         99     	      localRegs.cfigReg17 <= (others => '0');
    134             1                         99     	      localRegs.cfigReg18 <= (others => '0');
    135             1                         99     	      localRegs.cfigReg19 <= (others => '0');
    136             1                         99     	      localRegs.cfigReg20 <= (others => '0');
    137             1                         99     	      localRegs.cfigReg21 <= (others => '0');
    138             1                         99     	      localRegs.cfigReg22 <= (others => '0');
    139             1                         99     	      localRegs.cfigReg23 <= (others => '0');
    140             1                         99     	      localRegs.cfigReg24 <= (others => '0');
    141             1                         99     	      localRegs.cfigReg25 <= (others => '0');
    142             1                         99     	      localRegs.cfigReg26 <= (others => '0');
    143             1                         99     	      localRegs.cfigReg27 <= (others => '0');
    144             1                         99     	      localRegs.cfigReg28 <= (others => '0');
    145             1                         99     	      localRegs.cfigReg29 <= (others => '0');
    146             1                         99     	      localRegs.cfigReg30 <= (others => '0');
    147             1                         99     	      localRegs.cfigReg31 <= (others => '0');
    148             1                         99     	      localRegs.cfigReg32 <= (others => '0');
    149             1                         99     	      localRegs.cfigReg33 <= (others => '0');
    150             1                         99     	      localRegs.cfigReg34 <= (others => '0');
    151             1                         99     	      localRegs.cfigReg35 <= (others => '0');
    152             1                         99     	      localRegs.cfigReg36 <= (others => '0');
    153             1                         99     	      localRegs.cfigReg37 <= (others => '0');
    154             1                         99     	      localRegs.cfigReg38 <= (others => '0');
    155             1                         99     	      localRegs.cfigReg39 <= (others => '0');
    156             1                         99     	      localRegs.cfigReg40 <= (others => '0');
    157             1                         99     	      localRegs.cfigReg41 <= (others => '0');
    158             1                         99     	      localRegs.cfigReg42 <= (others => '0');
    159             1                         99     	      localRegs.cfigReg43 <= (others => '0');
    160             1                         99     	      localRegs.cfigReg44 <= (others => '0');
    161             1                         99     	      localRegs.cfigReg45 <= (others => '0');
    162             1                         99     	      localRegs.cfigReg46 <= (others => '0');
    163             1                         99     	      localRegs.cfigReg47 <= (others => '0');
    164             1                         99     	      localRegs.cfigReg48 <= (others => '0');
    165             1                         99     	      localRegs.cfigReg49 <= (others => '0');
    166             1                         99     	      localRegs.cfigReg50 <= (others => '0');
    167             1                         99     	      localRegs.cfigReg51 <= (others => '0');
    168             1                         99     	      localRegs.cfigReg52 <= (others => '0');
    169             1                         99     	      localRegs.cfigReg53 <= (others => '0');
    170             1                         99     	      localRegs.cfigReg54 <= (others => '0');
    171             1                         99     	      localRegs.cfigReg55 <= (others => '0');
    172             1                         99     	      localRegs.cfigReg56 <= (others => '0');
    173             1                         99     	      localRegs.cfigReg57 <= (others => '0');
    174             1                         99     	      localRegs.cfigReg58 <= (others => '0');
    175             1                         99     	      localRegs.cfigReg59 <= (others => '0');
    176             1                         99     	      localRegs.cfigReg60 <= (others => '0');
    177             1                         99     	      localRegs.cfigReg61 <= (others => '0');
    178             1                         99     	      localRegs.cfigReg62 <= (others => '0');
    179             1                         99     	      localRegs.cfigReg63 <= (others => '0');
    180                                              	    else
    181             1                        121     	      loc_addr := axi_awaddr(ADDR_LSB + OPT_MEM_ADDR_BITS downto ADDR_LSB);
    182                                              	      if (slv_reg_wren = '1') then
    183                                              	        case loc_addr is
    184                                              	          when b"000000" =>
    185             1                    ***0***     	            for byte_index in 0 to (C_DATA_WIDTH/8-1) loop
    185             2                    ***0***     
    186                                              	              if ( WSTRB(byte_index) = '1' ) then
    187             1                    ***0***     	                localRegs.cfigReg0(byte_index*8+7 downto byte_index*8) <= WDATA(byte_index*8+7 downto byte_index*8);
    188                                              	              end if;
    189             1                    ***0***     	            end loop;
    190                                              	          when b"000001" =>
    191             1                    ***0***     	            for byte_index in 0 to (C_DATA_WIDTH/8-1) loop
    191             2                    ***0***     
    192                                              	              if ( WSTRB(byte_index) = '1' ) then
    193             1                    ***0***     	                localRegs.cfigReg1(byte_index*8+7 downto byte_index*8) <= WDATA(byte_index*8+7 downto byte_index*8);
    194                                              	              end if;
    195             1                    ***0***     	            end loop;
    196                                              	          when b"000010" =>
    197             1                    ***0***     	            for byte_index in 0 to (C_DATA_WIDTH/8-1) loop
    197             2                    ***0***     
    198                                              	              if ( WSTRB(byte_index) = '1' ) then
    199             1                    ***0***     	                localRegs.cfigReg2(byte_index*8+7 downto byte_index*8) <= WDATA(byte_index*8+7 downto byte_index*8);
    200                                              	              end if;
    201             1                    ***0***     	            end loop;
    202                                              	          when b"000011" =>
    203             1                    ***0***     	            for byte_index in 0 to (C_DATA_WIDTH/8-1) loop
    203             2                    ***0***     
    204                                              	              if ( WSTRB(byte_index) = '1' ) then
    205             1                    ***0***     	                localRegs.cfigReg3(byte_index*8+7 downto byte_index*8) <= WDATA(byte_index*8+7 downto byte_index*8);
    206                                              	              end if;
    207             1                    ***0***     	            end loop;
    208                                              	          when b"000100" =>
    209             1                    ***0***     	            for byte_index in 0 to (C_DATA_WIDTH/8-1) loop
    209             2                    ***0***     
    210                                              	              if ( WSTRB(byte_index) = '1' ) then
    211             1                    ***0***     	                localRegs.cfigReg4(byte_index*8+7 downto byte_index*8) <= WDATA(byte_index*8+7 downto byte_index*8);
    212                                              	              end if;
    213             1                    ***0***     	            end loop;
    214                                              	          when b"000101" =>
    215             1                    ***0***     	            for byte_index in 0 to (C_DATA_WIDTH/8-1) loop
    215             2                    ***0***     
    216                                              	              if ( WSTRB(byte_index) = '1' ) then
    217             1                    ***0***     	                localRegs.cfigReg5(byte_index*8+7 downto byte_index*8) <= WDATA(byte_index*8+7 downto byte_index*8);
    218                                              	              end if;
    219             1                    ***0***     	            end loop;
    220                                              	          when b"000110" =>
    221             1                    ***0***     	            for byte_index in 0 to (C_DATA_WIDTH/8-1) loop
    221             2                    ***0***     
    222                                              	              if ( WSTRB(byte_index) = '1' ) then
    223             1                    ***0***     	                localRegs.cfigReg6(byte_index*8+7 downto byte_index*8) <= WDATA(byte_index*8+7 downto byte_index*8);
    224                                              	              end if;
    225             1                    ***0***     	            end loop;
    226                                              	          when b"000111" =>
    227             1                    ***0***     	            for byte_index in 0 to (C_DATA_WIDTH/8-1) loop
    227             2                    ***0***     
    228                                              	              if ( WSTRB(byte_index) = '1' ) then
    229             1                    ***0***     	                localRegs.cfigReg7(byte_index*8+7 downto byte_index*8) <= WDATA(byte_index*8+7 downto byte_index*8);
    230                                              	              end if;
    231             1                    ***0***     	            end loop;
    232                                              	          when b"001000" =>
    233             1                    ***0***     	            for byte_index in 0 to (C_DATA_WIDTH/8-1) loop
    233             2                    ***0***     
    234                                              	              if ( WSTRB(byte_index) = '1' ) then
    235             1                    ***0***     	                localRegs.cfigReg8(byte_index*8+7 downto byte_index*8) <= WDATA(byte_index*8+7 downto byte_index*8);
    236                                              	              end if;
    237             1                    ***0***     	            end loop;
    238                                              	          when b"001001" =>
    239             1                    ***0***     	            for byte_index in 0 to (C_DATA_WIDTH/8-1) loop
    239             2                    ***0***     
    240                                              	              if ( WSTRB(byte_index) = '1' ) then
    241             1                    ***0***     	                localRegs.cfigReg9(byte_index*8+7 downto byte_index*8) <= WDATA(byte_index*8+7 downto byte_index*8);
    242                                              	              end if;
    243             1                    ***0***     	            end loop;
    244                                              	          when b"001010" =>
    245             1                    ***0***     	            for byte_index in 0 to (C_DATA_WIDTH/8-1) loop
    245             2                    ***0***     
    246                                              	              if ( WSTRB(byte_index) = '1' ) then
    247             1                    ***0***     	                localRegs.cfigReg10(byte_index*8+7 downto byte_index*8) <= WDATA(byte_index*8+7 downto byte_index*8);
    248                                              	              end if;
    249             1                    ***0***     	            end loop;
    250                                              	          when b"001011" =>
    251             1                    ***0***     	            for byte_index in 0 to (C_DATA_WIDTH/8-1) loop
    251             2                    ***0***     
    252                                              	              if ( WSTRB(byte_index) = '1' ) then
    253             1                    ***0***     	                localRegs.cfigReg11(byte_index*8+7 downto byte_index*8) <= WDATA(byte_index*8+7 downto byte_index*8);
    254                                              	              end if;
    255             1                    ***0***     	            end loop;
    256                                              	          when b"001100" =>
    257             1                    ***0***     	            for byte_index in 0 to (C_DATA_WIDTH/8-1) loop
    257             2                    ***0***     
    258                                              	              if ( WSTRB(byte_index) = '1' ) then
    259             1                    ***0***     	                localRegs.cfigReg12(byte_index*8+7 downto byte_index*8) <= WDATA(byte_index*8+7 downto byte_index*8);
    260                                              	              end if;
    261             1                    ***0***     	            end loop;
    262                                              	          when b"001101" =>
    263             1                    ***0***     	            for byte_index in 0 to (C_DATA_WIDTH/8-1) loop
    263             2                    ***0***     
    264                                              	              if ( WSTRB(byte_index) = '1' ) then
    265             1                    ***0***     	                localRegs.cfigReg13(byte_index*8+7 downto byte_index*8) <= WDATA(byte_index*8+7 downto byte_index*8);
    266                                              	              end if;
    267             1                    ***0***     	            end loop;
    268                                              	          when b"001110" =>
    269             1                    ***0***     	            for byte_index in 0 to (C_DATA_WIDTH/8-1) loop
    269             2                    ***0***     
    270                                              	              if ( WSTRB(byte_index) = '1' ) then
    271             1                    ***0***     	                localRegs.cfigReg14(byte_index*8+7 downto byte_index*8) <= WDATA(byte_index*8+7 downto byte_index*8);
    272                                              	              end if;
    273             1                    ***0***     	            end loop;
    274                                              	          when b"001111" =>
    275             1                    ***0***     	            for byte_index in 0 to (C_DATA_WIDTH/8-1) loop
    275             2                    ***0***     
    276                                              	              if ( WSTRB(byte_index) = '1' ) then
    277             1                    ***0***     	                localRegs.cfigReg15(byte_index*8+7 downto byte_index*8) <= WDATA(byte_index*8+7 downto byte_index*8);
    278                                              	              end if;
    279             1                    ***0***     	            end loop;
    280                                              	          when b"010000" =>
    281             1                    ***0***     	            for byte_index in 0 to (C_DATA_WIDTH/8-1) loop
    281             2                    ***0***     
    282                                              	              if ( WSTRB(byte_index) = '1' ) then
    283             1                    ***0***     	                localRegs.cfigReg16(byte_index*8+7 downto byte_index*8) <= WDATA(byte_index*8+7 downto byte_index*8);
    284                                              	              end if;
    285             1                    ***0***     	            end loop;
    286                                              	          when b"010001" =>
    287             1                    ***0***     	            for byte_index in 0 to (C_DATA_WIDTH/8-1) loop
    287             2                    ***0***     
    288                                              	              if ( WSTRB(byte_index) = '1' ) then
    289             1                    ***0***     	                localRegs.cfigReg17(byte_index*8+7 downto byte_index*8) <= WDATA(byte_index*8+7 downto byte_index*8);
    290                                              	              end if;
    291             1                    ***0***     	            end loop;
    292                                              	          when b"010010" =>
    293             1                    ***0***     	            for byte_index in 0 to (C_DATA_WIDTH/8-1) loop
    293             2                    ***0***     
    294                                              	              if ( WSTRB(byte_index) = '1' ) then
    295             1                    ***0***     	                localRegs.cfigReg18(byte_index*8+7 downto byte_index*8) <= WDATA(byte_index*8+7 downto byte_index*8);
    296                                              	              end if;
    297             1                    ***0***     	            end loop;
    298                                              	          when b"010011" =>
    299             1                    ***0***     	            for byte_index in 0 to (C_DATA_WIDTH/8-1) loop
    299             2                    ***0***     
    300                                              	              if ( WSTRB(byte_index) = '1' ) then
    301             1                    ***0***     	                localRegs.cfigReg19(byte_index*8+7 downto byte_index*8) <= WDATA(byte_index*8+7 downto byte_index*8);
    302                                              	              end if;
    303             1                    ***0***     	            end loop;
    304                                              	          when b"010100" =>
    305             1                    ***0***     	            for byte_index in 0 to (C_DATA_WIDTH/8-1) loop
    305             2                    ***0***     
    306                                              	              if ( WSTRB(byte_index) = '1' ) then
    307             1                    ***0***     	                localRegs.cfigReg20(byte_index*8+7 downto byte_index*8) <= WDATA(byte_index*8+7 downto byte_index*8);
    308                                              	              end if;
    309             1                    ***0***     	            end loop;
    310                                              	          when b"010101" =>
    311             1                    ***0***     	            for byte_index in 0 to (C_DATA_WIDTH/8-1) loop
    311             2                    ***0***     
    312                                              	              if ( WSTRB(byte_index) = '1' ) then
    313             1                    ***0***     	                localRegs.cfigReg21(byte_index*8+7 downto byte_index*8) <= WDATA(byte_index*8+7 downto byte_index*8);
    314                                              	              end if;
    315             1                    ***0***     	            end loop;
    316                                              	          when b"010110" =>
    317             1                    ***0***     	            for byte_index in 0 to (C_DATA_WIDTH/8-1) loop
    317             2                    ***0***     
    318                                              	              if ( WSTRB(byte_index) = '1' ) then
    319             1                    ***0***     	                localRegs.cfigReg22(byte_index*8+7 downto byte_index*8) <= WDATA(byte_index*8+7 downto byte_index*8);
    320                                              	              end if;
    321             1                    ***0***     	            end loop;
    322                                              	          when b"010111" =>
    323             1                    ***0***     	            for byte_index in 0 to (C_DATA_WIDTH/8-1) loop
    323             2                    ***0***     
    324                                              	              if ( WSTRB(byte_index) = '1' ) then
    325             1                    ***0***     	                localRegs.cfigReg23(byte_index*8+7 downto byte_index*8) <= WDATA(byte_index*8+7 downto byte_index*8);
    326                                              	              end if;
    327             1                    ***0***     	            end loop;
    328                                              	          when b"011000" =>
    329             1                    ***0***     	            for byte_index in 0 to (C_DATA_WIDTH/8-1) loop
    329             2                    ***0***     
    330                                              	              if ( WSTRB(byte_index) = '1' ) then
    331             1                    ***0***     	                localRegs.cfigReg24(byte_index*8+7 downto byte_index*8) <= WDATA(byte_index*8+7 downto byte_index*8);
    332                                              	              end if;
    333             1                    ***0***     	            end loop;
    334                                              	          when b"011001" =>
    335             1                    ***0***     	            for byte_index in 0 to (C_DATA_WIDTH/8-1) loop
    335             2                    ***0***     
    336                                              	              if ( WSTRB(byte_index) = '1' ) then
    337             1                    ***0***     	                localRegs.cfigReg25(byte_index*8+7 downto byte_index*8) <= WDATA(byte_index*8+7 downto byte_index*8);
    338                                              	              end if;
    339             1                    ***0***     	            end loop;
    340                                              	          when b"011010" =>
    341             1                    ***0***     	            for byte_index in 0 to (C_DATA_WIDTH/8-1) loop
    341             2                    ***0***     
    342                                              	              if ( WSTRB(byte_index) = '1' ) then
    343             1                    ***0***     	                localRegs.cfigReg26(byte_index*8+7 downto byte_index*8) <= WDATA(byte_index*8+7 downto byte_index*8);
    344                                              	              end if;
    345             1                    ***0***     	            end loop;
    346                                              	          when b"011011" =>
    347             1                    ***0***     	            for byte_index in 0 to (C_DATA_WIDTH/8-1) loop
    347             2                    ***0***     
    348                                              	              if ( WSTRB(byte_index) = '1' ) then
    349             1                    ***0***     	                localRegs.cfigReg27(byte_index*8+7 downto byte_index*8) <= WDATA(byte_index*8+7 downto byte_index*8);
    350                                              	              end if;
    351             1                    ***0***     	            end loop;
    352                                              	          when b"011100" =>
    353             1                    ***0***     	            for byte_index in 0 to (C_DATA_WIDTH/8-1) loop
    353             2                    ***0***     
    354                                              	              if ( WSTRB(byte_index) = '1' ) then
    355             1                    ***0***     	                localRegs.cfigReg28(byte_index*8+7 downto byte_index*8) <= WDATA(byte_index*8+7 downto byte_index*8);
    356                                              	              end if;
    357             1                    ***0***     	            end loop;
    358                                              	          when b"011101" =>
    359             1                    ***0***     	            for byte_index in 0 to (C_DATA_WIDTH/8-1) loop
    359             2                    ***0***     
    360                                              	              if ( WSTRB(byte_index) = '1' ) then
    361             1                    ***0***     	                localRegs.cfigReg29(byte_index*8+7 downto byte_index*8) <= WDATA(byte_index*8+7 downto byte_index*8);
    362                                              	              end if;
    363             1                    ***0***     	            end loop;
    364                                              	          when b"011110" =>
    365             1                    ***0***     	            for byte_index in 0 to (C_DATA_WIDTH/8-1) loop
    365             2                    ***0***     
    366                                              	              if ( WSTRB(byte_index) = '1' ) then
    367             1                    ***0***     	                localRegs.cfigReg30(byte_index*8+7 downto byte_index*8) <= WDATA(byte_index*8+7 downto byte_index*8);
    368                                              	              end if;
    369             1                    ***0***     	            end loop;
    370                                              	          when b"011111" =>
    371             1                    ***0***     	            for byte_index in 0 to (C_DATA_WIDTH/8-1) loop
    371             2                    ***0***     
    372                                              	              if ( WSTRB(byte_index) = '1' ) then
    373             1                    ***0***     	                localRegs.cfigReg31(byte_index*8+7 downto byte_index*8) <= WDATA(byte_index*8+7 downto byte_index*8);
    374                                              	              end if;
    375             1                    ***0***     	            end loop;
    376                                              	          when b"100000" =>
    377             1                    ***0***     	            for byte_index in 0 to (C_DATA_WIDTH/8-1) loop
    377             2                    ***0***     
    378                                              	              if ( WSTRB(byte_index) = '1' ) then
    379             1                    ***0***     	                localRegs.cfigReg32(byte_index*8+7 downto byte_index*8) <= WDATA(byte_index*8+7 downto byte_index*8);
    380                                              	              end if;
    381             1                    ***0***     	            end loop;
    382                                              	          when b"100001" =>
    383             1                    ***0***     	            for byte_index in 0 to (C_DATA_WIDTH/8-1) loop
    383             2                    ***0***     
    384                                              	              if ( WSTRB(byte_index) = '1' ) then
    385             1                    ***0***     	                localRegs.cfigReg33(byte_index*8+7 downto byte_index*8) <= WDATA(byte_index*8+7 downto byte_index*8);
    386                                              	              end if;
    387             1                    ***0***     	            end loop;
    388                                              	          when b"100010" =>
    389             1                    ***0***     	            for byte_index in 0 to (C_DATA_WIDTH/8-1) loop
    389             2                    ***0***     
    390                                              	              if ( WSTRB(byte_index) = '1' ) then
    391             1                    ***0***     	                localRegs.cfigReg34(byte_index*8+7 downto byte_index*8) <= WDATA(byte_index*8+7 downto byte_index*8);
    392                                              	              end if;
    393             1                    ***0***     	            end loop;
    394                                              	          when b"100011" =>
    395             1                    ***0***     	            for byte_index in 0 to (C_DATA_WIDTH/8-1) loop
    395             2                    ***0***     
    396                                              	              if ( WSTRB(byte_index) = '1' ) then
    397             1                    ***0***     	                localRegs.cfigReg35(byte_index*8+7 downto byte_index*8) <= WDATA(byte_index*8+7 downto byte_index*8);
    398                                              	              end if;
    399             1                    ***0***     	            end loop;
    400                                              	          when b"100100" =>
    401             1                    ***0***     	            for byte_index in 0 to (C_DATA_WIDTH/8-1) loop
    401             2                    ***0***     
    402                                              	              if ( WSTRB(byte_index) = '1' ) then
    403             1                    ***0***     	                localRegs.cfigReg36(byte_index*8+7 downto byte_index*8) <= WDATA(byte_index*8+7 downto byte_index*8);
    404                                              	              end if;
    405             1                    ***0***     	            end loop;
    406                                              	          when b"100101" =>
    407             1                    ***0***     	            for byte_index in 0 to (C_DATA_WIDTH/8-1) loop
    407             2                    ***0***     
    408                                              	              if ( WSTRB(byte_index) = '1' ) then
    409             1                    ***0***     	                localRegs.cfigReg37(byte_index*8+7 downto byte_index*8) <= WDATA(byte_index*8+7 downto byte_index*8);
    410                                              	              end if;
    411             1                    ***0***     	            end loop;
    412                                              	          when b"100110" =>
    413             1                    ***0***     	            for byte_index in 0 to (C_DATA_WIDTH/8-1) loop
    413             2                    ***0***     
    414                                              	              if ( WSTRB(byte_index) = '1' ) then
    415             1                    ***0***     	                localRegs.cfigReg38(byte_index*8+7 downto byte_index*8) <= WDATA(byte_index*8+7 downto byte_index*8);
    416                                              	              end if;
    417             1                    ***0***     	            end loop;
    418                                              	          when b"100111" =>
    419             1                    ***0***     	            for byte_index in 0 to (C_DATA_WIDTH/8-1) loop
    419             2                    ***0***     
    420                                              	              if ( WSTRB(byte_index) = '1' ) then
    421             1                    ***0***     	                localRegs.cfigReg39(byte_index*8+7 downto byte_index*8) <= WDATA(byte_index*8+7 downto byte_index*8);
    422                                              	              end if;
    423             1                    ***0***     	            end loop;
    424                                              	          when b"101000" =>
    425             1                    ***0***     	            for byte_index in 0 to (C_DATA_WIDTH/8-1) loop
    425             2                    ***0***     
    426                                              	              if ( WSTRB(byte_index) = '1' ) then
    427             1                    ***0***     	                localRegs.cfigReg40(byte_index*8+7 downto byte_index*8) <= WDATA(byte_index*8+7 downto byte_index*8);
    428                                              	              end if;
    429             1                    ***0***     	            end loop;
    430                                              	          when b"101001" =>
    431             1                    ***0***     	            for byte_index in 0 to (C_DATA_WIDTH/8-1) loop
    431             2                    ***0***     
    432                                              	              if ( WSTRB(byte_index) = '1' ) then
    433             1                    ***0***     	                localRegs.cfigReg41(byte_index*8+7 downto byte_index*8) <= WDATA(byte_index*8+7 downto byte_index*8);
    434                                              	              end if;
    435             1                    ***0***     	            end loop;
    436                                              	          when b"101010" =>
    437             1                    ***0***     	            for byte_index in 0 to (C_DATA_WIDTH/8-1) loop
    437             2                    ***0***     
    438                                              	              if ( WSTRB(byte_index) = '1' ) then
    439             1                    ***0***     	                localRegs.cfigReg42(byte_index*8+7 downto byte_index*8) <= WDATA(byte_index*8+7 downto byte_index*8);
    440                                              	              end if;
    441             1                    ***0***     	            end loop;
    442                                              	          when b"101011" =>
    443             1                    ***0***     	            for byte_index in 0 to (C_DATA_WIDTH/8-1) loop
    443             2                    ***0***     
    444                                              	              if ( WSTRB(byte_index) = '1' ) then
    445             1                    ***0***     	                localRegs.cfigReg43(byte_index*8+7 downto byte_index*8) <= WDATA(byte_index*8+7 downto byte_index*8);
    446                                              	              end if;
    447             1                    ***0***     	            end loop;
    448                                              	          when b"101100" =>
    449             1                    ***0***     	            for byte_index in 0 to (C_DATA_WIDTH/8-1) loop
    449             2                    ***0***     
    450                                              	              if ( WSTRB(byte_index) = '1' ) then
    451             1                    ***0***     	                localRegs.cfigReg44(byte_index*8+7 downto byte_index*8) <= WDATA(byte_index*8+7 downto byte_index*8);
    452                                              	              end if;
    453             1                    ***0***     	            end loop;
    454                                              	          when b"101101" =>
    455             1                    ***0***     	            for byte_index in 0 to (C_DATA_WIDTH/8-1) loop
    455             2                    ***0***     
    456                                              	              if ( WSTRB(byte_index) = '1' ) then
    457             1                    ***0***     	                localRegs.cfigReg45(byte_index*8+7 downto byte_index*8) <= WDATA(byte_index*8+7 downto byte_index*8);
    458                                              	              end if;
    459             1                    ***0***     	            end loop;
    460                                              	          when b"101110" =>
    461             1                    ***0***     	            for byte_index in 0 to (C_DATA_WIDTH/8-1) loop
    461             2                    ***0***     
    462                                              	              if ( WSTRB(byte_index) = '1' ) then
    463             1                    ***0***     	                localRegs.cfigReg46(byte_index*8+7 downto byte_index*8) <= WDATA(byte_index*8+7 downto byte_index*8);
    464                                              	              end if;
    465             1                    ***0***     	            end loop;
    466                                              	          when b"101111" =>
    467             1                    ***0***     	            for byte_index in 0 to (C_DATA_WIDTH/8-1) loop
    467             2                    ***0***     
    468                                              	              if ( WSTRB(byte_index) = '1' ) then
    469             1                    ***0***     	                localRegs.cfigReg47(byte_index*8+7 downto byte_index*8) <= WDATA(byte_index*8+7 downto byte_index*8);
    470                                              	              end if;
    471             1                    ***0***     	            end loop;
    472                                              	          when b"110000" =>
    473             1                    ***0***     	            for byte_index in 0 to (C_DATA_WIDTH/8-1) loop
    473             2                    ***0***     
    474                                              	              if ( WSTRB(byte_index) = '1' ) then
    475             1                    ***0***     	                localRegs.cfigReg48(byte_index*8+7 downto byte_index*8) <= WDATA(byte_index*8+7 downto byte_index*8);
    476                                              	              end if;
    477             1                    ***0***     	            end loop;
    478                                              	          when b"110001" =>
    479             1                    ***0***     	            for byte_index in 0 to (C_DATA_WIDTH/8-1) loop
    479             2                    ***0***     
    480                                              	              if ( WSTRB(byte_index) = '1' ) then
    481             1                    ***0***     	                localRegs.cfigReg49(byte_index*8+7 downto byte_index*8) <= WDATA(byte_index*8+7 downto byte_index*8);
    482                                              	              end if;
    483             1                    ***0***     	            end loop;
    484                                              	          when b"110010" =>
    485             1                    ***0***     	            for byte_index in 0 to (C_DATA_WIDTH/8-1) loop
    485             2                    ***0***     
    486                                              	              if ( WSTRB(byte_index) = '1' ) then
    487             1                    ***0***     	                localRegs.cfigReg50(byte_index*8+7 downto byte_index*8) <= WDATA(byte_index*8+7 downto byte_index*8);
    488                                              	              end if;
    489             1                    ***0***     	            end loop;
    490                                              	          when b"110011" =>
    491             1                    ***0***     	            for byte_index in 0 to (C_DATA_WIDTH/8-1) loop
    491             2                    ***0***     
    492                                              	              if ( WSTRB(byte_index) = '1' ) then
    493             1                    ***0***     	                localRegs.cfigReg51(byte_index*8+7 downto byte_index*8) <= WDATA(byte_index*8+7 downto byte_index*8);
    494                                              	              end if;
    495             1                    ***0***     	            end loop;
    496                                              	          when b"110100" =>
    497             1                    ***0***     	            for byte_index in 0 to (C_DATA_WIDTH/8-1) loop
    497             2                    ***0***     
    498                                              	              if ( WSTRB(byte_index) = '1' ) then
    499             1                    ***0***     	                localRegs.cfigReg52(byte_index*8+7 downto byte_index*8) <= WDATA(byte_index*8+7 downto byte_index*8);
    500                                              	              end if;
    501             1                    ***0***     	            end loop;
    502                                              	          when b"110101" =>
    503             1                    ***0***     	            for byte_index in 0 to (C_DATA_WIDTH/8-1) loop
    503             2                    ***0***     
    504                                              	              if ( WSTRB(byte_index) = '1' ) then
    505             1                    ***0***     	                localRegs.cfigReg53(byte_index*8+7 downto byte_index*8) <= WDATA(byte_index*8+7 downto byte_index*8);
    506                                              	              end if;
    507             1                    ***0***     	            end loop;
    508                                              	          when b"110110" =>
    509             1                    ***0***     	            for byte_index in 0 to (C_DATA_WIDTH/8-1) loop
    509             2                    ***0***     
    510                                              	              if ( WSTRB(byte_index) = '1' ) then
    511             1                    ***0***     	                localRegs.cfigReg54(byte_index*8+7 downto byte_index*8) <= WDATA(byte_index*8+7 downto byte_index*8);
    512                                              	              end if;
    513             1                    ***0***     	            end loop;
    514                                              	          when b"110111" =>
    515             1                    ***0***     	            for byte_index in 0 to (C_DATA_WIDTH/8-1) loop
    515             2                    ***0***     
    516                                              	              if ( WSTRB(byte_index) = '1' ) then
    517             1                    ***0***     	                localRegs.cfigReg55(byte_index*8+7 downto byte_index*8) <= WDATA(byte_index*8+7 downto byte_index*8);
    518                                              	              end if;
    519             1                    ***0***     	            end loop;
    520                                              	          when b"111000" =>
    521             1                    ***0***     	            for byte_index in 0 to (C_DATA_WIDTH/8-1) loop
    521             2                    ***0***     
    522                                              	              if ( WSTRB(byte_index) = '1' ) then
    523             1                    ***0***     	                localRegs.cfigReg56(byte_index*8+7 downto byte_index*8) <= WDATA(byte_index*8+7 downto byte_index*8);
    524                                              	              end if;
    525             1                    ***0***     	            end loop;
    526                                              	          when b"111001" =>
    527             1                    ***0***     	            for byte_index in 0 to (C_DATA_WIDTH/8-1) loop
    527             2                    ***0***     
    528                                              	              if ( WSTRB(byte_index) = '1' ) then
    529             1                    ***0***     	                localRegs.cfigReg57(byte_index*8+7 downto byte_index*8) <= WDATA(byte_index*8+7 downto byte_index*8);
    530                                              	              end if;
    531             1                    ***0***     	            end loop;
    532                                              	          when b"111010" =>
    533             1                    ***0***     	            for byte_index in 0 to (C_DATA_WIDTH/8-1) loop
    533             2                    ***0***     
    534                                              	              if ( WSTRB(byte_index) = '1' ) then
    535             1                    ***0***     	                localRegs.cfigReg58(byte_index*8+7 downto byte_index*8) <= WDATA(byte_index*8+7 downto byte_index*8);
    536                                              	              end if;
    537             1                    ***0***     	            end loop;
    538                                              	          when b"111011" =>
    539             1                    ***0***     	            for byte_index in 0 to (C_DATA_WIDTH/8-1) loop
    539             2                    ***0***     
    540                                              	              if ( WSTRB(byte_index) = '1' ) then
    541             1                    ***0***     	                localRegs.cfigReg59(byte_index*8+7 downto byte_index*8) <= WDATA(byte_index*8+7 downto byte_index*8);
    542                                              	              end if;
    543             1                    ***0***     	            end loop;
    544                                              	          when b"111100" =>
    545             1                    ***0***     	            for byte_index in 0 to (C_DATA_WIDTH/8-1) loop
    545             2                    ***0***     
    546                                              	              if ( WSTRB(byte_index) = '1' ) then
    547             1                    ***0***     	                localRegs.cfigReg60(byte_index*8+7 downto byte_index*8) <= WDATA(byte_index*8+7 downto byte_index*8);
    548                                              	              end if;
    549             1                    ***0***     	            end loop;
    550                                              	          when b"111101" =>
    551             1                    ***0***     	            for byte_index in 0 to (C_DATA_WIDTH/8-1) loop
    551             2                    ***0***     
    552                                              	              if ( WSTRB(byte_index) = '1' ) then
    553             1                    ***0***     	                localRegs.cfigReg61(byte_index*8+7 downto byte_index*8) <= WDATA(byte_index*8+7 downto byte_index*8);
    554                                              	              end if;
    555             1                    ***0***     	            end loop;
    556                                              	          when b"111110" =>
    557             1                    ***0***     	            for byte_index in 0 to (C_DATA_WIDTH/8-1) loop
    557             2                    ***0***     
    558                                              	              if ( WSTRB(byte_index) = '1' ) then
    559             1                    ***0***     	                localRegs.cfigReg62(byte_index*8+7 downto byte_index*8) <= WDATA(byte_index*8+7 downto byte_index*8);
    560                                              	              end if;
    561             1                    ***0***     	            end loop;
    562                                              	          when b"111111" =>
    563             1                    ***0***     	            for byte_index in 0 to (C_DATA_WIDTH/8-1) loop
    563             2                    ***0***     
    564                                              	              if ( WSTRB(byte_index) = '1' ) then
    565             1                    ***0***     	                localRegs.cfigReg63(byte_index*8+7 downto byte_index*8) <= WDATA(byte_index*8+7 downto byte_index*8);
    566                                              	              end if;
    567             1                    ***0***     	            end loop;
    568                                              	          when others =>
    569                                                              --stored cpu values
    570             1                    ***0***     	            localRegs.cfigReg0 <= localRegs.cfigReg0;
    571             1                    ***0***     	            localRegs.cfigReg1 <= localRegs.cfigReg1;
    572             1                    ***0***     	            localRegs.cfigReg2 <= localRegs.cfigReg2;
    573             1                    ***0***     	            localRegs.cfigReg3 <= localRegs.cfigReg3;
    574             1                    ***0***     	            localRegs.cfigReg4 <= localRegs.cfigReg4;
    575             1                    ***0***     	            localRegs.cfigReg5 <= localRegs.cfigReg5;
    576             1                    ***0***     	            localRegs.cfigReg6 <= localRegs.cfigReg6;
    577             1                    ***0***     	            localRegs.cfigReg7 <= localRegs.cfigReg7;
    578             1                    ***0***     	            localRegs.cfigReg8 <= localRegs.cfigReg8;
    579             1                    ***0***     	            localRegs.cfigReg9 <= localRegs.cfigReg9;
    580             1                    ***0***     	            localRegs.cfigReg10 <= localRegs.cfigReg10;
    581             1                    ***0***     	            localRegs.cfigReg11 <= localRegs.cfigReg11;
    582             1                    ***0***     	            localRegs.cfigReg12 <= localRegs.cfigReg12;
    583             1                    ***0***     	            localRegs.cfigReg13 <= localRegs.cfigReg13;
    584             1                    ***0***     	            localRegs.cfigReg14 <= localRegs.cfigReg14;
    585             1                    ***0***     	            localRegs.cfigReg15 <= localRegs.cfigReg15;
    586             1                    ***0***     	            localRegs.cfigReg16 <= localRegs.cfigReg16;
    587             1                    ***0***     	            localRegs.cfigReg17 <= localRegs.cfigReg17;
    588             1                    ***0***     	            localRegs.cfigReg18 <= localRegs.cfigReg18;
    589             1                    ***0***     	            localRegs.cfigReg19 <= localRegs.cfigReg19;
    590             1                    ***0***     	            localRegs.cfigReg20 <= localRegs.cfigReg20;
    591             1                    ***0***     	            localRegs.cfigReg21 <= localRegs.cfigReg21;
    592             1                    ***0***     	            localRegs.cfigReg22 <= localRegs.cfigReg22;
    593             1                    ***0***     	            localRegs.cfigReg23 <= localRegs.cfigReg23;
    594             1                    ***0***     	            localRegs.cfigReg24 <= localRegs.cfigReg24;
    595             1                    ***0***     	            localRegs.cfigReg25 <= localRegs.cfigReg25;
    596             1                    ***0***     	            localRegs.cfigReg26 <= localRegs.cfigReg26;
    597             1                    ***0***     	            localRegs.cfigReg27 <= localRegs.cfigReg27;
    598             1                    ***0***     	            localRegs.cfigReg28 <= localRegs.cfigReg28;
    599             1                    ***0***     	            localRegs.cfigReg29 <= localRegs.cfigReg29;
    600             1                    ***0***     	            localRegs.cfigReg30 <= localRegs.cfigReg30;
    601             1                    ***0***     	            localRegs.cfigReg31 <= localRegs.cfigReg31;
    602             1                    ***0***     	            localRegs.cfigReg32 <= localRegs.cfigReg32;
    603             1                    ***0***     	            localRegs.cfigReg33 <= localRegs.cfigReg33;
    604             1                    ***0***     	            localRegs.cfigReg34 <= localRegs.cfigReg34;
    605             1                    ***0***     	            localRegs.cfigReg35 <= localRegs.cfigReg35;
    606             1                    ***0***     	            localRegs.cfigReg36 <= localRegs.cfigReg36;
    607             1                    ***0***     	            localRegs.cfigReg37 <= localRegs.cfigReg37;
    608             1                    ***0***     	            localRegs.cfigReg38 <= localRegs.cfigReg38;
    609             1                    ***0***     	            localRegs.cfigReg39 <= localRegs.cfigReg39;
    610             1                    ***0***     	            localRegs.cfigReg40 <= localRegs.cfigReg40;
    611             1                    ***0***     	            localRegs.cfigReg41 <= localRegs.cfigReg41;
    612             1                    ***0***     	            localRegs.cfigReg42 <= localRegs.cfigReg42;
    613             1                    ***0***     	            localRegs.cfigReg43 <= localRegs.cfigReg43;
    614             1                    ***0***     	            localRegs.cfigReg44 <= localRegs.cfigReg44;
    615             1                    ***0***     	            localRegs.cfigReg45 <= localRegs.cfigReg45;
    616             1                    ***0***     	            localRegs.cfigReg46 <= localRegs.cfigReg46;
    617             1                    ***0***     	            localRegs.cfigReg47 <= localRegs.cfigReg47;
    618             1                    ***0***     	            localRegs.cfigReg48 <= localRegs.cfigReg48;
    619             1                    ***0***     	            localRegs.cfigReg49 <= localRegs.cfigReg49;
    620             1                    ***0***     	            localRegs.cfigReg50 <= localRegs.cfigReg50;
    621             1                    ***0***     	            localRegs.cfigReg51 <= localRegs.cfigReg51;
    622             1                    ***0***     	            localRegs.cfigReg52 <= localRegs.cfigReg52;
    623             1                    ***0***     	            localRegs.cfigReg53 <= localRegs.cfigReg53;
    624             1                    ***0***     	            localRegs.cfigReg54 <= localRegs.cfigReg54;
    625             1                    ***0***     	            localRegs.cfigReg55 <= localRegs.cfigReg55;
    626             1                    ***0***     	            localRegs.cfigReg56 <= localRegs.cfigReg56;
    627             1                    ***0***     	            localRegs.cfigReg57 <= localRegs.cfigReg57;
    628             1                    ***0***     	            localRegs.cfigReg58 <= localRegs.cfigReg58;
    629             1                    ***0***     	            localRegs.cfigReg59 <= localRegs.cfigReg59;
    630             1                    ***0***     	            localRegs.cfigReg60 <= localRegs.cfigReg60;
    631             1                    ***0***     	            localRegs.cfigReg61 <= localRegs.cfigReg61;
    632             1                    ***0***     	            localRegs.cfigReg62 <= localRegs.cfigReg62;
    633             1                    ***0***     	            localRegs.cfigReg63 <= localRegs.cfigReg63;
    634                                              	        end case;
    635                                              	      end if;
    636                                              	    end if;
    637                                              	  end if;                   
    638                                              	end process; 
    639                                                  process (ACLK)
    640                                                  begin
    641                                                    if rising_edge(ACLK) then 
    642                                                      if ARESETN = '0' then
    643             1                          2               axi_bvalid  <= '0';
    644             1                          2               axi_bresp   <= "00"; 
    645                                                      else
    646                                                        if (axi_awready = '1' and AWVALID = '1' and axi_wready = '1' and WVALID = '1' and axi_bvalid = '0'  ) then
    647             1                    ***0***                 axi_bvalid <= '1';
    648             1                    ***0***                 axi_bresp  <= "00"; 
    649                                                        elsif (BREADY = '1' and axi_bvalid = '1') then   
    650             1                    ***0***                 axi_bvalid <= '0';                                 
    651                                                        end if;
    652                                                      end if;
    653                                                    end if;                   
    654                                                  end process; 
    655                                                  process (ACLK)
    656                                                  begin
    657                                                    if rising_edge(ACLK) then 
    658                                                      if ARESETN = '0' then
    659             1                          2               axi_arready <= '0';
    660             1                          2               axi_araddr  <= (others => '1');
    661                                                      else
    662                                                        if (axi_arready = '0' and ARVALID = '1') then
    663             1                    ***0***                 axi_arready <= '1';
    664             1                    ***0***                 axi_araddr  <= ARADDR;           
    665                                                        else
    666             1                          1                 axi_arready <= '0';
    667                                                        end if;
    668                                                      end if;
    669                                                    end if;                   
    670                                                  end process; 
    671                                                  process (ACLK)
    672                                                  begin
    673                                                    if rising_edge(ACLK) then
    674                                                      if ARESETN = '0' then
    675             1                          2               axi_rvalid <= '0';
    676             1                          2               axi_rresp  <= "00";
    677                                                      else
    678                                                        if (axi_arready = '1' and ARVALID = '1' and axi_rvalid = '0') then
    679             1                    ***0***                 axi_rvalid <= '1';
    680             1                    ***0***                 axi_rresp  <= "00"; 
    681                                                        elsif (axi_rvalid = '1' and RREADY = '1') then
    682             1                    ***0***                 axi_rvalid <= '0';
    683                                                        end if;            
    684                                                      end if;
    685                                                    end if;
    686                                                  end process;
    687             1                          2         slv_reg_rden <= axi_arready and ARVALID and (not axi_rvalid);
    688             1                          6     process (axi_araddr, ARESETN, slv_reg_rden, rdRegsIn.cfigReg0, rdRegsIn.cfigReg1, rdRegsIn.cfigReg2, rdRegsIn.cfigReg3, rdRegsIn.cfigReg4, rdRegsIn.cfigReg5, rdRegsIn.cfigReg6, rdRegsIn.cfigReg7, rdRegsIn.cfigReg8, rdRegsIn.cfigReg9, rdRegsIn.cfigReg10, rdRegsIn.cfigReg11, rdRegsIn.cfigReg12, rdRegsIn.cfigReg13, rdRegsIn.cfigReg14, rdRegsIn.cfigReg15, rdRegsIn.cfigReg16, rdRegsIn.cfigReg17, rdRegsIn.cfigReg18, rdRegsIn.cfigReg19, rdRegsIn.cfigReg20, rdRegsIn.cfigReg21, rdRegsIn.cfigReg22, rdRegsIn.cfigReg23, rdRegsIn.cfigReg24, rdRegsIn.cfigReg25, rdRegsIn.cfigReg26, rdRegsIn.cfigReg27, rdRegsIn.cfigReg28, rdRegsIn.cfigReg29, rdRegsIn.cfigReg30, rdRegsIn.cfigReg31, rdRegsIn.cfigReg32, rdRegsIn.cfigReg33, rdRegsIn.cfigReg34, rdRegsIn.cfigReg35, rdRegsIn.cfigReg36, rdRegsIn.cfigReg37, rdRegsIn.cfigReg38, rdRegsIn.cfigReg39, rdRegsIn.cfigReg40, rdRegsIn.cfigReg41, rdRegsIn.cfigReg42, rdRegsIn.cfigReg43, rdRegsIn.cfigReg44, rdRegsIn.cfigReg45, rdRegsIn.cfigReg46, rdRegsIn.cfigReg47, rdRegsIn.cfigReg48, rdRegsIn.cfigReg49, rdRegsIn.cfigReg50, rdRegsIn.cfigReg51, rdRegsIn.cfigReg52, rdRegsIn.cfigReg53, rdRegsIn.cfigReg54, rdRegsIn.cfigReg55, rdRegsIn.cfigReg56, rdRegsIn.cfigReg57, rdRegsIn.cfigReg58, rdRegsIn.cfigReg59, rdRegsIn.cfigReg60, rdRegsIn.cfigReg61, rdRegsIn.cfigReg62, rdRegsIn.cfigReg63)
    689                                                  variable loc_addr :std_logic_vector(OPT_MEM_ADDR_BITS downto 0);
    690                                                  begin
    691             1                          6             loc_addr := axi_araddr(ADDR_LSB + OPT_MEM_ADDR_BITS downto ADDR_LSB);
    692                                                      case loc_addr is
    693                                                        when b"000000" =>
    694             1                    ***0***                 reg_data_out <= rdRegsIn.cfigReg0;
    695                                                        when b"000001" =>
    696             1                    ***0***                 reg_data_out <= rdRegsIn.cfigReg1;
    697                                                        when b"000010" =>
    698             1                    ***0***                 reg_data_out <= rdRegsIn.cfigReg2;
    699                                                        when b"000011" =>
    700             1                    ***0***                 reg_data_out <= rdRegsIn.cfigReg3;
    701                                                        when b"000100" =>
    702             1                    ***0***                 reg_data_out <= rdRegsIn.cfigReg4;
    703                                                        when b"000101" =>
    704             1                    ***0***                 reg_data_out <= rdRegsIn.cfigReg5;
    705                                                        when b"000110" =>
    706             1                    ***0***                 reg_data_out <= rdRegsIn.cfigReg6;
    707                                                        when b"000111" =>
    708             1                    ***0***                 reg_data_out <= rdRegsIn.cfigReg7;
    709                                                        when b"001000" =>
    710             1                    ***0***                 reg_data_out <= rdRegsIn.cfigReg8;
    711                                                        when b"001001" =>
    712             1                    ***0***                 reg_data_out <= rdRegsIn.cfigReg9;
    713                                                        when b"001010" =>
    714             1                    ***0***                 reg_data_out <= rdRegsIn.cfigReg10;
    715                                                        when b"001011" =>
    716             1                    ***0***                 reg_data_out <= rdRegsIn.cfigReg11;
    717                                                        when b"001100" =>
    718             1                    ***0***                 reg_data_out <= rdRegsIn.cfigReg12;
    719                                                        when b"001101" =>
    720             1                    ***0***                 reg_data_out <= rdRegsIn.cfigReg13;
    721                                                        when b"001110" =>
    722             1                    ***0***                 reg_data_out <= rdRegsIn.cfigReg14;
    723                                                        when b"001111" =>
    724             1                    ***0***                 reg_data_out <= rdRegsIn.cfigReg15;
    725                                                        when b"010000" =>
    726             1                    ***0***                 reg_data_out <= rdRegsIn.cfigReg16;
    727                                                        when b"010001" =>
    728             1                    ***0***                 reg_data_out <= rdRegsIn.cfigReg17;
    729                                                        when b"010010" =>
    730             1                    ***0***                 reg_data_out <= rdRegsIn.cfigReg18;
    731                                                        when b"010011" =>
    732             1                    ***0***                 reg_data_out <= rdRegsIn.cfigReg19;
    733                                                        when b"010100" =>
    734             1                    ***0***                 reg_data_out <= rdRegsIn.cfigReg20;
    735                                                        when b"010101" =>
    736             1                    ***0***                 reg_data_out <= rdRegsIn.cfigReg21;
    737                                                        when b"010110" =>
    738             1                    ***0***                 reg_data_out <= rdRegsIn.cfigReg22;
    739                                                        when b"010111" =>
    740             1                    ***0***                 reg_data_out <= rdRegsIn.cfigReg23;
    741                                                        when b"011000" =>
    742             1                    ***0***                 reg_data_out <= rdRegsIn.cfigReg24;
    743                                                        when b"011001" =>
    744             1                    ***0***                 reg_data_out <= rdRegsIn.cfigReg25;
    745                                                        when b"011010" =>
    746             1                    ***0***                 reg_data_out <= rdRegsIn.cfigReg26;
    747                                                        when b"011011" =>
    748             1                    ***0***                 reg_data_out <= rdRegsIn.cfigReg27;
    749                                                        when b"011100" =>
    750             1                    ***0***                 reg_data_out <= rdRegsIn.cfigReg28;
    751                                                        when b"011101" =>
    752             1                    ***0***     	        reg_data_out <= rdRegsIn.cfigReg29;
    753                                                        when b"011110" =>
    754             1                    ***0***     	        reg_data_out <= rdRegsIn.cfigReg30;
    755                                                        when b"011111" =>
    756             1                    ***0***     	        reg_data_out <= rdRegsIn.cfigReg31;
    757                                              	      when b"100000" =>
    758             1                    ***0***     	        reg_data_out <= rdRegsIn.cfigReg32;
    759                                              	      when b"100001" =>
    760             1                    ***0***     	        reg_data_out <= rdRegsIn.cfigReg33;
    761                                              	      when b"100010" =>
    762             1                    ***0***     	        reg_data_out <= rdRegsIn.cfigReg34;
    763                                              	      when b"100011" =>
    764             1                    ***0***     	        reg_data_out <= rdRegsIn.cfigReg35;
    765                                              	      when b"100100" =>
    766             1                    ***0***     	        reg_data_out <= rdRegsIn.cfigReg36;
    767                                              	      when b"100101" =>
    768             1                    ***0***     	        reg_data_out <= rdRegsIn.cfigReg37;
    769                                              	      when b"100110" =>
    770             1                    ***0***     	        reg_data_out <= rdRegsIn.cfigReg38;
    771                                              	      when b"100111" =>
    772             1                    ***0***     	        reg_data_out <= rdRegsIn.cfigReg39;
    773                                              	      when b"101000" =>
    774             1                    ***0***     	        reg_data_out <= rdRegsIn.cfigReg40;
    775                                              	      when b"101001" =>
    776             1                    ***0***     	        reg_data_out <= rdRegsIn.cfigReg41;
    777                                              	      when b"101010" =>
    778             1                    ***0***     	        reg_data_out <= rdRegsIn.cfigReg42;
    779                                              	      when b"101011" =>
    780             1                    ***0***     	        reg_data_out <= rdRegsIn.cfigReg43;
    781                                              	      when b"101100" =>
    782             1                    ***0***     	        reg_data_out <= rdRegsIn.cfigReg44;
    783                                              	      when b"101101" =>
    784             1                    ***0***     	        reg_data_out <= rdRegsIn.cfigReg45;
    785                                              	      when b"101110" =>
    786             1                    ***0***     	        reg_data_out <= rdRegsIn.cfigReg46;
    787                                              	      when b"101111" =>
    788             1                    ***0***     	        reg_data_out <= rdRegsIn.cfigReg47;
    789                                              	      when b"110000" =>
    790             1                    ***0***     	        reg_data_out <= rdRegsIn.cfigReg48;
    791                                              	      when b"110001" =>
    792             1                    ***0***     	        reg_data_out <= rdRegsIn.cfigReg49;
    793                                              	      when b"110010" =>
    794             1                    ***0***     	        reg_data_out <= rdRegsIn.cfigReg50;
    795                                              	      when b"110011" =>
    796             1                    ***0***     	        reg_data_out <= rdRegsIn.cfigReg51;
    797                                              	      when b"110100" =>
    798             1                    ***0***     	        reg_data_out <= rdRegsIn.cfigReg52;
    799                                              	      when b"110101" =>
    800             1                    ***0***     	        reg_data_out <= rdRegsIn.cfigReg53;
    801                                              	      when b"110110" =>
    802             1                    ***0***     	        reg_data_out <= rdRegsIn.cfigReg54;
    803                                              	      when b"110111" =>
    804             1                    ***0***     	        reg_data_out <= rdRegsIn.cfigReg55;
    805                                              	      when b"111000" =>
    806             1                    ***0***     	        reg_data_out <= rdRegsIn.cfigReg56;
    807                                              	      when b"111001" =>
    808             1                    ***0***     	        reg_data_out <= rdRegsIn.cfigReg57;
    809                                              	      when b"111010" =>
    810             1                    ***0***     	        reg_data_out <= rdRegsIn.cfigReg58;
    811                                              	      when b"111011" =>
    812             1                    ***0***     	        reg_data_out <= rdRegsIn.cfigReg59;
    813                                              	      when b"111100" =>
    814             1                    ***0***     	        reg_data_out <= rdRegsIn.cfigReg60;
    815                                              	      when b"111101" =>
    816             1                    ***0***     	        reg_data_out <= rdRegsIn.cfigReg61;
    817                                              	      when b"111110" =>
    818             1                    ***0***     	        reg_data_out <= rdRegsIn.cfigReg62;
    819                                              	      when b"111111" =>
    820             1                          4     	        reg_data_out <= rdRegsIn.cfigReg63;
    821                                                        when others =>
    822             1                          2                 reg_data_out  <= (others => '0');
    823                                                      end case;
    824                                                  end process;
    825                                                  
    826                                                  process( ACLK ) begin
    827                                                    if (rising_edge (ACLK)) then
    828                                                      if ( ARESETN = '0' ) then
    829             1                          3               axi_rdata  <= (others => '0');
    830                                                      else
    831                                                        if (slv_reg_rden = '1') then
    832             1                    ***0***                   axi_rdata <= reg_data_out;     
    833                                                        end if;   
    834                                                      end if;
    835                                                    end if;
    836                                                  end process;
    837                                              
    838                                                  cpuOut: process (ACLK) begin
    839                                                      if (rising_edge (ACLK)) then
    840             1                        220                 wrRegsOut <= localRegs;
    841                                                      end if;
    842                                                  end process cpuOut;
    843                                              
    844                                              end arch_imp;

Branch Coverage:
    Enabled Coverage            Active      Hits    Misses % Covered
    ----------------            ------      ----    ------ ---------
    Branches                       302        35       267      11.5

================================Branch Details================================

Branch Coverage for file ../modules/dut/vfpConfig.vhd --

------------------------------------IF Branch------------------------------------
    68                                         3     Count coming in to IF
    68              1                          3           if rising_edge(ACLK) then 
                                            ECOP     All False Count
Branch totals: 1 hit of 1 branch = 100.0%

------------------------------------IF Branch------------------------------------
    69                                         3     Count coming in to IF
    69              1                          2             if ARESETN = '0' then
    72              1                          1             else
Branch totals: 2 hits of 2 branches = 100.0%

------------------------------------IF Branch------------------------------------
    73                                         1     Count coming in to IF
    73              1                    ***0***               if (axi_awready = '0' and AWVALID = '1' and WVALID = '1' and aw_en = '1') then
    75              1                    ***0***                 elsif (BREADY = '1' and axi_bvalid = '1') then
    78              1                          1               else
Branch totals: 1 hit of 3 branches = 33.3%

------------------------------------IF Branch------------------------------------
    86                                         3     Count coming in to IF
    86              1                          3           if rising_edge(ACLK) then 
                                            ECOP     All False Count
Branch totals: 1 hit of 1 branch = 100.0%

------------------------------------IF Branch------------------------------------
    87                                         3     Count coming in to IF
    87              1                          2             if ARESETN = '0' then
    89              1                          1             else
Branch totals: 2 hits of 2 branches = 100.0%

------------------------------------IF Branch------------------------------------
    90                                         1     Count coming in to IF
    90              1                    ***0***               if (axi_awready = '0' and AWVALID = '1' and WVALID = '1' and aw_en = '1') then
                                               1     All False Count
Branch totals: 1 hit of 2 branches = 50.0%

------------------------------------IF Branch------------------------------------
    98                                         3     Count coming in to IF
    98              1                          3           if rising_edge(ACLK) then 
                                            ECOP     All False Count
Branch totals: 1 hit of 1 branch = 100.0%

------------------------------------IF Branch------------------------------------
    99                                         3     Count coming in to IF
    99              1                          2             if ARESETN = '0' then
    101             1                          1             else
Branch totals: 2 hits of 2 branches = 100.0%

------------------------------------IF Branch------------------------------------
    102                                        1     Count coming in to IF
    102             1                    ***0***               if (axi_wready = '0' and WVALID = '1' and AWVALID = '1' and aw_en = '1') then
    104             1                          1               else
Branch totals: 1 hit of 2 branches = 50.0%

------------------------------------IF Branch------------------------------------
    114                                      220     Count coming in to IF
    114             1                        220     	  if rising_edge(ACLK) then 
                                            ECOP     All False Count
Branch totals: 1 hit of 1 branch = 100.0%

------------------------------------IF Branch------------------------------------
    115                                      220     Count coming in to IF
    115             1                         99     	    if ARESETN = '0' then
    180             1                        121     	    else
Branch totals: 2 hits of 2 branches = 100.0%

------------------------------------IF Branch------------------------------------
    182                                      121     Count coming in to IF
    182             1                    ***0***     	      if (slv_reg_wren = '1') then
                                             121     All False Count
Branch totals: 1 hit of 2 branches = 50.0%

------------------------------------CASE Branch------------------------------------
    183                                  ***0***     Count coming in to CASE
    184             1                    ***0***     	          when b"000000" =>
    190             1                    ***0***     	          when b"000001" =>
    196             1                    ***0***     	          when b"000010" =>
    202             1                    ***0***     	          when b"000011" =>
    208             1                    ***0***     	          when b"000100" =>
    214             1                    ***0***     	          when b"000101" =>
    220             1                    ***0***     	          when b"000110" =>
    226             1                    ***0***     	          when b"000111" =>
    232             1                    ***0***     	          when b"001000" =>
    238             1                    ***0***     	          when b"001001" =>
    244             1                    ***0***     	          when b"001010" =>
    250             1                    ***0***     	          when b"001011" =>
    256             1                    ***0***     	          when b"001100" =>
    262             1                    ***0***     	          when b"001101" =>
    268             1                    ***0***     	          when b"001110" =>
    274             1                    ***0***     	          when b"001111" =>
    280             1                    ***0***     	          when b"010000" =>
    286             1                    ***0***     	          when b"010001" =>
    292             1                    ***0***     	          when b"010010" =>
    298             1                    ***0***     	          when b"010011" =>
    304             1                    ***0***     	          when b"010100" =>
    310             1                    ***0***     	          when b"010101" =>
    316             1                    ***0***     	          when b"010110" =>
    322             1                    ***0***     	          when b"010111" =>
    328             1                    ***0***     	          when b"011000" =>
    334             1                    ***0***     	          when b"011001" =>
    340             1                    ***0***     	          when b"011010" =>
    346             1                    ***0***     	          when b"011011" =>
    352             1                    ***0***     	          when b"011100" =>
    358             1                    ***0***     	          when b"011101" =>
    364             1                    ***0***     	          when b"011110" =>
    370             1                    ***0***     	          when b"011111" =>
    376             1                    ***0***     	          when b"100000" =>
    382             1                    ***0***     	          when b"100001" =>
    388             1                    ***0***     	          when b"100010" =>
    394             1                    ***0***     	          when b"100011" =>
    400             1                    ***0***     	          when b"100100" =>
    406             1                    ***0***     	          when b"100101" =>
    412             1                    ***0***     	          when b"100110" =>
    418             1                    ***0***     	          when b"100111" =>
    424             1                    ***0***     	          when b"101000" =>
    430             1                    ***0***     	          when b"101001" =>
    436             1                    ***0***     	          when b"101010" =>
    442             1                    ***0***     	          when b"101011" =>
    448             1                    ***0***     	          when b"101100" =>
    454             1                    ***0***     	          when b"101101" =>
    460             1                    ***0***     	          when b"101110" =>
    466             1                    ***0***     	          when b"101111" =>
    472             1                    ***0***     	          when b"110000" =>
    478             1                    ***0***     	          when b"110001" =>
    484             1                    ***0***     	          when b"110010" =>
    490             1                    ***0***     	          when b"110011" =>
    496             1                    ***0***     	          when b"110100" =>
    502             1                    ***0***     	          when b"110101" =>
    508             1                    ***0***     	          when b"110110" =>
    514             1                    ***0***     	          when b"110111" =>
    520             1                    ***0***     	          when b"111000" =>
    526             1                    ***0***     	          when b"111001" =>
    532             1                    ***0***     	          when b"111010" =>
    538             1                    ***0***     	          when b"111011" =>
    544             1                    ***0***     	          when b"111100" =>
    550             1                    ***0***     	          when b"111101" =>
    556             1                    ***0***     	          when b"111110" =>
    562             1                    ***0***     	          when b"111111" =>
    568             1                    ***0***     	          when others =>
Branch totals: 0 hits of 65 branches = 0.0%

------------------------------------IF Branch------------------------------------
    186                                  ***0***     Count coming in to IF
    186             1                    ***0***     	              if ( WSTRB(byte_index) = '1' ) then
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.0%

------------------------------------IF Branch------------------------------------
    192                                  ***0***     Count coming in to IF
    192             1                    ***0***     	              if ( WSTRB(byte_index) = '1' ) then
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.0%

------------------------------------IF Branch------------------------------------
    198                                  ***0***     Count coming in to IF
    198             1                    ***0***     	              if ( WSTRB(byte_index) = '1' ) then
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.0%

------------------------------------IF Branch------------------------------------
    204                                  ***0***     Count coming in to IF
    204             1                    ***0***     	              if ( WSTRB(byte_index) = '1' ) then
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.0%

------------------------------------IF Branch------------------------------------
    210                                  ***0***     Count coming in to IF
    210             1                    ***0***     	              if ( WSTRB(byte_index) = '1' ) then
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.0%

------------------------------------IF Branch------------------------------------
    216                                  ***0***     Count coming in to IF
    216             1                    ***0***     	              if ( WSTRB(byte_index) = '1' ) then
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.0%

------------------------------------IF Branch------------------------------------
    222                                  ***0***     Count coming in to IF
    222             1                    ***0***     	              if ( WSTRB(byte_index) = '1' ) then
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.0%

------------------------------------IF Branch------------------------------------
    228                                  ***0***     Count coming in to IF
    228             1                    ***0***     	              if ( WSTRB(byte_index) = '1' ) then
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.0%

------------------------------------IF Branch------------------------------------
    234                                  ***0***     Count coming in to IF
    234             1                    ***0***     	              if ( WSTRB(byte_index) = '1' ) then
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.0%

------------------------------------IF Branch------------------------------------
    240                                  ***0***     Count coming in to IF
    240             1                    ***0***     	              if ( WSTRB(byte_index) = '1' ) then
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.0%

------------------------------------IF Branch------------------------------------
    246                                  ***0***     Count coming in to IF
    246             1                    ***0***     	              if ( WSTRB(byte_index) = '1' ) then
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.0%

------------------------------------IF Branch------------------------------------
    252                                  ***0***     Count coming in to IF
    252             1                    ***0***     	              if ( WSTRB(byte_index) = '1' ) then
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.0%

------------------------------------IF Branch------------------------------------
    258                                  ***0***     Count coming in to IF
    258             1                    ***0***     	              if ( WSTRB(byte_index) = '1' ) then
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.0%

------------------------------------IF Branch------------------------------------
    264                                  ***0***     Count coming in to IF
    264             1                    ***0***     	              if ( WSTRB(byte_index) = '1' ) then
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.0%

------------------------------------IF Branch------------------------------------
    270                                  ***0***     Count coming in to IF
    270             1                    ***0***     	              if ( WSTRB(byte_index) = '1' ) then
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.0%

------------------------------------IF Branch------------------------------------
    276                                  ***0***     Count coming in to IF
    276             1                    ***0***     	              if ( WSTRB(byte_index) = '1' ) then
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.0%

------------------------------------IF Branch------------------------------------
    282                                  ***0***     Count coming in to IF
    282             1                    ***0***     	              if ( WSTRB(byte_index) = '1' ) then
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.0%

------------------------------------IF Branch------------------------------------
    288                                  ***0***     Count coming in to IF
    288             1                    ***0***     	              if ( WSTRB(byte_index) = '1' ) then
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.0%

------------------------------------IF Branch------------------------------------
    294                                  ***0***     Count coming in to IF
    294             1                    ***0***     	              if ( WSTRB(byte_index) = '1' ) then
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.0%

------------------------------------IF Branch------------------------------------
    300                                  ***0***     Count coming in to IF
    300             1                    ***0***     	              if ( WSTRB(byte_index) = '1' ) then
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.0%

------------------------------------IF Branch------------------------------------
    306                                  ***0***     Count coming in to IF
    306             1                    ***0***     	              if ( WSTRB(byte_index) = '1' ) then
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.0%

------------------------------------IF Branch------------------------------------
    312                                  ***0***     Count coming in to IF
    312             1                    ***0***     	              if ( WSTRB(byte_index) = '1' ) then
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.0%

------------------------------------IF Branch------------------------------------
    318                                  ***0***     Count coming in to IF
    318             1                    ***0***     	              if ( WSTRB(byte_index) = '1' ) then
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.0%

------------------------------------IF Branch------------------------------------
    324                                  ***0***     Count coming in to IF
    324             1                    ***0***     	              if ( WSTRB(byte_index) = '1' ) then
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.0%

------------------------------------IF Branch------------------------------------
    330                                  ***0***     Count coming in to IF
    330             1                    ***0***     	              if ( WSTRB(byte_index) = '1' ) then
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.0%

------------------------------------IF Branch------------------------------------
    336                                  ***0***     Count coming in to IF
    336             1                    ***0***     	              if ( WSTRB(byte_index) = '1' ) then
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.0%

------------------------------------IF Branch------------------------------------
    342                                  ***0***     Count coming in to IF
    342             1                    ***0***     	              if ( WSTRB(byte_index) = '1' ) then
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.0%

------------------------------------IF Branch------------------------------------
    348                                  ***0***     Count coming in to IF
    348             1                    ***0***     	              if ( WSTRB(byte_index) = '1' ) then
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.0%

------------------------------------IF Branch------------------------------------
    354                                  ***0***     Count coming in to IF
    354             1                    ***0***     	              if ( WSTRB(byte_index) = '1' ) then
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.0%

------------------------------------IF Branch------------------------------------
    360                                  ***0***     Count coming in to IF
    360             1                    ***0***     	              if ( WSTRB(byte_index) = '1' ) then
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.0%

------------------------------------IF Branch------------------------------------
    366                                  ***0***     Count coming in to IF
    366             1                    ***0***     	              if ( WSTRB(byte_index) = '1' ) then
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.0%

------------------------------------IF Branch------------------------------------
    372                                  ***0***     Count coming in to IF
    372             1                    ***0***     	              if ( WSTRB(byte_index) = '1' ) then
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.0%

------------------------------------IF Branch------------------------------------
    378                                  ***0***     Count coming in to IF
    378             1                    ***0***     	              if ( WSTRB(byte_index) = '1' ) then
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.0%

------------------------------------IF Branch------------------------------------
    384                                  ***0***     Count coming in to IF
    384             1                    ***0***     	              if ( WSTRB(byte_index) = '1' ) then
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.0%

------------------------------------IF Branch------------------------------------
    390                                  ***0***     Count coming in to IF
    390             1                    ***0***     	              if ( WSTRB(byte_index) = '1' ) then
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.0%

------------------------------------IF Branch------------------------------------
    396                                  ***0***     Count coming in to IF
    396             1                    ***0***     	              if ( WSTRB(byte_index) = '1' ) then
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.0%

------------------------------------IF Branch------------------------------------
    402                                  ***0***     Count coming in to IF
    402             1                    ***0***     	              if ( WSTRB(byte_index) = '1' ) then
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.0%

------------------------------------IF Branch------------------------------------
    408                                  ***0***     Count coming in to IF
    408             1                    ***0***     	              if ( WSTRB(byte_index) = '1' ) then
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.0%

------------------------------------IF Branch------------------------------------
    414                                  ***0***     Count coming in to IF
    414             1                    ***0***     	              if ( WSTRB(byte_index) = '1' ) then
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.0%

------------------------------------IF Branch------------------------------------
    420                                  ***0***     Count coming in to IF
    420             1                    ***0***     	              if ( WSTRB(byte_index) = '1' ) then
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.0%

------------------------------------IF Branch------------------------------------
    426                                  ***0***     Count coming in to IF
    426             1                    ***0***     	              if ( WSTRB(byte_index) = '1' ) then
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.0%

------------------------------------IF Branch------------------------------------
    432                                  ***0***     Count coming in to IF
    432             1                    ***0***     	              if ( WSTRB(byte_index) = '1' ) then
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.0%

------------------------------------IF Branch------------------------------------
    438                                  ***0***     Count coming in to IF
    438             1                    ***0***     	              if ( WSTRB(byte_index) = '1' ) then
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.0%

------------------------------------IF Branch------------------------------------
    444                                  ***0***     Count coming in to IF
    444             1                    ***0***     	              if ( WSTRB(byte_index) = '1' ) then
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.0%

------------------------------------IF Branch------------------------------------
    450                                  ***0***     Count coming in to IF
    450             1                    ***0***     	              if ( WSTRB(byte_index) = '1' ) then
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.0%

------------------------------------IF Branch------------------------------------
    456                                  ***0***     Count coming in to IF
    456             1                    ***0***     	              if ( WSTRB(byte_index) = '1' ) then
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.0%

------------------------------------IF Branch------------------------------------
    462                                  ***0***     Count coming in to IF
    462             1                    ***0***     	              if ( WSTRB(byte_index) = '1' ) then
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.0%

------------------------------------IF Branch------------------------------------
    468                                  ***0***     Count coming in to IF
    468             1                    ***0***     	              if ( WSTRB(byte_index) = '1' ) then
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.0%

------------------------------------IF Branch------------------------------------
    474                                  ***0***     Count coming in to IF
    474             1                    ***0***     	              if ( WSTRB(byte_index) = '1' ) then
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.0%

------------------------------------IF Branch------------------------------------
    480                                  ***0***     Count coming in to IF
    480             1                    ***0***     	              if ( WSTRB(byte_index) = '1' ) then
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.0%

------------------------------------IF Branch------------------------------------
    486                                  ***0***     Count coming in to IF
    486             1                    ***0***     	              if ( WSTRB(byte_index) = '1' ) then
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.0%

------------------------------------IF Branch------------------------------------
    492                                  ***0***     Count coming in to IF
    492             1                    ***0***     	              if ( WSTRB(byte_index) = '1' ) then
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.0%

------------------------------------IF Branch------------------------------------
    498                                  ***0***     Count coming in to IF
    498             1                    ***0***     	              if ( WSTRB(byte_index) = '1' ) then
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.0%

------------------------------------IF Branch------------------------------------
    504                                  ***0***     Count coming in to IF
    504             1                    ***0***     	              if ( WSTRB(byte_index) = '1' ) then
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.0%

------------------------------------IF Branch------------------------------------
    510                                  ***0***     Count coming in to IF
    510             1                    ***0***     	              if ( WSTRB(byte_index) = '1' ) then
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.0%

------------------------------------IF Branch------------------------------------
    516                                  ***0***     Count coming in to IF
    516             1                    ***0***     	              if ( WSTRB(byte_index) = '1' ) then
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.0%

------------------------------------IF Branch------------------------------------
    522                                  ***0***     Count coming in to IF
    522             1                    ***0***     	              if ( WSTRB(byte_index) = '1' ) then
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.0%

------------------------------------IF Branch------------------------------------
    528                                  ***0***     Count coming in to IF
    528             1                    ***0***     	              if ( WSTRB(byte_index) = '1' ) then
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.0%

------------------------------------IF Branch------------------------------------
    534                                  ***0***     Count coming in to IF
    534             1                    ***0***     	              if ( WSTRB(byte_index) = '1' ) then
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.0%

------------------------------------IF Branch------------------------------------
    540                                  ***0***     Count coming in to IF
    540             1                    ***0***     	              if ( WSTRB(byte_index) = '1' ) then
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.0%

------------------------------------IF Branch------------------------------------
    546                                  ***0***     Count coming in to IF
    546             1                    ***0***     	              if ( WSTRB(byte_index) = '1' ) then
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.0%

------------------------------------IF Branch------------------------------------
    552                                  ***0***     Count coming in to IF
    552             1                    ***0***     	              if ( WSTRB(byte_index) = '1' ) then
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.0%

------------------------------------IF Branch------------------------------------
    558                                  ***0***     Count coming in to IF
    558             1                    ***0***     	              if ( WSTRB(byte_index) = '1' ) then
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.0%

------------------------------------IF Branch------------------------------------
    564                                  ***0***     Count coming in to IF
    564             1                    ***0***     	              if ( WSTRB(byte_index) = '1' ) then
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.0%

------------------------------------IF Branch------------------------------------
    641                                        3     Count coming in to IF
    641             1                          3           if rising_edge(ACLK) then 
                                            ECOP     All False Count
Branch totals: 1 hit of 1 branch = 100.0%

------------------------------------IF Branch------------------------------------
    642                                        3     Count coming in to IF
    642             1                          2             if ARESETN = '0' then
    645             1                          1             else
Branch totals: 2 hits of 2 branches = 100.0%

------------------------------------IF Branch------------------------------------
    646                                        1     Count coming in to IF
    646             1                    ***0***               if (axi_awready = '1' and AWVALID = '1' and axi_wready = '1' and WVALID = '1' and axi_bvalid = '0'  ) then
    649             1                    ***0***               elsif (BREADY = '1' and axi_bvalid = '1') then   
                                               1     All False Count
Branch totals: 1 hit of 3 branches = 33.3%

------------------------------------IF Branch------------------------------------
    657                                        3     Count coming in to IF
    657             1                          3           if rising_edge(ACLK) then 
                                            ECOP     All False Count
Branch totals: 1 hit of 1 branch = 100.0%

------------------------------------IF Branch------------------------------------
    658                                        3     Count coming in to IF
    658             1                          2             if ARESETN = '0' then
    661             1                          1             else
Branch totals: 2 hits of 2 branches = 100.0%

------------------------------------IF Branch------------------------------------
    662                                        1     Count coming in to IF
    662             1                    ***0***               if (axi_arready = '0' and ARVALID = '1') then
    665             1                          1               else
Branch totals: 1 hit of 2 branches = 50.0%

------------------------------------IF Branch------------------------------------
    673                                        3     Count coming in to IF
    673             1                          3           if rising_edge(ACLK) then
                                            ECOP     All False Count
Branch totals: 1 hit of 1 branch = 100.0%

------------------------------------IF Branch------------------------------------
    674                                        3     Count coming in to IF
    674             1                          2             if ARESETN = '0' then
    677             1                          1             else
Branch totals: 2 hits of 2 branches = 100.0%

------------------------------------IF Branch------------------------------------
    678                                        1     Count coming in to IF
    678             1                    ***0***               if (axi_arready = '1' and ARVALID = '1' and axi_rvalid = '0') then
    681             1                    ***0***               elsif (axi_rvalid = '1' and RREADY = '1') then
                                               1     All False Count
Branch totals: 1 hit of 3 branches = 33.3%

------------------------------------CASE Branch------------------------------------
    692                                        6     Count coming in to CASE
    693             1                    ***0***               when b"000000" =>
    695             1                    ***0***               when b"000001" =>
    697             1                    ***0***               when b"000010" =>
    699             1                    ***0***               when b"000011" =>
    701             1                    ***0***               when b"000100" =>
    703             1                    ***0***               when b"000101" =>
    705             1                    ***0***               when b"000110" =>
    707             1                    ***0***               when b"000111" =>
    709             1                    ***0***               when b"001000" =>
    711             1                    ***0***               when b"001001" =>
    713             1                    ***0***               when b"001010" =>
    715             1                    ***0***               when b"001011" =>
    717             1                    ***0***               when b"001100" =>
    719             1                    ***0***               when b"001101" =>
    721             1                    ***0***               when b"001110" =>
    723             1                    ***0***               when b"001111" =>
    725             1                    ***0***               when b"010000" =>
    727             1                    ***0***               when b"010001" =>
    729             1                    ***0***               when b"010010" =>
    731             1                    ***0***               when b"010011" =>
    733             1                    ***0***               when b"010100" =>
    735             1                    ***0***               when b"010101" =>
    737             1                    ***0***               when b"010110" =>
    739             1                    ***0***               when b"010111" =>
    741             1                    ***0***               when b"011000" =>
    743             1                    ***0***               when b"011001" =>
    745             1                    ***0***               when b"011010" =>
    747             1                    ***0***               when b"011011" =>
    749             1                    ***0***               when b"011100" =>
    751             1                    ***0***               when b"011101" =>
    753             1                    ***0***               when b"011110" =>
    755             1                    ***0***               when b"011111" =>
    757             1                    ***0***     	      when b"100000" =>
    759             1                    ***0***     	      when b"100001" =>
    761             1                    ***0***     	      when b"100010" =>
    763             1                    ***0***     	      when b"100011" =>
    765             1                    ***0***     	      when b"100100" =>
    767             1                    ***0***     	      when b"100101" =>
    769             1                    ***0***     	      when b"100110" =>
    771             1                    ***0***     	      when b"100111" =>
    773             1                    ***0***     	      when b"101000" =>
    775             1                    ***0***     	      when b"101001" =>
    777             1                    ***0***     	      when b"101010" =>
    779             1                    ***0***     	      when b"101011" =>
    781             1                    ***0***     	      when b"101100" =>
    783             1                    ***0***     	      when b"101101" =>
    785             1                    ***0***     	      when b"101110" =>
    787             1                    ***0***     	      when b"101111" =>
    789             1                    ***0***     	      when b"110000" =>
    791             1                    ***0***     	      when b"110001" =>
    793             1                    ***0***     	      when b"110010" =>
    795             1                    ***0***     	      when b"110011" =>
    797             1                    ***0***     	      when b"110100" =>
    799             1                    ***0***     	      when b"110101" =>
    801             1                    ***0***     	      when b"110110" =>
    803             1                    ***0***     	      when b"110111" =>
    805             1                    ***0***     	      when b"111000" =>
    807             1                    ***0***     	      when b"111001" =>
    809             1                    ***0***     	      when b"111010" =>
    811             1                    ***0***     	      when b"111011" =>
    813             1                    ***0***     	      when b"111100" =>
    815             1                    ***0***     	      when b"111101" =>
    817             1                    ***0***     	      when b"111110" =>
    819             1                          4     	      when b"111111" =>
    821             1                          2               when others =>
Branch totals: 2 hits of 65 branches = 3.0%

------------------------------------IF Branch------------------------------------
    827                                        4     Count coming in to IF
    827             1                          4           if (rising_edge (ACLK)) then
                                            ECOP     All False Count
Branch totals: 1 hit of 1 branch = 100.0%

------------------------------------IF Branch------------------------------------
    828                                        4     Count coming in to IF
    828             1                          3             if ( ARESETN = '0' ) then
    830             1                          1             else
Branch totals: 2 hits of 2 branches = 100.0%

------------------------------------IF Branch------------------------------------
    831                                        1     Count coming in to IF
    831             1                    ***0***               if (slv_reg_rden = '1') then
                                               1     All False Count
Branch totals: 1 hit of 2 branches = 50.0%

------------------------------------IF Branch------------------------------------
    839                                      220     Count coming in to IF
    839             1                        220             if (rising_edge (ACLK)) then
                                            ECOP     All False Count
Branch totals: 1 hit of 1 branch = 100.0%


Condition Coverage:
    Enabled Coverage            Active   Covered    Misses % Covered
    ----------------            ------      ----    ------ ---------
    FEC Condition Terms             28         0        28       0.0

================================Condition Details================================

Condition Coverage for file ../modules/dut/vfpConfig.vhd --

----------------Focused Condition View-------------------
Line       73 Item    1  ((((axi_awready = '0') and (AWVALID = '1')) and (WVALID = '1')) and (aw_en = '1'))
Condition totals: 0 of 4 input terms covered = 0.0%

           Input Term   Covered  Reason for no coverage   Hint
          -----------  --------  -----------------------  --------------
  (axi_awready = '0')         N  No hits                  Hit '_0' and '_1'
      (AWVALID = '1')         N  '_1' not hit             Hit '_1'
       (WVALID = '1')         N  No hits                  Hit '_0' and '_1'
        (aw_en = '1')         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target             Non-masking condition(s)      
 ---------  ---------  --------------------   -------------------------     
  Row   1:    ***0***  (axi_awready = '0')_0  -                             
  Row   2:    ***0***  (axi_awready = '0')_1  (aw_en = '1') && (WVALID = '1') && (AWVALID = '1')
  Row   3:          1  (AWVALID = '1')_0      (axi_awready = '0')           
  Row   4:    ***0***  (AWVALID = '1')_1      (aw_en = '1') && (WVALID = '1') && (axi_awready = '0')
  Row   5:    ***0***  (WVALID = '1')_0       ((axi_awready = '0') and (AWVALID = '1'))
  Row   6:    ***0***  (WVALID = '1')_1       (aw_en = '1') && ((axi_awready = '0') and (AWVALID = '1'))
  Row   7:    ***0***  (aw_en = '1')_0        (((axi_awready = '0') and (AWVALID = '1')) and (WVALID = '1'))
  Row   8:    ***0***  (aw_en = '1')_1        (((axi_awready = '0') and (AWVALID = '1')) and (WVALID = '1'))

----------------Focused Condition View-------------------
Line       75 Item    1  ((BREADY = '1') and (axi_bvalid = '1'))
Condition totals: 0 of 2 input terms covered = 0.0%

          Input Term   Covered  Reason for no coverage   Hint
         -----------  --------  -----------------------  --------------
      (BREADY = '1')         N  '_1' not hit             Hit '_1'
  (axi_bvalid = '1')         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:          1  (BREADY = '1')_0      -                             
  Row   2:    ***0***  (BREADY = '1')_1      (axi_bvalid = '1')            
  Row   3:    ***0***  (axi_bvalid = '1')_0  (BREADY = '1')                
  Row   4:    ***0***  (axi_bvalid = '1')_1  (BREADY = '1')                

----------------Focused Condition View-------------------
Line       90 Item    1  ((((axi_awready = '0') and (AWVALID = '1')) and (WVALID = '1')) and (aw_en = '1'))
Condition totals: 0 of 4 input terms covered = 0.0%

           Input Term   Covered  Reason for no coverage   Hint
          -----------  --------  -----------------------  --------------
  (axi_awready = '0')         N  No hits                  Hit '_0' and '_1'
      (AWVALID = '1')         N  '_1' not hit             Hit '_1'
       (WVALID = '1')         N  No hits                  Hit '_0' and '_1'
        (aw_en = '1')         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target             Non-masking condition(s)      
 ---------  ---------  --------------------   -------------------------     
  Row   1:    ***0***  (axi_awready = '0')_0  -                             
  Row   2:    ***0***  (axi_awready = '0')_1  (aw_en = '1') && (WVALID = '1') && (AWVALID = '1')
  Row   3:          1  (AWVALID = '1')_0      (axi_awready = '0')           
  Row   4:    ***0***  (AWVALID = '1')_1      (aw_en = '1') && (WVALID = '1') && (axi_awready = '0')
  Row   5:    ***0***  (WVALID = '1')_0       ((axi_awready = '0') and (AWVALID = '1'))
  Row   6:    ***0***  (WVALID = '1')_1       (aw_en = '1') && ((axi_awready = '0') and (AWVALID = '1'))
  Row   7:    ***0***  (aw_en = '1')_0        (((axi_awready = '0') and (AWVALID = '1')) and (WVALID = '1'))
  Row   8:    ***0***  (aw_en = '1')_1        (((axi_awready = '0') and (AWVALID = '1')) and (WVALID = '1'))

----------------Focused Condition View-------------------
Line       102 Item    1  ((((axi_wready = '0') and (WVALID = '1')) and (AWVALID = '1')) and (aw_en = '1'))
Condition totals: 0 of 4 input terms covered = 0.0%

          Input Term   Covered  Reason for no coverage   Hint
         -----------  --------  -----------------------  --------------
  (axi_wready = '0')         N  No hits                  Hit '_0' and '_1'
      (WVALID = '1')         N  '_1' not hit             Hit '_1'
     (AWVALID = '1')         N  No hits                  Hit '_0' and '_1'
       (aw_en = '1')         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:    ***0***  (axi_wready = '0')_0  -                             
  Row   2:    ***0***  (axi_wready = '0')_1  (aw_en = '1') && (AWVALID = '1') && (WVALID = '1')
  Row   3:          1  (WVALID = '1')_0      (axi_wready = '0')            
  Row   4:    ***0***  (WVALID = '1')_1      (aw_en = '1') && (AWVALID = '1') && (axi_wready = '0')
  Row   5:    ***0***  (AWVALID = '1')_0     ((axi_wready = '0') and (WVALID = '1'))
  Row   6:    ***0***  (AWVALID = '1')_1     (aw_en = '1') && ((axi_wready = '0') and (WVALID = '1'))
  Row   7:    ***0***  (aw_en = '1')_0       (((axi_wready = '0') and (WVALID = '1')) and (AWVALID = '1'))
  Row   8:    ***0***  (aw_en = '1')_1       (((axi_wready = '0') and (WVALID = '1')) and (AWVALID = '1'))

----------------Focused Condition View-------------------
Line       646 Item    1  (((((axi_awready = '1') and (AWVALID = '1')) and (axi_wready = '1')) and (WVALID = '1')) and (axi_bvalid = '0'))
Condition totals: 0 of 5 input terms covered = 0.0%

           Input Term   Covered  Reason for no coverage   Hint
          -----------  --------  -----------------------  --------------
  (axi_awready = '1')         N  '_1' not hit             Hit '_1'
      (AWVALID = '1')         N  No hits                  Hit '_0' and '_1'
   (axi_wready = '1')         N  No hits                  Hit '_0' and '_1'
       (WVALID = '1')         N  No hits                  Hit '_0' and '_1'
   (axi_bvalid = '0')         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target             Non-masking condition(s)      
 ---------  ---------  --------------------   -------------------------     
  Row   1:          1  (axi_awready = '1')_0  -                             
  Row   2:    ***0***  (axi_awready = '1')_1  (axi_bvalid = '0') && (WVALID = '1') && (axi_wready = '1') && (AWVALID = '1')
  Row   3:    ***0***  (AWVALID = '1')_0      (axi_awready = '1')           
  Row   4:    ***0***  (AWVALID = '1')_1      (axi_bvalid = '0') && (WVALID = '1') && (axi_wready = '1') && (axi_awready = '1')
  Row   5:    ***0***  (axi_wready = '1')_0   ((axi_awready = '1') and (AWVALID = '1'))
  Row   6:    ***0***  (axi_wready = '1')_1   (axi_bvalid = '0') && (WVALID = '1') && ((axi_awready = '1') and (AWVALID = '1'))
  Row   7:    ***0***  (WVALID = '1')_0       (((axi_awready = '1') and (AWVALID = '1')) and (axi_wready = '1'))
  Row   8:    ***0***  (WVALID = '1')_1       (axi_bvalid = '0') && (((axi_awready = '1') and (AWVALID = '1')) and (axi_wready = '1'))
  Row   9:    ***0***  (axi_bvalid = '0')_0   ((((axi_awready = '1') and (AWVALID = '1')) and (axi_wready = '1')) and (WVALID = '1'))
 Row   10:    ***0***  (axi_bvalid = '0')_1   ((((axi_awready = '1') and (AWVALID = '1')) and (axi_wready = '1')) and (WVALID = '1'))

----------------Focused Condition View-------------------
Line       649 Item    1  ((BREADY = '1') and (axi_bvalid = '1'))
Condition totals: 0 of 2 input terms covered = 0.0%

          Input Term   Covered  Reason for no coverage   Hint
         -----------  --------  -----------------------  --------------
      (BREADY = '1')         N  '_1' not hit             Hit '_1'
  (axi_bvalid = '1')         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:          1  (BREADY = '1')_0      -                             
  Row   2:    ***0***  (BREADY = '1')_1      (axi_bvalid = '1')            
  Row   3:    ***0***  (axi_bvalid = '1')_0  (BREADY = '1')                
  Row   4:    ***0***  (axi_bvalid = '1')_1  (BREADY = '1')                

----------------Focused Condition View-------------------
Line       662 Item    1  ((axi_arready = '0') and (ARVALID = '1'))
Condition totals: 0 of 2 input terms covered = 0.0%

           Input Term   Covered  Reason for no coverage   Hint
          -----------  --------  -----------------------  --------------
  (axi_arready = '0')         N  No hits                  Hit '_0' and '_1'
      (ARVALID = '1')         N  '_1' not hit             Hit '_1'

     Rows:       Hits  FEC Target             Non-masking condition(s)      
 ---------  ---------  --------------------   -------------------------     
  Row   1:    ***0***  (axi_arready = '0')_0  -                             
  Row   2:    ***0***  (axi_arready = '0')_1  (ARVALID = '1')               
  Row   3:          1  (ARVALID = '1')_0      (axi_arready = '0')           
  Row   4:    ***0***  (ARVALID = '1')_1      (axi_arready = '0')           

----------------Focused Condition View-------------------
Line       678 Item    1  (((axi_arready = '1') and (ARVALID = '1')) and (axi_rvalid = '0'))
Condition totals: 0 of 3 input terms covered = 0.0%

           Input Term   Covered  Reason for no coverage   Hint
          -----------  --------  -----------------------  --------------
  (axi_arready = '1')         N  '_1' not hit             Hit '_1'
      (ARVALID = '1')         N  No hits                  Hit '_0' and '_1'
   (axi_rvalid = '0')         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target             Non-masking condition(s)      
 ---------  ---------  --------------------   -------------------------     
  Row   1:          1  (axi_arready = '1')_0  -                             
  Row   2:    ***0***  (axi_arready = '1')_1  (axi_rvalid = '0') && (ARVALID = '1')
  Row   3:    ***0***  (ARVALID = '1')_0      (axi_arready = '1')           
  Row   4:    ***0***  (ARVALID = '1')_1      (axi_rvalid = '0') && (axi_arready = '1')
  Row   5:    ***0***  (axi_rvalid = '0')_0   ((axi_arready = '1') and (ARVALID = '1'))
  Row   6:    ***0***  (axi_rvalid = '0')_1   ((axi_arready = '1') and (ARVALID = '1'))

----------------Focused Condition View-------------------
Line       681 Item    1  ((axi_rvalid = '1') and (RREADY = '1'))
Condition totals: 0 of 2 input terms covered = 0.0%

          Input Term   Covered  Reason for no coverage   Hint
         -----------  --------  -----------------------  --------------
  (axi_rvalid = '1')         N  '_1' not hit             Hit '_1'
      (RREADY = '1')         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:          1  (axi_rvalid = '1')_0  -                             
  Row   2:    ***0***  (axi_rvalid = '1')_1  (RREADY = '1')                
  Row   3:    ***0***  (RREADY = '1')_0      (axi_rvalid = '1')            
  Row   4:    ***0***  (RREADY = '1')_1      (axi_rvalid = '1')            


Expression Coverage:
    Enabled Coverage            Active   Covered    Misses % Covered
    ----------------            ------      ----    ------ ---------
    FEC Expression Terms             7         0         7       0.0

================================Expression Details================================

Expression Coverage for file ../modules/dut/vfpConfig.vhd --

----------------Focused Expression View-----------------
Line       110 Item    1  (((axi_wready and WVALID) and axi_awready) and AWVALID)
Expression totals: 0 of 4 input terms covered = 0.0%

   Input Term   Covered  Reason for no coverage   Hint
  -----------  --------  -----------------------  --------------
   axi_wready         N  No hits                  Hit '_0' and '_1'
       WVALID         N  No hits                  Hit '_0' and '_1'
  axi_awready         N  No hits                  Hit '_0' and '_1'
      AWVALID         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:    ***0***  axi_wready_0          AWVALID && axi_awready && WVALID
  Row   2:    ***0***  axi_wready_1          AWVALID && axi_awready && WVALID
  Row   3:    ***0***  WVALID_0              AWVALID && axi_awready && axi_wready
  Row   4:    ***0***  WVALID_1              AWVALID && axi_awready && axi_wready
  Row   5:    ***0***  axi_awready_0         AWVALID && (axi_wready and WVALID)
  Row   6:    ***0***  axi_awready_1         AWVALID && (axi_wready and WVALID)
  Row   7:    ***0***  AWVALID_0             ((axi_wready and WVALID) and axi_awready)
  Row   8:    ***0***  AWVALID_1             ((axi_wready and WVALID) and axi_awready)

----------------Focused Expression View-----------------
Line       687 Item    1  ((axi_arready and ARVALID) and not(axi_rvalid))
Expression totals: 0 of 3 input terms covered = 0.0%

   Input Term   Covered  Reason for no coverage   Hint
  -----------  --------  -----------------------  --------------
  axi_arready         N  No hits                  Hit '_0' and '_1'
      ARVALID         N  No hits                  Hit '_0' and '_1'
   axi_rvalid         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:    ***0***  axi_arready_0         not axi_rvalid && ARVALID     
  Row   2:    ***0***  axi_arready_1         not axi_rvalid && ARVALID     
  Row   3:    ***0***  ARVALID_0             not axi_rvalid && axi_arready 
  Row   4:    ***0***  ARVALID_1             not axi_rvalid && axi_arready 
  Row   5:    ***0***  axi_rvalid_0          (axi_arready and ARVALID)     
  Row   6:    ***0***  axi_rvalid_1          (axi_arready and ARVALID)     


FSM Coverage:
    Enabled Coverage            Active      Hits    Misses % Covered
    ----------------            ------      ----    ------ ---------
    FSMs                                                       100.0
        States                       0         0         0     100.0
        Transitions                  0         0         0     100.0

=================================================================================
=== File: ../modules/top.sv
=================================================================================
Statement Coverage:
    Enabled Coverage            Active      Hits    Misses % Covered
    ----------------            ------      ----    ------ ---------
    Stmts                           26        26         0     100.0

================================Statement Details================================

Statement Coverage for file ../modules/top.sv --

    1                                                `include "uvm_macros.svh"
    2                                                package socTest_pkg;
    3                                                import uvm_pkg::*;
    4                                                //------------------------------------------------------------------------------------
    5                                                // Defines
    6                                                //------------------------------------------------------------------------------------
    7                                                typedef struct packed {
    8                                                   byte unsigned addr_width;
    9                                                   byte unsigned data_width;
    10                                               } width_confg1_t;
    11                                               
    12                                               typedef struct packed {
    13                                                  int unsigned payload_length;
    14                                               } width_confg2_t;
    15                                               
    16                                               typedef struct packed {
    17                                                  width_confg1_t w_p1;
    18                                                  width_confg2_t w_p2;
    19                                               } set_config;
    20                                               
    21                                               typedef enum { READ, WRITE } axiLite_txn_e;
    22                                               
    23                                               parameter set_config par_1 = '{ '{ addr_width: 11, data_width: 8 }, '{ payload_length: 2 } };
    24                                               parameter set_config par_2 = '{ '{ addr_width: 11, data_width: 8 }, '{ payload_length: 4 } };
    25                                               parameter set_config par_3 = '{ '{ addr_width: 11, data_width: 8 }, '{ payload_length: 3 } };
    26                                               
    27                                               
    28                                               //------------------------------------------------------------------------------------
    29                                               // UVM_CONFIGURATION
    30                                               //------------------------------------------------------------------------------------
    31                                               
    32                                               // UVM_OBJECT : TEMPLATE_CONFIGURATION [TEMPLATE]
    33                                               class template_configuration extends uvm_object;
    34                                                   `uvm_object_utils(template_configuration)
    35                                                   function new(string name = "");
    36                                                       super.new(name);
    37                                                   endfunction: new
    38                                               endclass: template_configuration
    39                                               // UVM_OBJECT : AXILITE_CONFIGURATION [AXILITE]
    40                                               class axiLite_configuration extends uvm_object;
    41                                                   `uvm_object_utils(axiLite_configuration)
    42                                                   function new(string name = "");
    43                                                       super.new(name);
    44                                                   endfunction: new
    45                                               endclass: axiLite_configuration
    46                                               
    47                                               // UVM_OBJECT : RGB_CONFIGURATION [RGB]
    48                                               class rgb_configuration extends uvm_object;
    49                                                   `uvm_object_utils(rgb_configuration)
    50                                                   function new(string name = "");
    51                                                       super.new(name);
    52                                                   endfunction: new
    53                                                   
    54                                                   rand int count;
    55                                                   constraint c_count    { count > 0; count < 128; }
    56                                               endclass: rgb_configuration
    57                                               
    58                                               
    59                                               //------------------------------------------------------------------------------------
    60                                               // UVM_SEQUENCE_ITEM
    61                                               //------------------------------------------------------------------------------------
    62                                               // UVM_SEQUENCE_ITEM : RGB_TRANSACTION [RGB]
    63                                               class rgb_transaction#(parameter set_config cfg = par_1) extends uvm_sequence_item;
    64                                                   rand bit[cfg.w_p1.data_width-1:0]       iRed;
    65                                                   rand bit[cfg.w_p1.data_width-1:0]       iGreen;
    66                                                   rand bit[cfg.w_p1.data_width-1:0]       iBlue;
    67                                                   rand bit            iPixelEn;
    68                                                   rand bit            iValid;
    69                                                   rand bit            iEof;
    70                                                   rand bit [cfg.w_p1.addr_width-1:0]      iX;
    71                                                   rand bit [cfg.w_p1.addr_width-1:0]      iY;
    72                                                   function new(string name = "");
    73                                                       super.new(name);
    74                                                   endfunction: new
    75                                                   `uvm_object_utils_begin(rgb_transaction#(cfg))
    76                                                       `uvm_field_int(iRed,         UVM_ALL_ON)
    77                                                       `uvm_field_int(iGreen,       UVM_ALL_ON)
    78                                                       `uvm_field_int(iBlue,        UVM_ALL_ON)
    79                                                       `uvm_field_int(iPixelEn,     UVM_ALL_ON)
    80                                                       `uvm_field_int(iEof,         UVM_ALL_ON)
    81                                                       `uvm_field_int(iValid,       UVM_ALL_ON)
    82                                                       `uvm_field_int(iX,           UVM_ALL_ON)
    83                                                       `uvm_field_int(iY,           UVM_ALL_ON)
    84                                                   `uvm_object_utils_end
    85                                               endclass: rgb_transaction
    86                                               // UVM_SEQUENCE_ITEM : AXILITE_TXN [AXILITE]
    87                                               class axiLite_transaction extends uvm_sequence_item;
    88                                                   rand bit [15:0]     addr;
    89                                                   rand bit [31:0]     data;
    90                                                   rand bit [31:0]     WDATA;
    91                                                   rand bit [31:0]     RDATA;
    92                                                   rand axiLite_txn_e  reqWriteRead;
    93                                                   rand int unsigned   cycles;
    94                                                   constraint c_cycles { 
    95                                                   cycles <= 20; }
    96                                                   function new (string name = "");
    97                                                       super.new(name);
    98                                                   endfunction
    99                                                   function string convert2string();
    100                                                      return $sformatf("addr='h%h, data='h%0h, cycles='d%0d",addr, data, cycles);
    101                                                  endfunction
    102                                                  `uvm_object_utils_begin(axiLite_transaction)
    103                                                      `uvm_field_int  (addr,                          UVM_DEFAULT)
    104                                                      `uvm_field_int  (data,                          UVM_DEFAULT)
    105                                                      `uvm_field_int  (WDATA,                         UVM_DEFAULT)
    106                                                      `uvm_field_int  (RDATA,                         UVM_DEFAULT)
    107                                                      `uvm_field_enum (axiLite_txn_e, reqWriteRead,   UVM_DEFAULT)    
    108                                                      `uvm_field_int  (cycles,                        UVM_DEFAULT)
    109                                                  `uvm_object_utils_end
    110                                              endclass: axiLite_transaction
    111                                              // UVM_SEQUENCE_ITEM : TEMPLATE_TRANSACTION [TEMPLATE]
    112                                              class template_transaction extends uvm_sequence_item;
    113                                                  rand bit[1:0] ina;
    114                                                  rand bit[1:0] inb;
    115                                                  bit[2:0]      out;
    116                                                  function new(string name = "");
    117                                                      super.new(name);
    118                                                  endfunction: new
    119                                                  `uvm_object_utils_begin(template_transaction)
    120                                                      `uvm_field_int(ina, UVM_ALL_ON)
    121                                                      `uvm_field_int(inb, UVM_ALL_ON)
    122                                                      `uvm_field_int(out, UVM_ALL_ON)
    123                                                  `uvm_object_utils_end
    124                                              endclass: template_transaction
    125                                              
    126                                              //------------------------------------------------------------------------------------
    127                                              // UVM_SEQUENCE
    128                                              //------------------------------------------------------------------------------------
    129                                              // UVM_SEQUENCE : TEMPLATE_SEQUENCER [TEMPLATE]
    130                                              class template_sequencer extends uvm_sequencer #(template_transaction);
    131                                                  `uvm_component_utils(template_sequencer)
    132                                                  function new(string name, uvm_component parent);
    133                                                      super.new(name, parent);
    134                                                  endfunction
    135                                              endclass: template_sequencer
    136                                              // UVM_SEQUENCE : AXILITE_SQR [AXILITE]
    137                                              class axiLite_sequencer extends uvm_sequencer #(axiLite_transaction);
    138                                                  int id;
    139                                                  `uvm_component_utils_begin(axiLite_sequencer)
    140                                                      `uvm_field_int(id, UVM_DEFAULT)
    141                                                  `uvm_component_utils_end
    142                                                  function new (string name, uvm_component parent);
    143                                                      super.new(name, parent);
    144                                                  endfunction
    145                                              endclass: axiLite_sequencer
    146                                              // UVM_SEQUENCE : RGB_SEQUENCER [RGB]
    147                                              class rgb_sequencer#(parameter set_config cfg = par_1) extends uvm_sequencer#(rgb_transaction#(cfg));
    148                                                  `uvm_component_param_utils(rgb_sequencer#(cfg))
    149                                                  function new(string name, uvm_component parent);
    150                                                      super.new(name, parent);
    151                                                  endfunction
    152                                              endclass: rgb_sequencer
    153                                              
    154                                              //------------------------------------------------------------------------------------
    155                                              // UVM_SEQUENCE
    156                                              //------------------------------------------------------------------------------------
    157                                              // UVM_SEQUENCE : RGB_RANDOM_SEQUENCE [RGB]
    158                                              class rgb_random_sequence#(parameter set_config cfg = par_1) extends uvm_sequence#(rgb_transaction#(cfg));
    159                                                  `uvm_object_param_utils(rgb_random_sequence#(cfg));
    160                                                  function new(string name = "rgb_random_sequence");
    161                                                      super.new(name);
    162                                                  endfunction : new
    163                                                  task body();
    164                                                  rgb_transaction#(cfg) frame_tx = rgb_transaction#(cfg)::type_id::create("frame_tx");
    165                                                      repeat (100000) begin : random_loop
    166                                                          start_item(frame_tx);
    167                                                          assert(frame_tx.randomize());
    168                                                          finish_item(frame_tx);
    169                                                      end : random_loop
    170                                                  endtask : body
    171                                              endclass : rgb_random_sequence
    172                                              
    173                                              // UVM_SEQUENCE : RANDOM_SEQUENCE_R1 [RGB]
    174                                              class random_sequence_r1#(parameter set_config cfg = par_1) extends uvm_sequence#(rgb_transaction#(cfg));
    175                                                  `uvm_object_param_utils(random_sequence_r1#(cfg));
    176                                                  function new(string name = "random_sequence_r1");
    177                                                      super.new(name);
    178                                                  endfunction : new
    179                                                  task body();
    180                                                  rgb_transaction#(cfg) frame_tx = rgb_transaction#(cfg)::type_id::create("frame_tx");
    181                                                  `uvm_info("random_sequence_r1", "executing...", UVM_LOW)
    182                                                      repeat (100) begin : random_loop
    183                                                          start_item(frame_tx);
    184                                                          assert(frame_tx.randomize());
    185                                                          finish_item(frame_tx);
    186                                                      end : random_loop
    187                                                  endtask : body
    188                                              endclass : random_sequence_r1
    189                                              
    190                                              // UVM_SEQUENCE : RANDOM_SEQUENCE_R2 [RGB]
    191                                              class random_sequence_r2 extends random_sequence_r1;
    192                                                  `uvm_object_utils(random_sequence_r2);
    193                                                  function new(string name = "random_sequence_r2");
    194                                                      super.new(name);
    195                                                  endfunction : new
    196                                                  task body();
    197                                                  rgb_transaction#(cfg) frame_tx = rgb_transaction#(cfg)::type_id::create("frame_tx");
    198                                                  `uvm_info("random_sequence_r2", "executing...", UVM_LOW)
    199                                                      repeat (1) begin : random_loop
    200                                                          start_item(frame_tx);
    201                                                          assert(frame_tx.randomize());
    202                                                          finish_item(frame_tx);
    203                                                      end : random_loop
    204                                                  endtask : body
    205                                              endclass : random_sequence_r2
    206                                              
    207                                              // UVM_SEQUENCE : TOP_SEQUENCE [RGB]
    208                                              class top_sequence extends uvm_sequence #(rgb_transaction);
    209                                                  `uvm_object_utils(top_sequence)
    210                                                  `uvm_declare_p_sequencer(rgb_sequencer)
    211                                                  function new (string name = "");
    212                                                      super.new(name);
    213                                                  endfunction
    214                                                  task body;
    215                                                      rgb_configuration cfg;
    216                                                      int count;
    217                                                      if ( uvm_config_db #(rgb_configuration)::get(p_sequencer, "", "config", cfg) ) begin
    218                                                          count    = cfg.count;
    219                                                      end
    220                                                      else begin
    221                                                          count    = 1;
    222                                                      end
    223                                                      if (starting_phase != null)
    224                                                          starting_phase.raise_objection(this);
    225                                                      repeat(count) begin
    226                                                          random_sequence_r1#(par_1) seq;
    227                                                          seq = random_sequence_r1#(par_1)::type_id::create("seq");
    228                                                          seq.start(p_sequencer, this);
    229                                                      end
    230                                                      if (starting_phase != null)
    231                                                          starting_phase.drop_objection(this);
    232                                                  endtask: body
    233                                              endclass: top_sequence
    234                                              
    235                                              // UVM_SEQUENCE : AXILITE_BASE_SEQ [AXILITE]
    236                                              virtual class axiLite_base_seq extends uvm_sequence #(axiLite_transaction);
    237                                                  function new (string name="axiLite_base_seq");
    238                                                      super.new(name);
    239                                                  endfunction
    240                                              endclass: axiLite_base_seq
    241                                              // UVM_SEQUENCE : AXILITE_NO_ACTIVITY_SEQ [AXILITE]
    242                                              class axiLite_no_activity_sequence extends axiLite_base_seq;
    243                                                  `uvm_object_utils(axiLite_no_activity_sequence)
    244                                                  function new(string name="axiLite_no_activity_sequence");
    245                                                      super.new(name);
    246                                                  endfunction
    247                                                  virtual task body();
    248                                                      `uvm_info("SEQ", "executing", UVM_LOW)
    249                                                  endtask: body
    250                                              endclass: axiLite_no_activity_sequence
    251                                              // UVM_SEQUENCE : AXILITE_RANDOM_SEQ [AXILITE]
    252                                              class axiLite_random_sequence extends axiLite_base_seq;
    253                                                  `uvm_object_utils(axiLite_random_sequence)
    254                                                  function new(string name="axiLite_random_sequence");
    255                                                      super.new(name);
    256                                                  endfunction
    257                                                  virtual task body();
    258                                                      axiLite_transaction item;
    259                                                      int num_txn;
    260                                                      bit typ_txn;
    261                                                      `uvm_info("SEQ", "executing...", UVM_LOW)
    262                                                      num_txn = $urandom_range(5,20);
    263                                                      repeat(num_txn) begin    
    264                                                      `uvm_create(item)
    265                                                      item.cycles         = $urandom_range(1,5);
    266                                                      item.addr           = $urandom();
    267                                                      item.data           = $urandom();
    268                                                      typ_txn             = $random();
    269                                                      item.reqWriteRead   = typ_txn ? WRITE : READ; 
    270                                                      `uvm_send(item);
    271                                                      end    
    272                                                  endtask: body
    273                                              endclass: axiLite_random_sequence
    274                                              // UVM_SEQUENCE : AXILITE_DIRECTED_SEQ [AXILITE]
    275                                              class axiLite_directed_sequence extends axiLite_base_seq;
    276                                                  `uvm_object_utils(axiLite_directed_sequence)
    277                                                  function new(string name="axiLite_directed_sequence");
    278                                                      super.new(name);
    279                                                  endfunction
    280                                                  virtual task body();
    281                                                      axiLite_transaction item;
    282                                                      bit [8:0] addr;
    283                                                      `uvm_info("SEQ", "executing...WR->RD->WR->RD", UVM_LOW)
    284                                                      for(addr = 0; addr < 256; addr ++) begin
    285                                                          `uvm_create(item)
    286                                                          item.addr           = {14'h0,addr[7:0]};
    287                                                          item.reqWriteRead   = addr[0] ? READ : WRITE;
    288                                                          item.cycles         = 0;
    289                                                          item.data           = addr;
    290                                                          `uvm_send(item);
    291                                                      end
    292                                                      `uvm_info("SEQ", "executing...WR->WR->RD->RD", UVM_LOW)
    293                                                      for(addr = 0; addr < 255; addr ++) begin
    294                                                          `uvm_create(item)
    295                                                          item.addr           = {14'h0,addr[7:0]};
    296                                                          item.reqWriteRead   = addr[8] ? READ : WRITE;
    297                                                          item.cycles         = 5;
    298                                                          item.data           = addr;
    299                                                          `uvm_send(item);
    300                                                      end
    301                                                  endtask: body
    302                                              endclass: axiLite_directed_sequence
    303                                              // UVM_SEQUENCE : AXILITE_USEVAR_SEQ [AXILITE]
    304                                              class axiLite_usevar_sequence extends axiLite_base_seq;
    305                                                  `uvm_object_utils(axiLite_usevar_sequence)
    306                                                  `uvm_declare_p_sequencer(axiLite_sequencer)
    307                                                  function new(string name="axiLite_usevar_sequence");
    308                                                      super.new(name);
    309                                                  endfunction
    310                                                  virtual task body();
    311                                                  axiLite_transaction item;
    312                                                  int id;
    313                                                  `uvm_info("SEQ", "executing...", UVM_LOW)
    314                                                  id = p_sequencer.id;
    315                                                  `uvm_info("SEQ", $sformatf("using id=%0hh from sequencer", id), UVM_LOW)
    316                                                  `uvm_create(item)
    317                                                  item.cycles = $urandom_range(1,5);
    318                                                  item.data = id;
    319                                                  `uvm_send(item);
    320                                                  endtask
    321                                              endclass:axiLite_usevar_sequence
    322                                              // UVM_SEQUENCE : TEMPLATE_BASE_SEQ [TEMPLATE]
    323                                              virtual class template_base_sequence extends uvm_sequence #(template_transaction);
    324                                                  function new (string name="template_base_sequence");
    325                                                      super.new(name);
    326                                                  endfunction
    327                                              endclass: template_base_sequence
    328                                              // UVM_SEQUENCE : TEMPLATE_SEQUENCE [TEMPLATE]
    329                                              class template_sequence extends uvm_sequence#(template_transaction);
    330                                                  `uvm_object_utils(template_sequence)
    331                                                  function new(string name = "");
    332                                                      super.new(name);
    333                                                  endfunction: new
    334                                                  task body();
    335                                                      template_transaction tx;
    336                                                      repeat(10000) begin
    337                                                      tx = template_transaction::type_id::create(.name("tx"), .contxt(get_full_name()));
    338                                                      start_item(tx);
    339                                                          assert(tx.randomize());
    340                                                          //`uvm_info("sa_sequence", tx.sprint(), UVM_LOW);
    341                                                      finish_item(tx);
    342                                                      end
    343                                                  endtask: body
    344                                              endclass: template_sequence
    345                                              
    346                                              
    347                                              
    348                                              
    349                                              //------------------------------------------------------------------------------------
    350                                              // UVM_DRIVER
    351                                              //------------------------------------------------------------------------------------
    352                                              // UVM_DRIVER : AXILITE_DRV [AXILITE]
    353                                              class axiLite_driver extends uvm_driver #(axiLite_transaction);
    354                                                  protected virtual axiLite_if axiLiteVif;
    355                                                  protected int     id;
    356                                                  `uvm_component_utils_begin(axiLite_driver)
    357                                                      `uvm_field_int(id, UVM_DEFAULT)
    358                                                  `uvm_component_utils_end
    359                                                  function new (string name, uvm_component parent);
    360                                                      super.new(name, parent);
    361                                                  endfunction
    362                                                  function void build_phase (uvm_phase phase);
    363                                                      super.build_phase(phase);
    364                                                      if (!uvm_config_db#(virtual axiLite_if)::get(this, "", "axiLiteVif", axiLiteVif))
    365                                                      `uvm_fatal("NOVIF", {"virtual interface must be set for: ",
    366                                                      get_full_name(), ".axiLiteVif"});
    367                                                  endfunction
    368                                                  virtual task run_phase (uvm_phase phase);
    369                                                      fork
    370                                                          get_and_drive();
    371                                                          reset_signals();
    372                                                      join
    373                                                  endtask: run_phase
    374                                                  virtual protected task get_and_drive();
    375                                                      forever begin
    376                                                          @(posedge axiLiteVif.ACLK);
    377                                                          if (axiLiteVif.ARESETN == 1'b0) begin
    378                                                              @(posedge axiLiteVif.ARESETN);
    379                                                              @(posedge axiLiteVif.ACLK);
    380                                                          end
    381                                                          seq_item_port.get_next_item(req);
    382                                                          //`uvm_info("DRV", req.convert2string(), UVM_LOW)
    383                                                          repeat(req.cycles) begin
    384                                                              @(posedge axiLiteVif.ACLK);
    385                                                          end
    386                                                          drive_transfer(req);
    387                                                          seq_item_port.item_done();
    388                                                      end
    389                                                  endtask: get_and_drive
    390                                                  virtual protected task reset_signals();
    391                                                      forever begin
    392                                                          @(negedge axiLiteVif.ARESETN);
    393                                                          axiLiteVif.AWADDR  <=  8'h0;
    394                                                          axiLiteVif.AWPROT  <=  3'h0;
    395                                                          axiLiteVif.AWVALID <=  1'b0;
    396                                                          axiLiteVif.WDATA   <= 32'h0;
    397                                                          axiLiteVif.WSTRB   <=  4'h0;
    398                                                          axiLiteVif.WVALID  <=  1'b0;
    399                                                          axiLiteVif.BREADY  <=  1'b1;
    400                                                          axiLiteVif.ARADDR  <=  8'h0;
    401                                                          axiLiteVif.ARPROT  <=  3'h0;
    402                                                          axiLiteVif.ARVALID <=  1'b0;
    403                                                          axiLiteVif.RREADY  <=  1'b1;
    404                                                      end
    405                                                  endtask: reset_signals
    406                                                  virtual protected task drive_transfer (axiLite_transaction aL_txn);
    407                                                      drive_address_phase(aL_txn);
    408                                                      drive_data_phase(aL_txn);
    409                                                  endtask: drive_transfer
    410                                                  virtual protected task drive_address_phase (axiLite_transaction aL_txn);
    411                                                      //`uvm_info("axiLite_master_driver", "drive_address_phase",UVM_HIGH)
    412                                                      case (aL_txn.reqWriteRead)
    413                                                          READ : drive_read_address_channel(aL_txn);
    414                                                          WRITE: drive_write_address_channel(aL_txn);
    415                                                      endcase
    416                                                  endtask: drive_address_phase
    417                                                  virtual protected task drive_data_phase (axiLite_transaction aL_txn);
    418                                                      bit[31:0] rw_data;
    419                                                      bit err;
    420                                                      rw_data = aL_txn.data;
    421                                                      case (aL_txn.reqWriteRead)
    422                                                      READ : drive_read_data_channel(rw_data, err);
    423                                                      WRITE: drive_write_data_channel(rw_data, err);
    424                                                      endcase    
    425                                                  endtask: drive_data_phase
    426                                                  virtual protected task drive_write_address_channel (axiLite_transaction aL_txn);
    427                                                      int axiLite_ctr;
    428                                                      axiLiteVif.AWADDR  <= {8'h0, aL_txn.addr};
    429                                                      axiLiteVif.AWPROT  <= 3'h0;
    430                                                      axiLiteVif.AWVALID <= 1'b1;
    431                                                      for(axiLite_ctr = 0; axiLite_ctr <= 31; axiLite_ctr ++) begin
    432                                                          @(posedge axiLiteVif.ACLK);
    433                                                          if (axiLiteVif.AWREADY) break;
    434                                                      end
    435                                                      if (axiLite_ctr == 31) begin
    436                                                          `uvm_error("axiLite_master_driver","AWVALID timeout");
    437                                                      end    
    438                                                      @(posedge axiLiteVif.ACLK);
    439                                                      // axiLiteVif.AWADDR  <= 8'h0;
    440                                                      // axiLiteVif.AWPROT  <= 3'h0;
    441                                                      // axiLiteVif.AWVALID <= 1'b0;    
    442                                                  endtask: drive_write_address_channel
    443                                                  virtual protected task drive_read_address_channel (axiLite_transaction aL_txn);
    444                                                      int axiLite_ctr;
    445                                                      axiLiteVif.ARADDR  <= {8'h0, aL_txn.addr};
    446                                                      axiLiteVif.ARPROT  <= 3'h0;
    447                                                      axiLiteVif.ARVALID <= 1'b1;
    448                                                      for(axiLite_ctr = 0; axiLite_ctr <= 31; axiLite_ctr ++) begin
    449                                                          @(posedge axiLiteVif.ACLK);
    450                                                          if (axiLiteVif.ARREADY) break;
    451                                                      end
    452                                                      if (axiLite_ctr == 31) begin
    453                                                          `uvm_error("axiLite_master_driver","ARVALID timeout");
    454                                                      end
    455                                                      @(posedge axiLiteVif.ACLK);
    456                                                      axiLiteVif.ARADDR  <= 8'h0;
    457                                                      axiLiteVif.ARPROT  <= 3'h0;
    458                                                      axiLiteVif.ARVALID <= 1'b0;    
    459                                                  endtask: drive_read_address_channel
    460                                                  virtual protected task drive_write_data_channel (bit[31:0] data, output bit error);
    461                                                      int axiLite_ctr;
    462                                                      axiLiteVif.WDATA  <= data;
    463                                                      axiLiteVif.WSTRB  <= 4'hf;
    464                                                      axiLiteVif.WVALID <= 1'b1;
    465                                                      @(posedge axiLiteVif.ACLK);
    466                                                          for(axiLite_ctr = 0; axiLite_ctr <= 31; axiLite_ctr ++) begin
    467                                                          @(posedge axiLiteVif.ACLK);
    468                                                          if (axiLiteVif.WREADY) 
    469                                                                  axiLiteVif.AWADDR  <= 8'h0;
    470                                                      axiLiteVif.AWPROT  <= 3'h0;
    471                                                      axiLiteVif.AWVALID <= 1'b0; 
    472                                                          break;
    473                                                      end
    474                                                      if (axiLite_ctr == 31) begin
    475                                                          `uvm_error("axiLite_master_driver","AWVALID timeout");
    476                                                      end
    477                                                      @(posedge axiLiteVif.ACLK);
    478                                                      axiLiteVif.WDATA  <= 32'h0;
    479                                                      axiLiteVif.WSTRB  <= 4'h0;
    480                                                      axiLiteVif.WVALID <= 1'b0;
    481                                                      //wait for write response
    482                                                      for(axiLite_ctr = 0; axiLite_ctr <= 31; axiLite_ctr ++) begin
    483                                                          @(posedge axiLiteVif.ACLK);
    484                                                          if (axiLiteVif.BVALID) break;
    485                                                      end
    486                                                      if (axiLite_ctr == 31) begin
    487                                                          `uvm_error("axiLite_master_driver","BVALID timeout");
    488                                                      end
    489                                                      else begin
    490                                                          if (axiLiteVif.BVALID == 1'b1 && axiLiteVif.BRESP != 2'h0)
    491                                                          `uvm_error("axiLite_master_driver","Received ERROR Write Response");
    492                                                          axiLiteVif.BREADY <= axiLiteVif.BVALID;
    493                                                       @(posedge axiLiteVif.ACLK);
    494                                                      end
    495                                                  endtask: drive_write_data_channel
    496                                                  // drive read data channel
    497                                                  virtual protected task drive_read_data_channel (output bit [31:0] data, output bit error);
    498                                                      int axiLite_ctr;
    499                                                      for(axiLite_ctr = 0; axiLite_ctr <= 31; axiLite_ctr ++) begin
    500                                                          @(posedge axiLiteVif.ACLK);
    501                                                          if (axiLiteVif.RVALID) break;
    502                                                      end
    503                                                      data = axiLiteVif.RDATA;
    504                                                      if (axiLite_ctr == 31) begin
    505                                                          `uvm_error("axiLite_master_driver","RVALID timeout");
    506                                                      end
    507                                                      else begin
    508                                                      if (axiLiteVif.RVALID == 1'b1 && axiLiteVif.RRESP != 2'h0)
    509                                                          `uvm_error("axiLite_master_driver","Received ERROR Read Response");
    510                                                          axiLiteVif.RREADY <= axiLiteVif.RVALID;
    511                                                          @(posedge axiLiteVif.ACLK);
    512                                                      end
    513                                                  endtask: drive_read_data_channel
    514                                              endclass: axiLite_driver
    515                                              // UVM_DRIVER : TEMPLATE_DRIVER [TEMPLATE]
    516                                              class template_driver extends uvm_driver#(template_transaction);
    517                                                  `uvm_component_utils(template_driver)
    518                                                  virtual template_if templateVif;
    519                                                  function new(string name, uvm_component parent);
    520                                                      super.new(name, parent);
    521                                                  endfunction: new
    522                                                  function void build_phase(uvm_phase phase);
    523                                                      super.build_phase(phase);
    524                                                      void'(uvm_resource_db#(virtual template_if)::read_by_name
    525                                                          (.scope("ifs"), .name("template_if"), .val(templateVif)));
    526                                                  endfunction: build_phase
    527                                                  task run_phase(uvm_phase phase);
    528                                                      drive();
    529                                                  endtask: run_phase
    530                                                  virtual task drive();
    531                                                      template_transaction tx;
    532                                                      integer counter = 0, state = 0;
    533                                                      templateVif.sig_ina = 0'b0;
    534                                                      templateVif.sig_inb = 0'b0;
    535                                                      templateVif.sig_en_i = 1'b0;
    536                                                      forever begin
    537                                                          if(counter==0)
    538                                                          begin
    539                                                              seq_item_port.get_next_item(tx);
    540                                                          end
    541                                                          @(posedge templateVif.sig_clock)
    542                                                          begin
    543                                                              if(counter==0)
    544                                                              begin
    545                                                                  templateVif.sig_en_i = 1'b1;
    546                                                                  state = 1;
    547                                                              end
    548                                                              if(counter==1)
    549                                                              begin
    550                                                                  templateVif.sig_en_i = 1'b0;
    551                                                              end
    552                                                              case(state)
    553                                                                  1: begin
    554                                                                      templateVif.sig_ina = tx.ina[1];
    555                                                                      templateVif.sig_inb = tx.inb[1];
    556                                                                      tx.ina = tx.ina << 1;
    557                                                                      tx.inb = tx.inb << 1;
    558                                                                      counter = counter + 1;
    559                                                                      if(counter==2) state = 2;
    560                                                                  end
    561                                                                  2: begin
    562                                                                      templateVif.sig_ina = 1'b0;
    563                                                                      templateVif.sig_inb = 1'b0;
    564                                                                      counter = counter + 1;
    565                                                                      if(counter==6)
    566                                                                      begin
    567                                                                          counter = 0;
    568                                                                          state = 0;
    569                                                                          seq_item_port.item_done();
    570                                                                      end
    571                                                                  end
    572                                                              endcase
    573                                                          end
    574                                                      end
    575                                                  endtask: drive
    576                                              endclass: template_driver
    577                                              // UVM_DRIVER : RGB_DRIVER [RGB]
    578                                              class rgb_driver#(parameter set_config cfg = par_1) extends uvm_driver#(rgb_transaction#(cfg));
    579                                                  `uvm_component_param_utils(rgb_driver#(cfg))
    580                                                  virtual rgb_if#(cfg) frame_vi;
    581                                              
    582                                                  function new(string name, uvm_component parent);
    583                                                      super.new(name, parent);
    584                                                  endfunction: new
    585                                                  function void build_phase(uvm_phase phase);
    586                                                      super.build_phase(phase);
    587                                                      void'(uvm_resource_db#(virtual rgb_if#(cfg))::read_by_name(.scope("ifs"),.name("rgb_if"),.val(frame_vi)));
    588                                                  endfunction: build_phase
    589                                                  task run_phase(uvm_phase phase);
    590                                                      rgb_transaction#(cfg) frame_tx;
    591                                                      forever begin
    592                                                          @frame_vi.master_cb;
    593                                                          seq_item_port.get_next_item(frame_tx);
    594                                                          @frame_vi.master_cb;
    595                                                          frame_vi.master_cb.iRed        <= frame_tx.iRed;
    596                                                          frame_vi.master_cb.iGreen      <= frame_tx.iGreen;
    597                                                          frame_vi.master_cb.iBlue       <= frame_tx.iBlue;
    598                                                          frame_vi.master_cb.iX          <= frame_tx.iX;
    599                                                          frame_vi.master_cb.iY          <= frame_tx.iY;
    600                                                          frame_vi.master_cb.iPixelEn    <= frame_tx.iPixelEn;
    601                                                          frame_vi.master_cb.iValid      <= frame_tx.iValid;
    602                                                          frame_vi.master_cb.iEof        <= frame_tx.iEof;
    603                                                          seq_item_port.item_done();
    604                                                      end
    605                                                  endtask: run_phase
    606                                              endclass: rgb_driver
    607                                              
    608                                              
    609                                              
    610                                              //------------------------------------------------------------------------------------
    611                                              // UVM_MONITOR
    612                                              //------------------------------------------------------------------------------------
    613                                              // UVM_MONITOR : AXILITE_MON [AXILITE]
    614                                              class axiLite_monitor extends uvm_monitor;
    615                                                  protected virtual   axiLite_if axiLiteVif;
    616                                                  protected int       id;
    617                                                  uvm_analysis_port #(axiLite_transaction) item_collected_port;
    618                                                  uvm_analysis_port #(axiLite_transaction) dut_inputs_port; // analysis port for DUT inputs
    619                                                  uvm_analysis_port #(axiLite_transaction) dut_outputs_port; // analysis port for DUT outputs
    620                                                  protected axiLite_transaction aL_txn;
    621                                                  `uvm_component_utils_begin(axiLite_monitor)
    622                                                      `uvm_field_int(id, UVM_DEFAULT)
    623                                                  `uvm_component_utils_end
    624                                                  function new (string name, uvm_component parent);
    625                                                      super.new(name, parent);
    626                                                      aL_txn = new();
    627                                                      item_collected_port = new("item_collected_port", this);
    628                                                     // dut_inputs_port = new("dut_inputs_port", this); // construct the analysis port
    629                                                      //dut_outputs_port = new("dut_outputs_port", this); // construct the analysis port
    630                                                  endfunction
    631                                                  function void build_phase (uvm_phase phase);
    632                                                      super.build_phase(phase);
    633                                                      if(!uvm_config_db#(virtual axiLite_if)::get(this, "", "axiLiteVif", axiLiteVif))
    634                                                      `uvm_fatal("NOVIF",{"virtual interface must be set for: ",get_full_name(), ".axiLiteVif"});
    635                                                      dut_inputs_port = new(.name("dut_inputs_port"),.parent(this));
    636                                                      dut_outputs_port = new(.name("dut_outputs_port"),.parent(this));
    637                                                  endfunction // build_phase
    638                                                  virtual task run_phase (uvm_phase phase);
    639                                                      fork
    640                                                          collect_transactions();
    641                                                      join
    642                                                  endtask: run_phase
    643                                                  virtual protected task collect_transactions();
    644                                                      bit valid_txn = 0;
    645                                                      forever begin
    646                                                          axiLite_transaction tx_in,tx_out,tx_copy;
    647                                                          tx_in       = axiLite_transaction::type_id::create("tx_in"); 
    648                                                          tx_out      = axiLite_transaction::type_id::create("tx_out");
    649                                                          aL_txn      = new();
    650                                                          if (axiLiteVif.ARESETN == 'b0)
    651                                                          @(posedge axiLiteVif.ARESETN);
    652                                                              if (axiLiteVif.AWVALID == 'b1) begin
    653                                                                  tx_in.WDATA = axiLiteVif.WDATA; 
    654                                                                  aL_txn.reqWriteRead = WRITE;    
    655                                                                  aL_txn.addr  = axiLiteVif.AWADDR[7:0];
    656                                                                  @(posedge axiLiteVif.WVALID);
    657                                                                  aL_txn.data  = axiLiteVif.WDATA;
    658                                                                  @(negedge axiLiteVif.WVALID);
    659                                                                  valid_txn = 1;
    660                                                              end
    661                                                          else if (axiLiteVif.ARVALID == 'b1) begin
    662                                                              tx_out.RDATA = axiLiteVif.RDATA; 
    663                                                              aL_txn.reqWriteRead = READ;    
    664                                                              aL_txn.addr  = axiLiteVif.ARADDR[7:0];
    665                                                              @(posedge axiLiteVif.RVALID);
    666                                                              aL_txn.data  = axiLiteVif.RDATA;
    667                                                              @(negedge axiLiteVif.RVALID);
    668                                                              valid_txn = 1;
    669                                                          end
    670                                                          @(posedge axiLiteVif.ACLK);
    671                                                          //aL_txn.data = axiLiteVif.data;
    672                                                          //while (axiLiteVif.valid == 'b1) begin
    673                                                          //@(posedge axiLiteVif.ACLK);
    674                                                          //aL_txn.cycles++;
    675                                                          //end
    676                                                          //aL_txn.cycles--;
    677                                                           //`uvm_info("axiLiteVif data", aL_txn.sprint(), UVM_LOW);
    678                                                              if (valid_txn == 'b1 ) begin
    679                                                                  //`uvm_info("MON", aL_txn.convert2string(), UVM_LOW) 
    680                                                                  item_collected_port.write(aL_txn);
    681                                                                  //item_collected_port.write(aL_txn);
    682                                                              end
    683                                                          dut_inputs_port.write(tx_in);  
    684                                                          $cast(tx_copy, tx_out.clone());
    685                                                          dut_outputs_port.write(tx_copy);             
    686                                                          valid_txn = 0;
    687                                                      end
    688                                                  endtask: collect_transactions
    689                                              endclass: axiLite_monitor
    690                                              // UVM_MONITOR : TEMPLATE_MONITOR_AFTERTODUT [TEMPLATE]
    691                                              //The second monitor, monitor_afterToDut, will get both inputs 
    692                                              //and make a prediction of the expected result. 
    693                                              //The scoreboard will get this predicted result as well and make a comparison between the two values.
    694                                              class template_monitor_afterToDut extends uvm_monitor;
    695                                                  `uvm_component_utils(template_monitor_afterToDut)
    696                                                  uvm_analysis_port#(template_transaction) mon_ap_afterToDut;
    697                                                  virtual template_if templateVif;
    698                                                  template_transaction tx;
    699                                                  //For coverage
    700                                                  template_transaction sa_tx_cg;
    701                                                  //Define coverpoints
    702                                                  covergroup template_cg;
    703                                                            ina_cp:     coverpoint sa_tx_cg.ina;
    704                                                            inb_cp:     coverpoint sa_tx_cg.inb;
    705                                                      cross ina_cp, inb_cp;
    706                                                  endgroup: template_cg
    707                                                  function new(string name, uvm_component parent);
    708                                                      super.new(name, parent);
    709                                                      template_cg = new;
    710                                                  endfunction: new
    711                                                  function void build_phase(uvm_phase phase);
    712                                                      super.build_phase(phase);
    713                                                      void'(uvm_resource_db#(virtual template_if)::read_by_name(.scope("ifs"), .name("template_if"), .val(templateVif)));
    714                                                      mon_ap_afterToDut= new(.name("mon_ap_afterToDut"), .parent(this));
    715                                                  endfunction: build_phase
    716                                                  task run_phase(uvm_phase phase);
    717                                                      integer counter_mon = 0, state = 0;
    718                                                      tx = template_transaction::type_id::create
    719                                                          (.name("tx"), .contxt(get_full_name()));
    720                                                      forever begin
    721                                                          @(posedge templateVif.sig_clock)
    722                                                          begin
    723                                                              if(templateVif.sig_en_i==1'b1)
    724                                                              begin
    725                                                                  state  = 1;
    726                                                                  tx.ina = 2'b00;
    727                                                                  tx.inb = 2'b00;
    728                                                                  tx.out = 3'b000;
    729                                                              end
    730                                                              if(state==1)
    731                                                              begin
    732                                                                  tx.ina    = tx.ina << 1;
    733                                                                  tx.inb    = tx.inb << 1;
    734                                                                  tx.ina[0] = templateVif.sig_ina;
    735                                                                  tx.inb[0] = templateVif.sig_inb;
    736                                                                  counter_mon = counter_mon + 1;
    737                                                                  if(counter_mon==2)
    738                                                                  begin
    739                                                                      state = 0;
    740                                                                      counter_mon = 0;
    741                                                                      //Predict the result
    742                                                                      predictor();
    743                                                                      sa_tx_cg = tx;
    744                                                                      //Coverage
    745                                                                      template_cg.sample();
    746                                                                      //Send the transaction to the analysis port
    747                                                                      mon_ap_afterToDut.write(tx);
    748                                                                  end
    749                                                              end
    750                                                          end
    751                                                      end
    752                                                  endtask: run_phase
    753                                                  virtual function void predictor();
    754                                                      tx.out = tx.ina + tx.inb;//Predict out value
    755                                                  endfunction: predictor
    756                                              endclass: template_monitor_afterToDut
    757                                              // UVM_MONITOR : TEMPLATE_MONITOR_BEFOREFROMDUT [TEMPLATE]
    758                                              //monitor_beforeFromDut, will look solely for the output of the device 
    759                                              //and it will pass the result to the scoreboard.
    760                                              class template_monitor_beforeFromDut extends uvm_monitor;
    761                                                  `uvm_component_utils(template_monitor_beforeFromDut)
    762                                                  uvm_analysis_port#(template_transaction) mon_ap_beforeFromDut;
    763                                                  virtual template_if templateVif;
    764                                                  function new(string name, uvm_component parent);
    765                                                      super.new(name, parent);
    766                                                  endfunction: new
    767                                                  function void build_phase(uvm_phase phase);
    768                                                      super.build_phase(phase);
    769                                                      void'(uvm_resource_db#(virtual template_if)::read_by_name
    770                                                          (.scope("ifs"), .name("template_if"), .val(templateVif)));
    771                                                      mon_ap_beforeFromDut = new(.name("mon_ap_beforeFromDut"), .parent(this));
    772                                                  endfunction: build_phase
    773                                                  task run_phase(uvm_phase phase);
    774                                                      integer counter_mon = 0, state = 0;
    775                                                      template_transaction tx;
    776                                                      tx = template_transaction::type_id::create
    777                                                          (.name("tx"), .contxt(get_full_name()));
    778                                                      forever begin
    779                                                          @(posedge templateVif.sig_clock)
    780                                                          begin
    781                                                              if(templateVif.sig_en_o==1'b1)begin
    782                                                                  state = 3;
    783                                                              end
    784                                                              if(state==3)begin
    785                                                                  tx.out = tx.out << 1;
    786                                                                  counter_mon = counter_mon + 1;
    787                                                                  if (counter_mon==3)begin
    788                                                                      tx.out[0]=templateVif.sig_out;
    789                                                                  end
    790                                                                  if(counter_mon==4)begin
    791                                                                      state       = 0;
    792                                                                      counter_mon = 0;
    793                                                                      //Send the transaction to the analysis port
    794                                                                      mon_ap_beforeFromDut.write(tx);
    795                                                                  end
    796                                                              end
    797                                                          end
    798                                                      end
    799                                                  endtask: run_phase
    800                                              endclass: template_monitor_beforeFromDut
    801                                              // UVM_MONITOR : RGB_MONITOR [RGB]
    802                                              class rgb_monitor#(parameter set_config cfg = par_1) extends uvm_monitor;
    803                                                  `uvm_component_param_utils(rgb_monitor#(cfg))
    804                                                  uvm_analysis_port#(rgb_transaction#(cfg)) frame_ap;
    805                                                  int unsigned agent_id = 1;
    806                                                  virtual rgb_if#(cfg) frame_vi;
    807                                                  
    808                                                  function new(string name, uvm_component parent);
    809                                                      super.new(name, parent);
    810                                                  endfunction: new
    811                                                  function void build_phase(uvm_phase phase);
    812                                                      super.build_phase(phase);
    813                                                      void'(uvm_resource_db#(virtual rgb_if#(cfg))::read_by_name
    814                                                      (.scope("ifs"),.name("rgb_if"),.val(frame_vi)));
    815                                                      frame_ap = new(.name("frame_ap"),.parent(this));
    816                                                  endfunction: build_phase
    817                                                  task run_phase(uvm_phase phase);
    818                                                  $display("Detected new frame_tx on interface #%d\n", agent_id);
    819                                                      forever begin
    820                                                          rgb_transaction#(cfg) frame_tx;
    821                                                          @frame_vi.slave_cb;
    822                                                          frame_tx               = rgb_transaction#(cfg)::type_id::create(.name("frame_tx"));
    823                                                          frame_tx.iRed          = frame_vi.slave_cb.iRed;
    824                                                          frame_tx.iGreen        = frame_vi.slave_cb.iGreen;
    825                                                          frame_tx.iBlue         = frame_vi.slave_cb.iBlue;
    826                                                          frame_tx.iPixelEn      = frame_vi.slave_cb.iPixelEn;
    827                                                          frame_tx.iValid        = frame_vi.slave_cb.iValid;
    828                                                          frame_tx.iEof          = frame_vi.slave_cb.iEof;
    829                                                          frame_tx.iX            = frame_vi.slave_cb.iX;
    830                                                          frame_tx.iY            = frame_vi.slave_cb.iY;
    831                                                          frame_ap.write(frame_tx);
    832                                                      end
    833                                                  endtask: run_phase
    834                                              endclass: rgb_monitor
    835                                              
    836                                              
    837                                              
    838                                              //------------------------------------------------------------------------------------
    839                                              // UVM_AGENT
    840                                              //------------------------------------------------------------------------------------
    841                                              // UVM_AGENT : AXILITE_AGT [AXILITE]
    842                                              class axiLite_agent extends uvm_agent;
    843                                                  `uvm_component_utils(axiLite_agent)
    844                                                  uvm_analysis_port#(axiLite_transaction) item_collected_port;
    845                                                  axiLite_sequencer       aL_sqr;
    846                                                  axiLite_driver          aL_drv;
    847                                                  axiLite_monitor         aL_mon;
    848                                                  function new (string name, uvm_component parent);
    849                                                      super.new(name, parent);
    850                                                  endfunction
    851                                                  function void build_phase(uvm_phase phase);
    852                                                      super.build_phase(phase);
    853                                                      item_collected_port    = new(.name("item_collected_port"),.parent(this));
    854                                                      aL_mon                 = axiLite_monitor::type_id::create("aL_mon", this);
    855                                                      if (get_is_active() == UVM_ACTIVE) begin
    856                                                          aL_sqr = axiLite_sequencer::type_id::create("aL_sqr", this);
    857                                                          aL_drv = axiLite_driver::type_id::create("aL_drv", this);
    858                                                      end
    859                                                  endfunction
    860                                                  function void connect_phase(uvm_phase phase);
    861                                                      if (get_is_active() == UVM_ACTIVE) begin
    862                                                          aL_drv.seq_item_port.connect(aL_sqr.seq_item_export);
    863                                                          aL_mon.item_collected_port.connect(item_collected_port);
    864                                                      end
    865                                                  endfunction
    866                                              endclass: axiLite_agent
    867                                              // UVM_AGENT : RGB_AGENT [RGB]
    868                                              class rgb_agent#(parameter set_config cfg = par_1) extends uvm_agent;
    869                                                  `uvm_component_param_utils(rgb_agent#(cfg))
    870                                                  uvm_analysis_port#(rgb_transaction#(cfg)) frame_ap;
    871                                                  rgb_sequencer   #(cfg)               frame_seqr;
    872                                                  rgb_driver      #(cfg)               frame_drvr;
    873                                                  rgb_monitor     #(cfg)               frame_mon;
    874                                                  function new(string name, uvm_component parent);
    875                                                      super.new(name, parent);
    876                                                  endfunction: new
    877                                                  function void build_phase(uvm_phase phase);
    878                                                      super.build_phase(phase);
    879                                                      frame_ap    = new(.name("frame_ap"),.parent(this));
    880                                                      frame_seqr = rgb_sequencer#(cfg)  ::type_id::create(.name("frame_seqr"),.parent(this));
    881                                                      frame_drvr = rgb_driver   #(cfg)  ::type_id::create(.name("frame_drvr"),.parent(this));
    882                                                      frame_mon  = rgb_monitor  #(cfg)  ::type_id::create(.name("frame_mon"),.parent(this));
    883                                                  endfunction: build_phase
    884                                                  function void connect_phase(uvm_phase phase);
    885                                                      super.connect_phase(phase);
    886                                                      frame_drvr.seq_item_port.connect(frame_seqr.seq_item_export);
    887                                                      frame_mon.frame_ap.connect(frame_ap);
    888                                                  endfunction: connect_phase
    889                                              endclass: rgb_agent
    890                                              
    891                                              
    892                                              // UVM_AGENT : TEMPLATE_AGENT [TEMPLATE]
    893                                              class template_agent extends uvm_agent;
    894                                                  `uvm_component_utils(template_agent)
    895                                                  uvm_analysis_port#(template_transaction) agent_ap_beforeFromDut;
    896                                                  uvm_analysis_port#(template_transaction) agent_ap_afterToDut;
    897                                                  template_sequencer                       sa_seqr;
    898                                                  template_driver                          sa_drvr;
    899                                                  template_monitor_beforeFromDut           sa_mon_beforeFromDut;
    900                                                  template_monitor_afterToDut              sa_mon_afterToDut;
    901                                                  function new(string name, uvm_component parent);
    902                                                      super.new(name, parent);
    903                                                  endfunction: new
    904                                                  function void build_phase(uvm_phase phase);
    905                                                      super.build_phase(phase);
    906                                                      agent_ap_beforeFromDut      = new(.name("agent_ap_beforeFromDut"), .parent(this));
    907                                                      agent_ap_afterToDut         = new(.name("agent_ap_afterToDut"), .parent(this));
    908                                                      sa_seqr                     = template_sequencer::type_id::create(.name("sa_seqr"), .parent(this));
    909                                                      sa_drvr                     = template_driver::type_id::create(.name("sa_drvr"), .parent(this));
    910                                                      sa_mon_beforeFromDut        = template_monitor_beforeFromDut::type_id::create(.name("sa_mon_beforeFromDut"), .parent(this));
    911                                                      sa_mon_afterToDut           = template_monitor_afterToDut::type_id::create(.name("sa_mon_afterToDut"), .parent(this));
    912                                                  endfunction: build_phase
    913                                                  function void connect_phase(uvm_phase phase);
    914                                                      super.connect_phase(phase);
    915                                                      sa_drvr.seq_item_port.connect(sa_seqr.seq_item_export);
    916                                                      sa_mon_beforeFromDut.mon_ap_beforeFromDut.connect(agent_ap_beforeFromDut);
    917                                                      sa_mon_afterToDut.mon_ap_afterToDut.connect(agent_ap_afterToDut);
    918                                                  endfunction: connect_phase
    919                                              endclass: template_agent
    920                                              
    921                                              
    922                                              
    923                                              
    924                                              //------------------------------------------------------------------------------------
    925                                              // UVM_SUBSCRIBER
    926                                              //------------------------------------------------------------------------------------
    927                                              // UVM_SUBSCRIBER : AXILITE_FC_SUBSCRIBER [AXILITE]
    928                                              class axiLite_fc_subscriber extends uvm_subscriber#(axiLite_transaction);
    929                                                  `uvm_component_utils(axiLite_fc_subscriber)
    930                                                  axiLite_transaction aL_txn;
    931                                                  covergroup aL_cg;
    932                                                      WDATA_cp:            coverpoint aL_txn.WDATA;
    933                                                      AWADDR_cp:           coverpoint aL_txn.RDATA;
    934                                                      // cross WDATA_cp, AWADDR_cp;
    935                                                  endgroup: aL_cg
    936                                                  function new(string name, uvm_component parent);
    937                                                      super.new(name, parent);
    938                                                      aL_cg = new;
    939                                                  endfunction: new
    940                                                  function void write(axiLite_transaction t);
    941                                                      aL_txn = t;
    942                                                      aL_cg.sample();
    943                                                  endfunction: write
    944                                              endclass: axiLite_fc_subscriber
    945                                              // UVM_SUBSCRIBER : RGB_FC_SUBSCRIBER [RGB]
    946                                              //The functional coverage subscriber (fc_sucbscriber) identifies 
    947                                              //the generated frame_tx. 
    948                                              //The rgb_transaction sent from the monitor is sampled by the write function.
    949                                              class rgb_fc_subscriber extends uvm_subscriber#(rgb_transaction);
    950                                                  `uvm_component_utils(rgb_fc_subscriber)
    951                                                  rgb_transaction frame_tx;
    952                                                  covergroup rgb_cg;
    953                                                      iRed_cp:            coverpoint frame_tx.iRed;
    954                                                      iGreen_cp:          coverpoint frame_tx.iGreen;
    955                                                      iBlue_cp:           coverpoint frame_tx.iBlue;
    956                                                      iPixelEn_cp:        coverpoint frame_tx.iPixelEn;
    957                                                      iValid_cp:          coverpoint frame_tx.iValid;
    958                                                      iEof_cp:            coverpoint frame_tx.iEof;
    959                                                      iX_cp:              coverpoint frame_tx.iX;
    960                                                      iY_cp:              coverpoint frame_tx.iY;
    961                                                      cross iRed_cp, iEof_cp;
    962                                                  endgroup: rgb_cg
    963                                                  function new(string name, uvm_component parent);
    964                                                      super.new(name, parent);
    965                                                      rgb_cg = new;
    966                                                  endfunction: new
    967                                                  function void write(rgb_transaction t);
    968                                                      frame_tx = t;
    969                                                      rgb_cg.sample();
    970                                                  endfunction: write
    971                                              endclass: rgb_fc_subscriber
    972                                              typedef class rgb_scoreboard;
    973                                              // UVM_SUBSCRIBER : RGB_SB_SUBSCRIBER [RGB]
    974                                              class rgb_sb_subscriber extends uvm_subscriber#(rgb_transaction);
    975                                                  `uvm_component_utils(rgb_sb_subscriber)
    976                                                  function new(string name, uvm_component parent);
    977                                                      super.new(name, parent);
    978                                                  endfunction: new
    979                                                  function void write(rgb_transaction t);
    980                                                      rgb_scoreboard frame_sb;
    981                                                      $cast(frame_sb, m_parent);
    982                                                      frame_sb.check_rgb_taste(t);
    983                                                  endfunction: write
    984                                              endclass: rgb_sb_subscriber
    985                                              
    986                                              
    987                                              
    988                                              
    989                                              //------------------------------------------------------------------------------------
    990                                              // UVM_SCORECARD
    991                                              //------------------------------------------------------------------------------------
    992                                              // UVM_SCORECARD : RGB_SCOREBOARD [RGB]
    993                                              class rgb_scoreboard extends uvm_scoreboard;
    994                                                  `uvm_component_utils(rgb_scoreboard)
    995                                                  uvm_analysis_export#(rgb_transaction)    frame_analysis_export;
    996                                                  local rgb_sb_subscriber                  frame_sb_sub;
    997                                                  function new(string name, uvm_component parent);
    998                                                      super.new(name, parent);
    999                                                  endfunction: new
    1000                                                 function void build_phase(uvm_phase phase);
    1001                                                     super.build_phase(phase);
    1002                                                     frame_analysis_export = new(.name("frame_analysis_export"),.parent(this));
    1003                                                     frame_sb_sub = rgb_sb_subscriber::type_id::create(.name("frame_sb_sub"),.parent(this));
    1004                                                 endfunction: build_phase
    1005                                                 function void connect_phase(uvm_phase phase);
    1006                                                     super.connect_phase(phase);
    1007                                                     frame_analysis_export.connect(frame_sb_sub.analysis_export);
    1008                                                 endfunction: connect_phase
    1009                                                 virtual function void check_rgb_taste(rgb_transaction frame_tx);
    1010                                                     uvm_table_printer p = new;
    1011                                                 endfunction: check_rgb_taste
    1012                                             endclass: rgb_scoreboard
    1013                                             // UVM_SCORECARD : TEMPLATE_SCOREBOARD [TEMPLATE]
    1014                                             class template_scoreboard extends uvm_scoreboard;
    1015                                                 `uvm_component_utils(template_scoreboard)
    1016                                                 uvm_analysis_export #(template_transaction)     sb_export_beforeFromDut;
    1017                                                 uvm_analysis_export #(template_transaction)     sb_export_afterToDut;
    1018                                                 uvm_tlm_analysis_fifo #(template_transaction)   before_fifo;
    1019                                                 uvm_tlm_analysis_fifo #(template_transaction)   after_fifo;
    1020                                                 template_transaction transaction_beforeFromDut;
    1021                                                 template_transaction transaction_afterToDut;
    1022                                                 function new(string name, uvm_component parent);
    1023                                                     super.new(name, parent);
    1024                                                     transaction_beforeFromDut       = new("transaction_beforeFromDut");
    1025                                                     transaction_afterToDut          = new("transaction_afterToDut");
    1026                                                 endfunction: new
    1027                                                 function void build_phase(uvm_phase phase);
    1028                                                     super.build_phase(phase);
    1029                                                     sb_export_beforeFromDut         = new("sb_export_beforeFromDut", this);
    1030                                                     sb_export_afterToDut            = new("sb_export_afterToDut", this);
    1031                                                        before_fifo                  = new("before_fifo", this);
    1032                                                     after_fifo                      = new("after_fifo", this);
    1033                                                 endfunction: build_phase
    1034                                                 function void connect_phase(uvm_phase phase);
    1035                                                     sb_export_beforeFromDut.connect(before_fifo.analysis_export);
    1036                                                     sb_export_afterToDut.connect(after_fifo.analysis_export);
    1037                                                 endfunction: connect_phase
    1038                                                 task run();
    1039                                                     forever begin
    1040                                                         before_fifo.get(transaction_beforeFromDut);
    1041                                                         after_fifo.get(transaction_afterToDut);
    1042                                                         compare();
    1043                                                     end
    1044                                                 endtask: run
    1045                                                 // function string convert2string();
    1046                                                     // return $sformatf("addr");
    1047                                                 // endfunction
    1048                                                 virtual function void compare();
    1049                                                 //`uvm_info("FROMDUT", transaction_beforeFromDut.sprint(), UVM_LOW);
    1050                                                 //`uvm_info("TODUT", transaction_afterToDut.sprint(), UVM_LOW);
    1051                                                     if(transaction_beforeFromDut.out == transaction_afterToDut.out) begin
    1052                                                         `uvm_info("compare", {"Test: OK!"}, UVM_LOW);
    1053                                                     end else begin
    1054                                                         `uvm_info("compare", {"Test: Fail!"}, UVM_LOW);
    1055                                                     end
    1056                                                 endfunction: compare
    1057                                             endclass: template_scoreboard
    1058                                             
    1059                                             `uvm_analysis_imp_decl(_beforeFromDut)
    1060                                             `uvm_analysis_imp_decl(_afterToDut)
    1061                                             
    1062                                             
    1063                                             //------------------------------------------------------------------------------------
    1064                                             // UVM_ENV
    1065                                             //------------------------------------------------------------------------------------
    1066                                             // UVM_ENV : TEMPLATE_ENV
    1067                                             class template_env extends uvm_env;
    1068                                                 `uvm_component_utils(template_env)
    1069                                                 protected virtual interface axiLite_if axiLiteVif;
    1070                                                 template_agent              sa_agent;       //[TEMPLATE]
    1071                                                 template_scoreboard         sa_sb;          //[TEMPLATE]
    1072                                                 axiLite_agent               aL_agt;         //[AXILITE]
    1073                                                 axiLite_fc_subscriber       aL_fc_sub;      //[AXILITE]
    1074                                               //rgb_agent                   frame_agent;    //[RGB]
    1075                                                 rgb_agent#(par_1)           frame_agent;
    1076                                                 rgb_fc_subscriber           frame_fc_sub;   //[RGB]
    1077                                                 rgb_scoreboard              frame_sb;       //[RGB]
    1078                                             
    1079                                                 function new(string name, uvm_component parent);
    1080                                                     super.new(name, parent);
    1081                                                 endfunction: new
    1082                                                 function void build_phase(uvm_phase phase);
    1083                                                     super.build_phase(phase);
    1084                                                     sa_agent        = template_agent     ::type_id::create(.name("sa_agent"), .parent(this));
    1085                                                     sa_sb           = template_scoreboard::type_id::create(.name("sa_sb"), .parent(this));
    1086                                                     frame_agent     = rgb_agent#(par_1)  ::type_id::create(.name("frame_agent"),.parent(this));
    1087                                                     frame_fc_sub    = rgb_fc_subscriber  ::type_id::create(.name("frame_fc_sub"),.parent(this));
    1088                                                     frame_sb        = rgb_scoreboard     ::type_id::create(.name("frame_sb"),.parent(this));
    1089                                                     if (!uvm_config_db#(virtual axiLite_if)::get(this, "", "axiLiteVif", axiLiteVif))
    1090                                                     	`uvm_fatal("NOVIF",{"virtual interface must be set for: ",get_full_name(),".axiLiteVif"});
    1091                                                     aL_agt          = axiLite_agent::type_id::create("aL_agt", this);
    1092                                                     if (!uvm_config_db#(virtual axiLite_if)::get(this, "", "axiLiteVif", axiLiteVif))
    1093                                                     	`uvm_fatal("NOVIF",{"virtual interface must be set for: ",get_full_name(),".axiLiteVif"});
    1094                                                     aL_fc_sub       = axiLite_fc_subscriber::type_id::create("aL_fc_sub", this);
    1095                                                 endfunction: build_phase
    1096                                                 function void connect_phase(uvm_phase phase);
    1097                                                     super.connect_phase(phase);
    1098                                                     sa_agent.agent_ap_beforeFromDut.connect(sa_sb.sb_export_beforeFromDut);
    1099                                                     sa_agent.agent_ap_afterToDut.connect(sa_sb.sb_export_afterToDut);
    1100                                                     aL_agt.item_collected_port.connect(aL_fc_sub.analysis_export);
    1101                                                     frame_agent.frame_ap.connect(frame_fc_sub.analysis_export);
    1102                                                     frame_agent.frame_ap.connect(frame_sb.frame_analysis_export);
    1103                                                 endfunction: connect_phase
    1104                                             endclass: template_env
    1105                                             
    1106                                             
    1107                                             
    1108                                             //------------------------------------------------------------------------------------
    1109                                             // UVM_TEST
    1110                                             //------------------------------------------------------------------------------------
    1111                                             // UVM_TEST : TEMPLATE_TEST [TEMPLATE]
    1112                                             class template_test extends uvm_test;
    1113                                                 `uvm_component_utils(template_test)
    1114                                                 template_env sa_env;
    1115                                                 function new(string name, uvm_component parent);
    1116                                                     super.new(name, parent);
    1117                                                 endfunction: new
    1118                                                 function void build_phase(uvm_phase phase);
    1119                                                     super.build_phase(phase);
    1120                                                     sa_env = template_env::type_id::create(.name("sa_env"), .parent(this));
    1121                                                 endfunction: build_phase
    1122                                                 function void end_of_elaboration_phase(uvm_phase phase);
    1123                                                     super.end_of_elaboration_phase(phase);
    1124                                                     this.print();
    1125                                                     factory.print();
    1126                                                 endfunction
    1127                                                 task run_phase(uvm_phase phase);
    1128                                                     template_sequence sa_seq;
    1129                                                     phase.raise_objection(.obj(this));
    1130                                                         sa_seq = template_sequence::type_id::create(.name("sa_seq"), .contxt(get_full_name()));
    1131                                                         assert(sa_seq.randomize());
    1132                                                     sa_seq.start(sa_env.sa_agent.sa_seqr);
    1133                                                     phase.drop_objection(.obj(this));
    1134                                                 endtask: run_phase
    1135                                             endclass: template_test
    1136                                             // UVM_TEST : AXILITE_TEST [AXILITE]
    1137                                             class axiLite_test extends uvm_test;
    1138                                                 `uvm_component_utils(axiLite_test)
    1139                                                 template_env aL_env;
    1140                                                 function new(string name, uvm_component parent);
    1141                                                     super.new(name, parent);
    1142                                                 endfunction: new
    1143                                                 function void build_phase(uvm_phase phase);
    1144                                                     super.build_phase(phase);
    1145                                                     begin
    1146                                                         axiLite_configuration axiLite_cfg;
    1147                                                         axiLite_cfg = new;
    1148                                                         assert(axiLite_cfg.randomize());
    1149                                                         uvm_config_db#(axiLite_configuration)::set(.cntxt(this),.inst_name("*"),.field_name("config"),.value(axiLite_cfg));
    1150                                                         aL_env = template_env::type_id::create(.name("aL_env"),.parent(this));
    1151                                                     end
    1152                                                 endfunction: build_phase
    1153                                                 function void end_of_elaboration_phase(uvm_phase phase);
    1154                                                     super.end_of_elaboration_phase(phase);
    1155                                                     this.print();
    1156                                                     factory.print();
    1157                                                 endfunction
    1158                                                 task run_phase(uvm_phase phase);
    1159                                                     axiLite_directed_sequence    axiLite_seq;
    1160                                                     phase.raise_objection(.obj(this));
    1161                                                     axiLite_seq = axiLite_directed_sequence::type_id::create(.name("axiLite_seq"));
    1162                                                     assert(axiLite_seq.randomize());
    1163                                                     `uvm_info("aL_env", { "\n", axiLite_seq.sprint() }, UVM_LOW)
    1164                                                     axiLite_seq.start(aL_env.aL_agt.aL_sqr);
    1165                                                     phase.drop_objection(.obj(this));
    1166                                                 endtask: run_phase
    1167                                             endclass: axiLite_test
    1168                                             
    1169                                             // UVM_TEST : RGB_TEST1 [RGB]
    1170                                             class rgb_test1 extends uvm_test;
    1171                                                 `uvm_component_utils(rgb_test1)
    1172                                                 template_env frame_env;
    1173                                                 function new(string name, uvm_component parent);
    1174                                                     super.new(name, parent);
    1175                                                 endfunction
    1176                                             
    1177                                                 function void build_phase(uvm_phase phase);
    1178                                                     super.build_phase(phase);
    1179                                                     begin
    1180                                                     	rgb_configuration frame_cfg;
    1181                                                     	frame_cfg = new;
    1182                                                     	assert(frame_cfg.randomize());
    1183                                                     	uvm_config_db#(rgb_configuration)::set(.cntxt(this),.inst_name("*"),.field_name("config"),.value(frame_cfg));
    1184                                                     	frame_env = template_env::type_id::create(.name("frame_env"),.parent(this));
    1185                                                     end
    1186                                                 endfunction: build_phase
    1187                                             
    1188                                                 task run_phase(uvm_phase phase);
    1189                                                     top_sequence        random_sqr;
    1190                                                     uvm_component       component;
    1191                                                     rgb_sequencer       sequencer;
    1192                                                     random_sqr = top_sequence::type_id::create("random_sqr");
    1193                                                     if( !random_sqr.randomize() ) 
    1194                                                     	`uvm_error("", "Randomize failed")
    1195                                                     random_sqr.starting_phase = phase;
    1196                                                     component = uvm_top.find("*.frame_seqr");
    1197                                                     if ($cast(sequencer, component))
    1198                                                     	random_sqr.start(sequencer);
    1199                                                 endtask: run_phase
    1200                                             endclass: rgb_test1
    1201                                             
    1202                                             // UVM_TEST : RGB_TEST2 [RGB]
    1203                                             class rgb_test2 extends rgb_test1;
    1204                                                 `uvm_component_utils(rgb_test2)
    1205                                                 function new (string name, uvm_component parent);
    1206                                                     super.new(name, parent);
    1207                                                 endfunction : new
    1208                                             
    1209                                                 function void start_of_simulation_phase(uvm_phase phase);
    1210                                                     super.start_of_simulation_phase(phase);
    1211                                                     random_sequence_r1#(par_1)::type_id::set_type_override(random_sequence_r2::get_type());
    1212                                                 endfunction : start_of_simulation_phase
    1213                                             endclass: rgb_test2
    1214                                             
    1215                                             class rgb_test extends uvm_test;
    1216                                                 `uvm_component_utils(rgb_test)
    1217                                                 template_env frame_env;
    1218                                                 rgb_agent#(par_1) frame_agent;
    1219                                                 rgb_agent#(par_2) frame_agent_b;
    1220                                                 rgb_agent#(par_3) frame_agent_cs[4];
    1221                                                 function new(string name, uvm_component parent);
    1222                                                     super.new(name, parent);
    1223                                                 endfunction
    1224                                                 function void build_phase(uvm_phase phase);
    1225                                                     super.build_phase(phase);
    1226                                                     begin
    1227                                                     	rgb_configuration frame_cfg;
    1228                                                     	frame_cfg = new;
    1229                                                     	assert(frame_cfg.randomize());
    1230                                                     	uvm_config_db#(rgb_configuration)::set(.cntxt(this),.inst_name("*"),.field_name("config"),.value(frame_cfg));
    1231                                                     	frame_env       = template_env::type_id::create(.name("frame_env"),.parent(this));
    1232                                                     	frame_agent     = rgb_agent#(par_1)::type_id::create("frame_agent", this);
    1233                                                     	frame_agent_b   = rgb_agent#(par_2)::type_id::create("frame_agent_b", this);
    1234                                                     	foreach (frame_agent_cs[i])
    1235                                                             frame_agent_cs[i] = rgb_agent#(par_3)::type_id::create($sformatf("frame_agent_cs_%0d", i), this);
    1236                                                     end
    1237                                                 endfunction: build_phase
    1238                                                function void end_of_elaboration_phase(uvm_phase phase);
    1239                                                   uvm_phase run_phase = uvm_run_phase::get();
    1240                                                   run_phase.phase_done.set_drain_time(this, 100us);
    1241                                                   frame_agent.frame_mon.agent_id = 0;
    1242                                                   frame_agent_b.frame_mon.agent_id = 1;
    1243                                                   foreach (frame_agent_cs[i])
    1244                                                     frame_agent_cs[i].frame_mon.agent_id = i + 2;
    1245                                                     this.print();
    1246                                                     factory.print();
    1247                                                endfunction
    1248                                                task run_phase(uvm_phase phase);
    1249                                                   super.run_phase(phase);
    1250                                                   phase.raise_objection(this);
    1251                                                   fork
    1252                                                      repeat (3) begin
    1253                                                         rgb_random_sequence#(par_1) rgb_seq_a = rgb_random_sequence#(par_1)::type_id::create("rgb_seq_a");
    1254                                                         rgb_seq_a.start(frame_env.frame_agent.frame_seqr);
    1255                                                      end
    1256                                                      repeat (3) begin
    1257                                                         rgb_random_sequence#(par_2) rgb_seq_b = rgb_random_sequence#(par_2)::type_id::create("rgb_seq_b");
    1258                                                         rgb_seq_b.start(frame_agent_b.frame_seqr);
    1259                                                      end
    1260                                                      begin
    1261                                                         foreach (frame_agent_cs[i])
    1262                                                            fork
    1263                                                               automatic int unsigned agent_id = i;
    1264                                                               repeat (3) begin
    1265                                                                  rgb_random_sequence#(par_3) rgb_seq_c = rgb_random_sequence#(par_3)::type_id::create("rgb_seq_c");
    1266                                                                  rgb_seq_c.start(frame_agent_cs[agent_id].frame_seqr);
    1267                                                               end
    1268                                                            join_none
    1269                                                         wait fork;
    1270                                                      end
    1271                                                   join
    1272                                                   phase.drop_objection(this);
    1273                                                endtask
    1274                                             // task run_phase(uvm_phase phase);
    1275                                                 // rgb_random_sequence#(par_1)    random_sqr;
    1276                                                 // phase.raise_objection(.obj(this));
    1277                                                 // random_sqr = rgb_random_sequence#(par_1)::type_id::create(.name("random_sqr"));
    1278                                                 // assert(random_sqr.randomize());
    1279                                                 // `uvm_info("aL_env", { "\n", random_sqr.sprint() }, UVM_LOW)
    1280                                                 // random_sqr.start(frame_env.frame_agent.frame_seqr);
    1281                                                 // phase.drop_objection(.obj(this));
    1282                                             // endtask: run_phase
    1283                                             endclass: rgb_test
    1284                                             endpackage: socTest_pkg
    1285                                             
    1286                                             //------------------------------------------------------------------------------------
    1287                                             // INTERFACE
    1288                                             //------------------------------------------------------------------------------------
    1289                                             // INTERFACE : TEMPLATE_IF [TEMPLATE]
    1290                                             interface template_if;
    1291                                                 logic        sig_clock;
    1292                                                 logic        sig_ina;
    1293                                                 logic        sig_inb;
    1294                                                 logic        sig_en_i;
    1295                                                 logic        sig_en_o;
    1296                                                 logic        sig_out;
    1297                                                 modport      templateSlave (input sig_clock,sig_ina,sig_inb,sig_en_i,output sig_en_o,sig_out);
    1298                                             endinterface: template_if
    1299                                             // INTERFACE : AXILITE_IF [AXILITE]
    1300                                             interface axiLite_if(input bit ACLK,ARESETN);
    1301                                                 logic [7:0]     AWADDR;
    1302                                                 logic [ 2:0]    AWPROT;
    1303                                                 logic           AWVALID;
    1304                                                 logic           AWREADY;
    1305                                                 logic [31:0]    WDATA;
    1306                                                 logic [ 3:0]    WSTRB;
    1307                                                 logic           WVALID;
    1308                                                 logic           WREADY;
    1309                                                 logic [1:0]     BRESP;
    1310                                                 logic           BVALID;
    1311                                                 logic           BREADY;
    1312                                                 logic [7:0]     ARADDR;
    1313                                                 logic [ 2:0]    ARPROT;
    1314                                                 logic           ARVALID;
    1315                                                 logic           ARREADY;
    1316                                                 logic [31:0]    RDATA;
    1317                                                 logic [ 1:0]    RRESP;
    1318                                                 logic           RVALID;
    1319                                                 logic           RREADY;
    1320                                                 modport         ConfigMaster(input ACLK,ARESETN,AWADDR,AWPROT,AWVALID,WDATA,WSTRB,WVALID,BREADY,ARADDR,ARPROT,ARVALID,RREADY, output  AWREADY,ARREADY,RDATA,RRESP,RVALID,WREADY,BRESP,BVALID);
    1321                                             endinterface: axiLite_if
    1322                                             // INTERFACE : RGB_IF [RGB]
    1323                                             interface rgb_if(input bit clk);
    1324                                                 logic [7:0]  iRed;
    1325                                                 logic [7:0]  iGreen;
    1326                                                 logic [7:0]  iBlue;
    1327                                                 logic        iValid;
    1328                                                 logic        iPixelEn;
    1329                                                 logic        iEof;
    1330                                                 int unsigned iX;
    1331                                                 int unsigned iY;
    1332                                                 logic [7:0]  oRed;
    1333                                                 logic [7:0]  oGreen;
    1334                                                 logic [7:0]  oBlue;
    1335                                                 logic        oValid;
    1336            1                          1         clocking master_cb @ (posedge clk);
    1337                                                     default input #1step output #1ns;
    1338                                                     output iPixelEn,iX,iY,iRed,iGreen,iBlue,iValid,iEof;
    1339            1                          1             input  oRed;
    1340                                                 endclocking: master_cb
    1341            1                          1         clocking slave_cb @ (posedge clk);
    1342                                                     default input #1step output #1ns;
    1343            1                          1             input  iX,iY,iRed,iGreen,iBlue,iPixelEn,iValid,iEof;
    1344                                                     output oRed;
    1345                                                 endclocking: slave_cb
    1346                                                 modport master_mp(input clk, output  oRed,oGreen,oBlue,oValid);
    1347                                                 modport slave_mp (input clk,iRed,iGreen,iBlue,iValid,iPixelEn,iEof,iX,iY,output oRed,oGreen,oBlue,oValid);
    1348                                                 modport master_sync_mp(clocking master_cb);
    1349                                                 modport slave_sync_mp (clocking slave_cb);
    1350                                             endinterface: rgb_if
    1351                                             
    1352                                             //------------------------------------------------------------------------------------
    1353                                             // MODULE
    1354                                             //------------------------------------------------------------------------------------
    1355                                             // MODULE : ADDER [TEMPLATE]
    1356                                             module adder(template_if.templateSlave templateVif);
    1357                                                 import socTest_pkg::*;
    1358                                                 template dut (
    1359                                                .clk         (templateVif.sig_clock),
    1360                                                .en_i        (templateVif.sig_en_i),
    1361                                                .ina         (templateVif.sig_ina),
    1362                                                .inb         (templateVif.sig_inb),
    1363                                                .en_o        (templateVif.sig_en_o),
    1364                                                .out         (templateVif.sig_out));
    1365                                             endmodule: adder
    1366                                             // MODULE : VFPCONFIGDUT [AXILITE]
    1367                                             module vfpConfigDut(axiLite_if.ConfigMaster axiLiteVif);
    1368                                                 import socTest_pkg::*;
    1369                                                 vfpConfig dutModuleInst (
    1370                                                 .ACLK       (axiLiteVif.ACLK   ),
    1371                                                 .ARESETN    (axiLiteVif.ARESETN),
    1372                                                 .AWADDR     (axiLiteVif.AWADDR ),
    1373                                                 .AWPROT     (axiLiteVif.AWPROT ),
    1374                                                 .AWVALID    (axiLiteVif.AWVALID),
    1375                                                 .AWREADY    (axiLiteVif.AWREADY),
    1376                                                 .WDATA      (axiLiteVif.WDATA  ),
    1377                                                 .WSTRB      (axiLiteVif.WSTRB  ),
    1378                                                 .WVALID     (axiLiteVif.WVALID ),
    1379                                                 .WREADY     (axiLiteVif.WREADY ),
    1380                                                 .BRESP      (axiLiteVif.BRESP  ),
    1381                                                 .BVALID     (axiLiteVif.BVALID ),
    1382                                                 .BREADY     (axiLiteVif.BREADY ),
    1383                                                 .ARADDR     (axiLiteVif.ARADDR ),
    1384                                                 .ARPROT     (axiLiteVif.ARPROT ),
    1385                                                 .ARVALID    (axiLiteVif.ARVALID),
    1386                                                 .ARREADY    (axiLiteVif.ARREADY),
    1387                                                 .RDATA      (axiLiteVif.RDATA  ),
    1388                                                 .RRESP      (axiLiteVif.RRESP  ),
    1389                                                 .RVALID     (axiLiteVif.RVALID ),
    1390                                                 .RREADY     (axiLiteVif.RREADY ));
    1391                                             endmodule: vfpConfigDut
    1392                                             // MODULE : RGB_COLOR [RGB]
    1393                                             module rgb_color(rgb_if.slave_mp frame_slave_if);
    1394                                                 import socTest_pkg::*;
    1395                                                 pixelCord dutModule2Inst (
    1396                                                .clk         (frame_slave_if.clk),
    1397                                                .iRed        (frame_slave_if.iRed),
    1398                                                .iGreen      (frame_slave_if.iGreen),
    1399                                                .iBlue       (frame_slave_if.iBlue),
    1400                                                .iValid      (frame_slave_if.iValid),
    1401                                                .iPixelEn    (frame_slave_if.iPixelEn),
    1402                                                .iEof        (frame_slave_if.iEof),
    1403                                                .iX          (frame_slave_if.iX),
    1404                                                .iY          (frame_slave_if.iY),
    1405                                                .oRed        (frame_slave_if.oRed),
    1406                                                .oGreen      (frame_slave_if.oGreen),
    1407                                                .oBlue       (frame_slave_if.oBlue),
    1408                                                .oValid      (frame_slave_if.oValid));
    1409                                             endmodule: rgb_color
    1410                                             
    1411                                             
    1412                                             //------------------------------------------------------------------------------------
    1413                                             // MODULE TOP
    1414                                             //------------------------------------------------------------------------------------
    1415                                             module top;
    1416                                                 import uvm_pkg::*;
    1417                                                 import socTest_pkg::*;
    1418                                                 reg ACLK;
    1419                                                 reg ARESETN;
    1420                                                 reg clk;
    1421                                                 axiLite_if          axiLiteVif(ACLK,ARESETN);
    1422                                                 vfpConfigDut        vfpConfig_test(axiLiteVif); // [AXILITE]
    1423                                                 template_if         templateVif();
    1424                                                 adder               templateDut(templateVif);   // [TEMPLATE]
    1425                                                 rgb_if              frame_slave_if(clk);
    1426                                                 rgb_color           frame_color(frame_slave_if);// [RGB]
    1427                                                 initial begin
    1428            1                          1             ARESETN = 1'b0;
    1429            1                          1         #1000;
    1430            1                          1             ARESETN = 1'b1;
    1431                                                 end
    1432                                                 initial begin
    1433            1                          1             ACLK = 0;
    1434            1                          1         #5ns ;
    1435            1                          1         forever #5ns ACLK = ! ACLK;
    1435            2                        440     
    1435            3                        439     
    1436                                                 end
    1437                                                 initial begin
    1438            1                          1             templateVif.sig_clock = 0;
    1439            1                          1         #5ns ;
    1440            1                          1         forever #5ns templateVif.sig_clock = ! templateVif.sig_clock;
    1440            2                        440     
    1440            3                        439     
    1441                                                 end
    1442                                                 initial begin
    1443            1                          1             clk = 0;
    1444            1                          1             #5ns ;
    1445            1                          1             forever #5ns clk = ! clk;
    1445            2                        440     
    1445            3                        439     
    1446                                                 end
    1447                                                 initial begin
    1448            1                          1         uvm_config_db #(virtual axiLite_if)::set(null, "*", "axiLiteVif", axiLiteVif);
    1449            1                          1         uvm_resource_db#(virtual template_if)::set(.scope("ifs"), .name("template_if"), .val(templateVif));
    1450            1                          1         uvm_resource_db#(virtual rgb_if)::set(.scope("ifs"),.name("rgb_if"),.val(frame_slave_if));
    1451            1                          1         run_test();
    1452                                                 end
    1453                                             endmodule: top
    1454                                             //------------------------------------------------------------------------------------

Branch Coverage:
    Enabled Coverage            Active      Hits    Misses % Covered
    ----------------            ------      ----    ------ ---------
    Branches                         0         0         0     100.0
Condition Coverage:
    Enabled Coverage            Active   Covered    Misses % Covered
    ----------------            ------      ----    ------ ---------
    FEC Condition Terms              0         0         0     100.0
Expression Coverage:
    Enabled Coverage            Active   Covered    Misses % Covered
    ----------------            ------      ----    ------ ---------
    FEC Expression Terms             0         0         0     100.0
FSM Coverage:
    Enabled Coverage            Active      Hits    Misses % Covered
    ----------------            ------      ----    ------ ---------
    FSMs                                                       100.0
        States                       0         0         0     100.0
        Transitions                  0         0         0     100.0

COVERGROUP COVERAGE:
-----------------------------------------------------------------------------------------------
Covergroup                                             Metric       Goal    Status               
                                                                                              
-----------------------------------------------------------------------------------------------
 TYPE /socTest_pkg/template_monitor_afterToDut/template_cg 
                                                         0.0%        100    ZERO                 
    covered/total bins:                                     0         24                      
    missing/total bins:                                    24         24                      
    % Hit:                                               0.0%        100                      
    type_option.weight=1
    type_option.goal=100
    type_option.comment=
    type_option.strobe=0
    type_option.merge_instances=auto(1)
    Coverpoint template_cg::ina_cp                       0.0%        100    ZERO                 
        covered/total bins:                                 0          4                      
        missing/total bins:                                 4          4                      
        % Hit:                                           0.0%        100                      
        type_option.weight=1
        type_option.goal=100
        type_option.comment=
        bin auto[0]                                         0          1    ZERO                 
        bin auto[1]                                         0          1    ZERO                 
        bin auto[2]                                         0          1    ZERO                 
        bin auto[3]                                         0          1    ZERO                 
    Coverpoint template_cg::inb_cp                       0.0%        100    ZERO                 
        covered/total bins:                                 0          4                      
        missing/total bins:                                 4          4                      
        % Hit:                                           0.0%        100                      
        type_option.weight=1
        type_option.goal=100
        type_option.comment=
        bin auto[0]                                         0          1    ZERO                 
        bin auto[1]                                         0          1    ZERO                 
        bin auto[2]                                         0          1    ZERO                 
        bin auto[3]                                         0          1    ZERO                 
    Cross template_cg::#cross__0#                        0.0%        100    ZERO                 
        covered/total bins:                                 0         16                      
        missing/total bins:                                16         16                      
        % Hit:                                           0.0%        100                      
        type_option.weight=1
        type_option.goal=100
        type_option.comment=
        bin <auto[0],auto[0]>                               0          1    ZERO                 
        bin <auto[1],auto[0]>                               0          1    ZERO                 
        bin <auto[2],auto[0]>                               0          1    ZERO                 
        bin <auto[3],auto[0]>                               0          1    ZERO                 
        bin <auto[0],auto[1]>                               0          1    ZERO                 
        bin <auto[1],auto[1]>                               0          1    ZERO                 
        bin <auto[2],auto[1]>                               0          1    ZERO                 
        bin <auto[3],auto[1]>                               0          1    ZERO                 
        bin <auto[0],auto[2]>                               0          1    ZERO                 
        bin <auto[1],auto[2]>                               0          1    ZERO                 
        bin <auto[2],auto[2]>                               0          1    ZERO                 
        bin <auto[3],auto[2]>                               0          1    ZERO                 
        bin <auto[0],auto[3]>                               0          1    ZERO                 
        bin <auto[1],auto[3]>                               0          1    ZERO                 
        bin <auto[2],auto[3]>                               0          1    ZERO                 
        bin <auto[3],auto[3]>                               0          1    ZERO                 
 CLASS template_monitor_afterToDut
 TYPE /socTest_pkg/axiLite_fc_subscriber/aL_cg           0.0%        100    ZERO                 
    covered/total bins:                                     0        128                      
    missing/total bins:                                   128        128                      
    % Hit:                                               0.0%        100                      
    type_option.weight=1
    type_option.goal=100
    type_option.comment=
    type_option.strobe=0
    type_option.merge_instances=auto(1)
    Coverpoint aL_cg::WDATA_cp                           0.0%        100    ZERO                 
        covered/total bins:                                 0         64                      
        missing/total bins:                                64         64                      
        % Hit:                                           0.0%        100                      
        type_option.weight=1
        type_option.goal=100
        type_option.comment=
        bin auto[0:67108863]                                0          1    ZERO                 
        bin auto[67108864:134217727]                        0          1    ZERO                 
        bin auto[134217728:201326591]                       0          1    ZERO                 
        bin auto[201326592:268435455]                       0          1    ZERO                 
        bin auto[268435456:335544319]                       0          1    ZERO                 
        bin auto[335544320:402653183]                       0          1    ZERO                 
        bin auto[402653184:469762047]                       0          1    ZERO                 
        bin auto[469762048:536870911]                       0          1    ZERO                 
        bin auto[536870912:603979775]                       0          1    ZERO                 
        bin auto[603979776:671088639]                       0          1    ZERO                 
        bin auto[671088640:738197503]                       0          1    ZERO                 
        bin auto[738197504:805306367]                       0          1    ZERO                 
        bin auto[805306368:872415231]                       0          1    ZERO                 
        bin auto[872415232:939524095]                       0          1    ZERO                 
        bin auto[939524096:1006632959]                      0          1    ZERO                 
        bin auto[1006632960:1073741823]                     0          1    ZERO                 
        bin auto[1073741824:1140850687]                     0          1    ZERO                 
        bin auto[1140850688:1207959551]                     0          1    ZERO                 
        bin auto[1207959552:1275068415]                     0          1    ZERO                 
        bin auto[1275068416:1342177279]                     0          1    ZERO                 
        bin auto[1342177280:1409286143]                     0          1    ZERO                 
        bin auto[1409286144:1476395007]                     0          1    ZERO                 
        bin auto[1476395008:1543503871]                     0          1    ZERO                 
        bin auto[1543503872:1610612735]                     0          1    ZERO                 
        bin auto[1610612736:1677721599]                     0          1    ZERO                 
        bin auto[1677721600:1744830463]                     0          1    ZERO                 
        bin auto[1744830464:1811939327]                     0          1    ZERO                 
        bin auto[1811939328:1879048191]                     0          1    ZERO                 
        bin auto[1879048192:1946157055]                     0          1    ZERO                 
        bin auto[1946157056:2013265919]                     0          1    ZERO                 
        bin auto[2013265920:2080374783]                     0          1    ZERO                 
        bin auto[2080374784:2147483647]                     0          1    ZERO                 
        bin auto[2147483648:2214592511]                     0          1    ZERO                 
        bin auto[2214592512:2281701375]                     0          1    ZERO                 
        bin auto[2281701376:2348810239]                     0          1    ZERO                 
        bin auto[2348810240:2415919103]                     0          1    ZERO                 
        bin auto[2415919104:2483027967]                     0          1    ZERO                 
        bin auto[2483027968:2550136831]                     0          1    ZERO                 
        bin auto[2550136832:2617245695]                     0          1    ZERO                 
        bin auto[2617245696:2684354559]                     0          1    ZERO                 
        bin auto[2684354560:2751463423]                     0          1    ZERO                 
        bin auto[2751463424:2818572287]                     0          1    ZERO                 
        bin auto[2818572288:2885681151]                     0          1    ZERO                 
        bin auto[2885681152:2952790015]                     0          1    ZERO                 
        bin auto[2952790016:3019898879]                     0          1    ZERO                 
        bin auto[3019898880:3087007743]                     0          1    ZERO                 
        bin auto[3087007744:3154116607]                     0          1    ZERO                 
        bin auto[3154116608:3221225471]                     0          1    ZERO                 
        bin auto[3221225472:3288334335]                     0          1    ZERO                 
        bin auto[3288334336:3355443199]                     0          1    ZERO                 
        bin auto[3355443200:3422552063]                     0          1    ZERO                 
        bin auto[3422552064:3489660927]                     0          1    ZERO                 
        bin auto[3489660928:3556769791]                     0          1    ZERO                 
        bin auto[3556769792:3623878655]                     0          1    ZERO                 
        bin auto[3623878656:3690987519]                     0          1    ZERO                 
        bin auto[3690987520:3758096383]                     0          1    ZERO                 
        bin auto[3758096384:3825205247]                     0          1    ZERO                 
        bin auto[3825205248:3892314111]                     0          1    ZERO                 
        bin auto[3892314112:3959422975]                     0          1    ZERO                 
        bin auto[3959422976:4026531839]                     0          1    ZERO                 
        bin auto[4026531840:4093640703]                     0          1    ZERO                 
        bin auto[4093640704:4160749567]                     0          1    ZERO                 
        bin auto[4160749568:4227858431]                     0          1    ZERO                 
        bin auto[4227858432:4294967295]                     0          1    ZERO                 
    Coverpoint aL_cg::AWADDR_cp                          0.0%        100    ZERO                 
        covered/total bins:                                 0         64                      
        missing/total bins:                                64         64                      
        % Hit:                                           0.0%        100                      
        type_option.weight=1
        type_option.goal=100
        type_option.comment=
        bin auto[0:67108863]                                0          1    ZERO                 
        bin auto[67108864:134217727]                        0          1    ZERO                 
        bin auto[134217728:201326591]                       0          1    ZERO                 
        bin auto[201326592:268435455]                       0          1    ZERO                 
        bin auto[268435456:335544319]                       0          1    ZERO                 
        bin auto[335544320:402653183]                       0          1    ZERO                 
        bin auto[402653184:469762047]                       0          1    ZERO                 
        bin auto[469762048:536870911]                       0          1    ZERO                 
        bin auto[536870912:603979775]                       0          1    ZERO                 
        bin auto[603979776:671088639]                       0          1    ZERO                 
        bin auto[671088640:738197503]                       0          1    ZERO                 
        bin auto[738197504:805306367]                       0          1    ZERO                 
        bin auto[805306368:872415231]                       0          1    ZERO                 
        bin auto[872415232:939524095]                       0          1    ZERO                 
        bin auto[939524096:1006632959]                      0          1    ZERO                 
        bin auto[1006632960:1073741823]                     0          1    ZERO                 
        bin auto[1073741824:1140850687]                     0          1    ZERO                 
        bin auto[1140850688:1207959551]                     0          1    ZERO                 
        bin auto[1207959552:1275068415]                     0          1    ZERO                 
        bin auto[1275068416:1342177279]                     0          1    ZERO                 
        bin auto[1342177280:1409286143]                     0          1    ZERO                 
        bin auto[1409286144:1476395007]                     0          1    ZERO                 
        bin auto[1476395008:1543503871]                     0          1    ZERO                 
        bin auto[1543503872:1610612735]                     0          1    ZERO                 
        bin auto[1610612736:1677721599]                     0          1    ZERO                 
        bin auto[1677721600:1744830463]                     0          1    ZERO                 
        bin auto[1744830464:1811939327]                     0          1    ZERO                 
        bin auto[1811939328:1879048191]                     0          1    ZERO                 
        bin auto[1879048192:1946157055]                     0          1    ZERO                 
        bin auto[1946157056:2013265919]                     0          1    ZERO                 
        bin auto[2013265920:2080374783]                     0          1    ZERO                 
        bin auto[2080374784:2147483647]                     0          1    ZERO                 
        bin auto[2147483648:2214592511]                     0          1    ZERO                 
        bin auto[2214592512:2281701375]                     0          1    ZERO                 
        bin auto[2281701376:2348810239]                     0          1    ZERO                 
        bin auto[2348810240:2415919103]                     0          1    ZERO                 
        bin auto[2415919104:2483027967]                     0          1    ZERO                 
        bin auto[2483027968:2550136831]                     0          1    ZERO                 
        bin auto[2550136832:2617245695]                     0          1    ZERO                 
        bin auto[2617245696:2684354559]                     0          1    ZERO                 
        bin auto[2684354560:2751463423]                     0          1    ZERO                 
        bin auto[2751463424:2818572287]                     0          1    ZERO                 
        bin auto[2818572288:2885681151]                     0          1    ZERO                 
        bin auto[2885681152:2952790015]                     0          1    ZERO                 
        bin auto[2952790016:3019898879]                     0          1    ZERO                 
        bin auto[3019898880:3087007743]                     0          1    ZERO                 
        bin auto[3087007744:3154116607]                     0          1    ZERO                 
        bin auto[3154116608:3221225471]                     0          1    ZERO                 
        bin auto[3221225472:3288334335]                     0          1    ZERO                 
        bin auto[3288334336:3355443199]                     0          1    ZERO                 
        bin auto[3355443200:3422552063]                     0          1    ZERO                 
        bin auto[3422552064:3489660927]                     0          1    ZERO                 
        bin auto[3489660928:3556769791]                     0          1    ZERO                 
        bin auto[3556769792:3623878655]                     0          1    ZERO                 
        bin auto[3623878656:3690987519]                     0          1    ZERO                 
        bin auto[3690987520:3758096383]                     0          1    ZERO                 
        bin auto[3758096384:3825205247]                     0          1    ZERO                 
        bin auto[3825205248:3892314111]                     0          1    ZERO                 
        bin auto[3892314112:3959422975]                     0          1    ZERO                 
        bin auto[3959422976:4026531839]                     0          1    ZERO                 
        bin auto[4026531840:4093640703]                     0          1    ZERO                 
        bin auto[4093640704:4160749567]                     0          1    ZERO                 
        bin auto[4160749568:4227858431]                     0          1    ZERO                 
        bin auto[4227858432:4294967295]                     0          1    ZERO                 
 CLASS axiLite_fc_subscriber
 TYPE /socTest_pkg/rgb_fc_subscriber/rgb_cg             86.6%        100    Uncovered            
    covered/total bins:                                   354        454                      
    missing/total bins:                                   100        454                      
    % Hit:                                              77.9%        100                      
    type_option.weight=1
    type_option.goal=100
    type_option.comment=
    type_option.strobe=0
    type_option.merge_instances=auto(1)
    Coverpoint rgb_cg::iRed_cp                          90.6%        100    Uncovered            
        covered/total bins:                                58         64                      
        missing/total bins:                                 6         64                      
        % Hit:                                          90.6%        100                      
        type_option.weight=1
        type_option.goal=100
        type_option.comment=
        bin auto[0:3]                                       6          1    Covered              
        bin auto[4:7]                                       2          1    Covered              
        bin auto[8:11]                                      4          1    Covered              
        bin auto[12:15]                                     4          1    Covered              
        bin auto[16:19]                                     2          1    Covered              
        bin auto[20:23]                                     2          1    Covered              
        bin auto[24:27]                                     4          1    Covered              
        bin auto[28:31]                                     4          1    Covered              
        bin auto[32:35]                                     6          1    Covered              
        bin auto[36:39]                                     4          1    Covered              
        bin auto[40:43]                                     2          1    Covered              
        bin auto[44:47]                                     6          1    Covered              
        bin auto[48:51]                                     4          1    Covered              
        bin auto[52:55]                                     4          1    Covered              
        bin auto[56:59]                                     4          1    Covered              
        bin auto[60:63]                                    10          1    Covered              
        bin auto[64:67]                                     2          1    Covered              
        bin auto[68:71]                                     0          1    ZERO                 
        bin auto[72:75]                                     6          1    Covered              
        bin auto[76:79]                                     4          1    Covered              
        bin auto[80:83]                                     2          1    Covered              
        bin auto[84:87]                                     4          1    Covered              
        bin auto[88:91]                                     8          1    Covered              
        bin auto[92:95]                                     2          1    Covered              
        bin auto[96:99]                                     4          1    Covered              
        bin auto[100:103]                                   2          1    Covered              
        bin auto[104:107]                                   4          1    Covered              
        bin auto[108:111]                                   2          1    Covered              
        bin auto[112:115]                                   4          1    Covered              
        bin auto[116:119]                                   2          1    Covered              
        bin auto[120:123]                                   4          1    Covered              
        bin auto[124:127]                                   2          1    Covered              
        bin auto[128:131]                                   4          1    Covered              
        bin auto[132:135]                                   0          1    ZERO                 
        bin auto[136:139]                                   0          1    ZERO                 
        bin auto[140:143]                                   2          1    Covered              
        bin auto[144:147]                                   2          1    Covered              
        bin auto[148:151]                                   4          1    Covered              
        bin auto[152:155]                                   2          1    Covered              
        bin auto[156:159]                                   6          1    Covered              
        bin auto[160:163]                                   2          1    Covered              
        bin auto[164:167]                                   4          1    Covered              
        bin auto[168:171]                                   2          1    Covered              
        bin auto[172:175]                                   4          1    Covered              
        bin auto[176:179]                                   2          1    Covered              
        bin auto[180:183]                                   4          1    Covered              
        bin auto[184:187]                                   2          1    Covered              
        bin auto[188:191]                                   2          1    Covered              
        bin auto[192:195]                                   8          1    Covered              
        bin auto[196:199]                                   4          1    Covered              
        bin auto[200:203]                                   0          1    ZERO                 
        bin auto[204:207]                                   0          1    ZERO                 
        bin auto[208:211]                                   4          1    Covered              
        bin auto[212:215]                                   6          1    Covered              
        bin auto[216:219]                                   0          1    ZERO                 
        bin auto[220:223]                                   4          1    Covered              
        bin auto[224:227]                                   2          1    Covered              
        bin auto[228:231]                                   8          1    Covered              
        bin auto[232:235]                                   2          1    Covered              
        bin auto[236:239]                                   4          1    Covered              
        bin auto[240:243]                                   2          1    Covered              
        bin auto[244:247]                                   4          1    Covered              
        bin auto[248:251]                                   2          1    Covered              
        bin auto[252:255]                                   8          1    Covered              
    Coverpoint rgb_cg::iGreen_cp                        81.2%        100    Uncovered            
        covered/total bins:                                52         64                      
        missing/total bins:                                12         64                      
        % Hit:                                          81.2%        100                      
        type_option.weight=1
        type_option.goal=100
        type_option.comment=
        bin auto[0:3]                                       2          1    Covered              
        bin auto[4:7]                                       4          1    Covered              
        bin auto[8:11]                                      2          1    Covered              
        bin auto[12:15]                                     4          1    Covered              
        bin auto[16:19]                                     0          1    ZERO                 
        bin auto[20:23]                                     2          1    Covered              
        bin auto[24:27]                                     6          1    Covered              
        bin auto[28:31]                                     2          1    Covered              
        bin auto[32:35]                                     0          1    ZERO                 
        bin auto[36:39]                                     0          1    ZERO                 
        bin auto[40:43]                                     0          1    ZERO                 
        bin auto[44:47]                                     0          1    ZERO                 
        bin auto[48:51]                                     8          1    Covered              
        bin auto[52:55]                                     2          1    Covered              
        bin auto[56:59]                                     0          1    ZERO                 
        bin auto[60:63]                                     2          1    Covered              
        bin auto[64:67]                                     0          1    ZERO                 
        bin auto[68:71]                                    12          1    Covered              
        bin auto[72:75]                                     6          1    Covered              
        bin auto[76:79]                                     0          1    ZERO                 
        bin auto[80:83]                                     6          1    Covered              
        bin auto[84:87]                                     2          1    Covered              
        bin auto[88:91]                                     4          1    Covered              
        bin auto[92:95]                                     2          1    Covered              
        bin auto[96:99]                                     6          1    Covered              
        bin auto[100:103]                                   2          1    Covered              
        bin auto[104:107]                                   0          1    ZERO                 
        bin auto[108:111]                                   2          1    Covered              
        bin auto[112:115]                                   0          1    ZERO                 
        bin auto[116:119]                                   2          1    Covered              
        bin auto[120:123]                                   6          1    Covered              
        bin auto[124:127]                                   2          1    Covered              
        bin auto[128:131]                                   4          1    Covered              
        bin auto[132:135]                                   4          1    Covered              
        bin auto[136:139]                                   2          1    Covered              
        bin auto[140:143]                                   8          1    Covered              
        bin auto[144:147]                                   8          1    Covered              
        bin auto[148:151]                                   2          1    Covered              
        bin auto[152:155]                                   2          1    Covered              
        bin auto[156:159]                                   2          1    Covered              
        bin auto[160:163]                                   4          1    Covered              
        bin auto[164:167]                                   2          1    Covered              
        bin auto[168:171]                                   2          1    Covered              
        bin auto[172:175]                                   6          1    Covered              
        bin auto[176:179]                                   0          1    ZERO                 
        bin auto[180:183]                                   4          1    Covered              
        bin auto[184:187]                                   0          1    ZERO                 
        bin auto[188:191]                                   6          1    Covered              
        bin auto[192:195]                                   4          1    Covered              
        bin auto[196:199]                                   2          1    Covered              
        bin auto[200:203]                                   4          1    Covered              
        bin auto[204:207]                                   2          1    Covered              
        bin auto[208:211]                                   6          1    Covered              
        bin auto[212:215]                                   6          1    Covered              
        bin auto[216:219]                                   4          1    Covered              
        bin auto[220:223]                                   4          1    Covered              
        bin auto[224:227]                                   4          1    Covered              
        bin auto[228:231]                                   4          1    Covered              
        bin auto[232:235]                                   4          1    Covered              
        bin auto[236:239]                                   6          1    Covered              
        bin auto[240:243]                                   8          1    Covered              
        bin auto[244:247]                                   8          1    Covered              
        bin auto[248:251]                                   8          1    Covered              
        bin auto[252:255]                                   4          1    Covered              
    Coverpoint rgb_cg::iBlue_cp                         81.2%        100    Uncovered            
        covered/total bins:                                52         64                      
        missing/total bins:                                12         64                      
        % Hit:                                          81.2%        100                      
        type_option.weight=1
        type_option.goal=100
        type_option.comment=
        bin auto[0:3]                                       6          1    Covered              
        bin auto[4:7]                                       4          1    Covered              
        bin auto[8:11]                                      8          1    Covered              
        bin auto[12:15]                                     2          1    Covered              
        bin auto[16:19]                                    10          1    Covered              
        bin auto[20:23]                                     0          1    ZERO                 
        bin auto[24:27]                                     2          1    Covered              
        bin auto[28:31]                                     4          1    Covered              
        bin auto[32:35]                                     4          1    Covered              
        bin auto[36:39]                                     0          1    ZERO                 
        bin auto[40:43]                                     6          1    Covered              
        bin auto[44:47]                                     6          1    Covered              
        bin auto[48:51]                                     6          1    Covered              
        bin auto[52:55]                                     2          1    Covered              
        bin auto[56:59]                                     8          1    Covered              
        bin auto[60:63]                                     0          1    ZERO                 
        bin auto[64:67]                                    10          1    Covered              
        bin auto[68:71]                                     0          1    ZERO                 
        bin auto[72:75]                                     0          1    ZERO                 
        bin auto[76:79]                                     2          1    Covered              
        bin auto[80:83]                                     2          1    Covered              
        bin auto[84:87]                                     2          1    Covered              
        bin auto[88:91]                                     4          1    Covered              
        bin auto[92:95]                                     6          1    Covered              
        bin auto[96:99]                                     8          1    Covered              
        bin auto[100:103]                                   4          1    Covered              
        bin auto[104:107]                                   0          1    ZERO                 
        bin auto[108:111]                                   4          1    Covered              
        bin auto[112:115]                                   2          1    Covered              
        bin auto[116:119]                                   6          1    Covered              
        bin auto[120:123]                                   4          1    Covered              
        bin auto[124:127]                                   4          1    Covered              
        bin auto[128:131]                                   0          1    ZERO                 
        bin auto[132:135]                                   6          1    Covered              
        bin auto[136:139]                                   4          1    Covered              
        bin auto[140:143]                                   2          1    Covered              
        bin auto[144:147]                                   6          1    Covered              
        bin auto[148:151]                                   4          1    Covered              
        bin auto[152:155]                                   0          1    ZERO                 
        bin auto[156:159]                                   4          1    Covered              
        bin auto[160:163]                                   6          1    Covered              
        bin auto[164:167]                                   2          1    Covered              
        bin auto[168:171]                                   2          1    Covered              
        bin auto[172:175]                                   4          1    Covered              
        bin auto[176:179]                                   2          1    Covered              
        bin auto[180:183]                                   4          1    Covered              
        bin auto[184:187]                                   0          1    ZERO                 
        bin auto[188:191]                                   0          1    ZERO                 
        bin auto[192:195]                                   2          1    Covered              
        bin auto[196:199]                                   2          1    Covered              
        bin auto[200:203]                                   2          1    Covered              
        bin auto[204:207]                                   2          1    Covered              
        bin auto[208:211]                                   0          1    ZERO                 
        bin auto[212:215]                                   4          1    Covered              
        bin auto[216:219]                                   2          1    Covered              
        bin auto[220:223]                                   2          1    Covered              
        bin auto[224:227]                                   2          1    Covered              
        bin auto[228:231]                                   0          1    ZERO                 
        bin auto[232:235]                                   4          1    Covered              
        bin auto[236:239]                                   8          1    Covered              
        bin auto[240:243]                                   2          1    Covered              
        bin auto[244:247]                                   8          1    Covered              
        bin auto[248:251]                                   4          1    Covered              
        bin auto[252:255]                                   4          1    Covered              
    Coverpoint rgb_cg::iPixelEn_cp                     100.0%        100    Covered              
        covered/total bins:                                 2          2                      
        missing/total bins:                                 0          2                      
        % Hit:                                         100.0%        100                      
        type_option.weight=1
        type_option.goal=100
        type_option.comment=
        bin auto[0]                                       122          1    Covered              
        bin auto[1]                                        98          1    Covered              
    Coverpoint rgb_cg::iValid_cp                       100.0%        100    Covered              
        covered/total bins:                                 2          2                      
        missing/total bins:                                 0          2                      
        % Hit:                                         100.0%        100                      
        type_option.weight=1
        type_option.goal=100
        type_option.comment=
        bin auto[0]                                       114          1    Covered              
        bin auto[1]                                       106          1    Covered              
    Coverpoint rgb_cg::iEof_cp                         100.0%        100    Covered              
        covered/total bins:                                 2          2                      
        missing/total bins:                                 0          2                      
        % Hit:                                         100.0%        100                      
        type_option.weight=1
        type_option.goal=100
        type_option.comment=
        bin auto[0]                                       114          1    Covered              
        bin auto[1]                                       106          1    Covered              
    Coverpoint rgb_cg::iX_cp                            79.6%        100    Uncovered            
        covered/total bins:                                51         64                      
        missing/total bins:                                13         64                      
        % Hit:                                          79.6%        100                      
        type_option.weight=1
        type_option.goal=100
        type_option.comment=
        bin auto[0:31]                                      2          1    Covered              
        bin auto[32:63]                                     2          1    Covered              
        bin auto[64:95]                                     2          1    Covered              
        bin auto[96:127]                                    0          1    ZERO                 
        bin auto[128:159]                                   4          1    Covered              
        bin auto[160:191]                                   2          1    Covered              
        bin auto[192:223]                                   6          1    Covered              
        bin auto[224:255]                                   4          1    Covered              
        bin auto[256:287]                                   2          1    Covered              
        bin auto[288:319]                                   2          1    Covered              
        bin auto[320:351]                                   0          1    ZERO                 
        bin auto[352:383]                                   6          1    Covered              
        bin auto[384:415]                                   6          1    Covered              
        bin auto[416:447]                                   2          1    Covered              
        bin auto[448:479]                                   4          1    Covered              
        bin auto[480:511]                                   6          1    Covered              
        bin auto[512:543]                                   0          1    ZERO                 
        bin auto[544:575]                                   2          1    Covered              
        bin auto[576:607]                                   4          1    Covered              
        bin auto[608:639]                                   2          1    Covered              
        bin auto[640:671]                                   4          1    Covered              
        bin auto[672:703]                                   2          1    Covered              
        bin auto[704:735]                                   2          1    Covered              
        bin auto[736:767]                                   4          1    Covered              
        bin auto[768:799]                                   6          1    Covered              
        bin auto[800:831]                                   4          1    Covered              
        bin auto[832:863]                                   4          1    Covered              
        bin auto[864:895]                                   2          1    Covered              
        bin auto[896:927]                                   6          1    Covered              
        bin auto[928:959]                                   4          1    Covered              
        bin auto[960:991]                                   2          1    Covered              
        bin auto[992:1023]                                  0          1    ZERO                 
        bin auto[1024:1055]                                 4          1    Covered              
        bin auto[1056:1087]                                 0          1    ZERO                 
        bin auto[1088:1119]                                10          1    Covered              
        bin auto[1120:1151]                                 6          1    Covered              
        bin auto[1152:1183]                                10          1    Covered              
        bin auto[1184:1215]                                 2          1    Covered              
        bin auto[1216:1247]                                 4          1    Covered              
        bin auto[1248:1279]                                 2          1    Covered              
        bin auto[1280:1311]                                 0          1    ZERO                 
        bin auto[1312:1343]                                 4          1    Covered              
        bin auto[1344:1375]                                 0          1    ZERO                 
        bin auto[1376:1407]                                10          1    Covered              
        bin auto[1408:1439]                                 2          1    Covered              
        bin auto[1440:1471]                                 8          1    Covered              
        bin auto[1472:1503]                                 0          1    ZERO                 
        bin auto[1504:1535]                                 2          1    Covered              
        bin auto[1536:1567]                                 8          1    Covered              
        bin auto[1568:1599]                                 6          1    Covered              
        bin auto[1600:1631]                                 0          1    ZERO                 
        bin auto[1632:1663]                                 6          1    Covered              
        bin auto[1664:1695]                                 2          1    Covered              
        bin auto[1696:1727]                                 2          1    Covered              
        bin auto[1728:1759]                                 2          1    Covered              
        bin auto[1760:1791]                                 4          1    Covered              
        bin auto[1792:1823]                                10          1    Covered              
        bin auto[1824:1855]                                 6          1    Covered              
        bin auto[1856:1887]                                 0          1    ZERO                 
        bin auto[1888:1919]                                 0          1    ZERO                 
        bin auto[1920:1951]                                 0          1    ZERO                 
        bin auto[1952:1983]                                 0          1    ZERO                 
        bin auto[1984:2015]                                 6          1    Covered              
        bin auto[2016:2047]                                 6          1    Covered              
    Coverpoint rgb_cg::iY_cp                            82.8%        100    Uncovered            
        covered/total bins:                                53         64                      
        missing/total bins:                                11         64                      
        % Hit:                                          82.8%        100                      
        type_option.weight=1
        type_option.goal=100
        type_option.comment=
        bin auto[0:31]                                      4          1    Covered              
        bin auto[32:63]                                     8          1    Covered              
        bin auto[64:95]                                     6          1    Covered              
        bin auto[96:127]                                    0          1    ZERO                 
        bin auto[128:159]                                   2          1    Covered              
        bin auto[160:191]                                   4          1    Covered              
        bin auto[192:223]                                   6          1    Covered              
        bin auto[224:255]                                   2          1    Covered              
        bin auto[256:287]                                   4          1    Covered              
        bin auto[288:319]                                   2          1    Covered              
        bin auto[320:351]                                  12          1    Covered              
        bin auto[352:383]                                   4          1    Covered              
        bin auto[384:415]                                   0          1    ZERO                 
        bin auto[416:447]                                   4          1    Covered              
        bin auto[448:479]                                   2          1    Covered              
        bin auto[480:511]                                   2          1    Covered              
        bin auto[512:543]                                   2          1    Covered              
        bin auto[544:575]                                   2          1    Covered              
        bin auto[576:607]                                  12          1    Covered              
        bin auto[608:639]                                   6          1    Covered              
        bin auto[640:671]                                   2          1    Covered              
        bin auto[672:703]                                   2          1    Covered              
        bin auto[704:735]                                   8          1    Covered              
        bin auto[736:767]                                   0          1    ZERO                 
        bin auto[768:799]                                   4          1    Covered              
        bin auto[800:831]                                   4          1    Covered              
        bin auto[832:863]                                   6          1    Covered              
        bin auto[864:895]                                   0          1    ZERO                 
        bin auto[896:927]                                   0          1    ZERO                 
        bin auto[928:959]                                   2          1    Covered              
        bin auto[960:991]                                   4          1    Covered              
        bin auto[992:1023]                                  2          1    Covered              
        bin auto[1024:1055]                                 6          1    Covered              
        bin auto[1056:1087]                                 2          1    Covered              
        bin auto[1088:1119]                                 8          1    Covered              
        bin auto[1120:1151]                                 4          1    Covered              
        bin auto[1152:1183]                                 8          1    Covered              
        bin auto[1184:1215]                                 2          1    Covered              
        bin auto[1216:1247]                                 6          1    Covered              
        bin auto[1248:1279]                                 0          1    ZERO                 
        bin auto[1280:1311]                                 2          1    Covered              
        bin auto[1312:1343]                                 4          1    Covered              
        bin auto[1344:1375]                                 2          1    Covered              
        bin auto[1376:1407]                                 0          1    ZERO                 
        bin auto[1408:1439]                                 4          1    Covered              
        bin auto[1440:1471]                                 0          1    ZERO                 
        bin auto[1472:1503]                                 0          1    ZERO                 
        bin auto[1504:1535]                                 4          1    Covered              
        bin auto[1536:1567]                                 4          1    Covered              
        bin auto[1568:1599]                                 2          1    Covered              
        bin auto[1600:1631]                                 2          1    Covered              
        bin auto[1632:1663]                                 4          1    Covered              
        bin auto[1664:1695]                                 0          1    ZERO                 
        bin auto[1696:1727]                                 6          1    Covered              
        bin auto[1728:1759]                                 2          1    Covered              
        bin auto[1760:1791]                                 6          1    Covered              
        bin auto[1792:1823]                                 2          1    Covered              
        bin auto[1824:1855]                                 2          1    Covered              
        bin auto[1856:1887]                                 2          1    Covered              
        bin auto[1888:1919]                                 6          1    Covered              
        bin auto[1920:1951]                                 4          1    Covered              
        bin auto[1952:1983]                                 0          1    ZERO                 
        bin auto[1984:2015]                                 2          1    Covered              
        bin auto[2016:2047]                                 6          1    Covered              
    Cross rgb_cg::#cross__0#                            64.0%        100    Uncovered            
        covered/total bins:                                82        128                      
        missing/total bins:                                46        128                      
        % Hit:                                          64.0%        100                      
        type_option.weight=1
        type_option.goal=100
        type_option.comment=
        bin <auto[0:3],auto[0]>                             6          1    Covered              
        bin <auto[8:11],auto[0]>                            2          1    Covered              
        bin <auto[12:15],auto[0]>                           2          1    Covered              
        bin <auto[20:23],auto[0]>                           2          1    Covered              
        bin <auto[24:27],auto[0]>                           2          1    Covered              
        bin <auto[28:31],auto[0]>                           2          1    Covered              
        bin <auto[32:35],auto[0]>                           4          1    Covered              
        bin <auto[40:43],auto[0]>                           2          1    Covered              
        bin <auto[44:47],auto[0]>                           4          1    Covered              
        bin <auto[48:51],auto[0]>                           2          1    Covered              
        bin <auto[52:55],auto[0]>                           2          1    Covered              
        bin <auto[60:63],auto[0]>                          10          1    Covered              
        bin <auto[72:75],auto[0]>                           4          1    Covered              
        bin <auto[76:79],auto[0]>                           2          1    Covered              
        bin <auto[80:83],auto[0]>                           2          1    Covered              
        bin <auto[84:87],auto[0]>                           2          1    Covered              
        bin <auto[88:91],auto[0]>                           6          1    Covered              
        bin <auto[104:107],auto[0]>                         2          1    Covered              
        bin <auto[112:115],auto[0]>                         2          1    Covered              
        bin <auto[116:119],auto[0]>                         2          1    Covered              
        bin <auto[120:123],auto[0]>                         4          1    Covered              
        bin <auto[124:127],auto[0]>                         2          1    Covered              
        bin <auto[128:131],auto[0]>                         2          1    Covered              
        bin <auto[144:147],auto[0]>                         2          1    Covered              
        bin <auto[148:151],auto[0]>                         2          1    Covered              
        bin <auto[156:159],auto[0]>                         4          1    Covered              
        bin <auto[160:163],auto[0]>                         2          1    Covered              
        bin <auto[164:167],auto[0]>                         2          1    Covered              
        bin <auto[172:175],auto[0]>                         4          1    Covered              
        bin <auto[188:191],auto[0]>                         2          1    Covered              
        bin <auto[192:195],auto[0]>                         6          1    Covered              
        bin <auto[212:215],auto[0]>                         2          1    Covered              
        bin <auto[220:223],auto[0]>                         2          1    Covered              
        bin <auto[224:227],auto[0]>                         2          1    Covered              
        bin <auto[228:231],auto[0]>                         6          1    Covered              
        bin <auto[236:239],auto[0]>                         2          1    Covered              
        bin <auto[240:243],auto[0]>                         2          1    Covered              
        bin <auto[252:255],auto[0]>                         4          1    Covered              
        bin <auto[4:7],auto[1]>                             2          1    Covered              
        bin <auto[8:11],auto[1]>                            2          1    Covered              
        bin <auto[12:15],auto[1]>                           2          1    Covered              
        bin <auto[16:19],auto[1]>                           2          1    Covered              
        bin <auto[24:27],auto[1]>                           2          1    Covered              
        bin <auto[28:31],auto[1]>                           2          1    Covered              
        bin <auto[32:35],auto[1]>                           2          1    Covered              
        bin <auto[36:39],auto[1]>                           4          1    Covered              
        bin <auto[44:47],auto[1]>                           2          1    Covered              
        bin <auto[48:51],auto[1]>                           2          1    Covered              
        bin <auto[52:55],auto[1]>                           2          1    Covered              
        bin <auto[56:59],auto[1]>                           4          1    Covered              
        bin <auto[64:67],auto[1]>                           2          1    Covered              
        bin <auto[72:75],auto[1]>                           2          1    Covered              
        bin <auto[76:79],auto[1]>                           2          1    Covered              
        bin <auto[84:87],auto[1]>                           2          1    Covered              
        bin <auto[88:91],auto[1]>                           2          1    Covered              
        bin <auto[92:95],auto[1]>                           2          1    Covered              
        bin <auto[96:99],auto[1]>                           4          1    Covered              
        bin <auto[100:103],auto[1]>                         2          1    Covered              
        bin <auto[104:107],auto[1]>                         2          1    Covered              
        bin <auto[108:111],auto[1]>                         2          1    Covered              
        bin <auto[112:115],auto[1]>                         2          1    Covered              
        bin <auto[128:131],auto[1]>                         2          1    Covered              
        bin <auto[140:143],auto[1]>                         2          1    Covered              
        bin <auto[148:151],auto[1]>                         2          1    Covered              
        bin <auto[152:155],auto[1]>                         2          1    Covered              
        bin <auto[156:159],auto[1]>                         2          1    Covered              
        bin <auto[164:167],auto[1]>                         2          1    Covered              
        bin <auto[168:171],auto[1]>                         2          1    Covered              
        bin <auto[176:179],auto[1]>                         2          1    Covered              
        bin <auto[180:183],auto[1]>                         4          1    Covered              
        bin <auto[184:187],auto[1]>                         2          1    Covered              
        bin <auto[192:195],auto[1]>                         2          1    Covered              
        bin <auto[196:199],auto[1]>                         4          1    Covered              
        bin <auto[208:211],auto[1]>                         4          1    Covered              
        bin <auto[212:215],auto[1]>                         4          1    Covered              
        bin <auto[220:223],auto[1]>                         2          1    Covered              
        bin <auto[228:231],auto[1]>                         2          1    Covered              
        bin <auto[232:235],auto[1]>                         2          1    Covered              
        bin <auto[236:239],auto[1]>                         2          1    Covered              
        bin <auto[244:247],auto[1]>                         4          1    Covered              
        bin <auto[248:251],auto[1]>                         2          1    Covered              
        bin <auto[252:255],auto[1]>                         4          1    Covered              
        bin <auto[4:7],auto[0]>                             0          1    ZERO                 
        bin <auto[16:19],auto[0]>                           0          1    ZERO                 
        bin <auto[36:39],auto[0]>                           0          1    ZERO                 
        bin <auto[56:59],auto[0]>                           0          1    ZERO                 
        bin <auto[64:67],auto[0]>                           0          1    ZERO                 
        bin <auto[68:71],auto[0]>                           0          1    ZERO                 
        bin <auto[92:95],auto[0]>                           0          1    ZERO                 
        bin <auto[96:99],auto[0]>                           0          1    ZERO                 
        bin <auto[100:103],auto[0]>                         0          1    ZERO                 
        bin <auto[108:111],auto[0]>                         0          1    ZERO                 
        bin <auto[132:135],auto[0]>                         0          1    ZERO                 
        bin <auto[136:139],auto[0]>                         0          1    ZERO                 
        bin <auto[140:143],auto[0]>                         0          1    ZERO                 
        bin <auto[152:155],auto[0]>                         0          1    ZERO                 
        bin <auto[168:171],auto[0]>                         0          1    ZERO                 
        bin <auto[176:179],auto[0]>                         0          1    ZERO                 
        bin <auto[180:183],auto[0]>                         0          1    ZERO                 
        bin <auto[184:187],auto[0]>                         0          1    ZERO                 
        bin <auto[196:199],auto[0]>                         0          1    ZERO                 
        bin <auto[200:203],auto[0]>                         0          1    ZERO                 
        bin <auto[204:207],auto[0]>                         0          1    ZERO                 
        bin <auto[208:211],auto[0]>                         0          1    ZERO                 
        bin <auto[216:219],auto[0]>                         0          1    ZERO                 
        bin <auto[232:235],auto[0]>                         0          1    ZERO                 
        bin <auto[244:247],auto[0]>                         0          1    ZERO                 
        bin <auto[248:251],auto[0]>                         0          1    ZERO                 
        bin <auto[0:3],auto[1]>                             0          1    ZERO                 
        bin <auto[20:23],auto[1]>                           0          1    ZERO                 
        bin <auto[40:43],auto[1]>                           0          1    ZERO                 
        bin <auto[60:63],auto[1]>                           0          1    ZERO                 
        bin <auto[68:71],auto[1]>                           0          1    ZERO                 
        bin <auto[80:83],auto[1]>                           0          1    ZERO                 
        bin <auto[116:119],auto[1]>                         0          1    ZERO                 
        bin <auto[120:123],auto[1]>                         0          1    ZERO                 
        bin <auto[124:127],auto[1]>                         0          1    ZERO                 
        bin <auto[132:135],auto[1]>                         0          1    ZERO                 
        bin <auto[136:139],auto[1]>                         0          1    ZERO                 
        bin <auto[144:147],auto[1]>                         0          1    ZERO                 
        bin <auto[160:163],auto[1]>                         0          1    ZERO                 
        bin <auto[172:175],auto[1]>                         0          1    ZERO                 
        bin <auto[188:191],auto[1]>                         0          1    ZERO                 
        bin <auto[200:203],auto[1]>                         0          1    ZERO                 
        bin <auto[204:207],auto[1]>                         0          1    ZERO                 
        bin <auto[216:219],auto[1]>                         0          1    ZERO                 
        bin <auto[224:227],auto[1]>                         0          1    ZERO                 
        bin <auto[240:243],auto[1]>                         0          1    ZERO                 
 CLASS rgb_fc_subscriber

TOTAL COVERGROUP COVERAGE: 28.8%  COVERGROUP TYPES: 3

ASSERTION RESULTS:
-------------------------------------------------------
Name                 File(Line)           Failure Pass 
                                          Count   Count 
-------------------------------------------------------
/socTest_pkg/random_sequence_r2/body/random_loop/immed__201
                     ../modules/top.sv(201)       0     1
/socTest_pkg/rgb_test1/build_phase/#ublk#215236535#1179/immed__1182
                     ../modules/top.sv(1182)       0     1

Total Coverage By File (code coverage only, filtered view): 8.9%

