var g_sourceLines = [
'--05022019 [05-02-2019]',
'library ieee;',
'use ieee.std_logic_1164.all;',
'use ieee.numeric_std.all;',
'use work.constantspackage.all;',
'use work.vpfRecords.all;',
'use work.portspackage.all;',
'entity pointOfInterest is',
'generic (',
'    i_data_width   : integer := 8;',
'    s_data_width   : integer := 16;',
'    b_data_width   : integer := 32);',
'port (',
'    clk            : in std_logic;',
'    rst_l          : in std_logic;',
'    iCord          : in coord;',
'    endOfFrame     : in std_logic;',
'    pRegion        : in poi;',
'    iRgb           : in channel;',
'    oRgb           : out channel;',
'    gridLockDatao  : out std_logic_vector(b_data_width-1 downto 0);',
'    fifoStatus     : out std_logic_vector(b_data_width-1 downto 0);',
'    oGridLocation  : out std_logic);',
'end entity;',
'architecture arch of pointOfInterest is',
'    constant FIFO_ADDR_WIDTH :integer := 14;',
'    constant FIFO_DATA_WIDTH :integer := 24;',
'    constant FIFO_DEPTH :integer := 2**(FIFO_ADDR_WIDTH);--8192',
'    type fState is (idle,lockReady,fifoFullStatus,fifoEmptyStatus,waitForNewFrame,gridEnCheck);',
'    signal fifoControlState : fState;',
'    signal wrAddrsGlCtr     : integer := 0;',
'    signal GlEnable         : std_logic;',
'    signal rdData           : std_logic_vector(23 downto 0);',
'    signal wrDataIn         : std_logic_vector(23 downto 0);',
'    signal clearData        : std_logic;',
'    signal wrEn             : std_logic;',
'    signal wrLstEn          : std_logic;',
'    signal emptyO           : std_logic; ',
'    signal wrDone           : std_logic; ',
'    signal rdDone           : std_logic; ',
'    signal fullO            : std_logic;',
'    signal clrStatus        : std_logic;',
'    signal wrAddress        : std_logic_vector (FIFO_ADDR_WIDTH-1 downto 0); ',
'    signal wrAddr           : std_logic_vector (FIFO_ADDR_WIDTH-1 downto 0); ',
'    signal gridEn           : std_logic;    ',
'    signal fifoIsFull       : std_logic;',
'    signal fifoIsEmpty      : std_logic;',
'    signal gridContMax      : std_logic_vector (15 downto 0);',
'    signal pCont            : cord;    ',
'begin',
'    oGridLocation  &lt;= GlEnable;',
'    fifoStatus     &lt;= "00000000" &amp; gridContMax &amp; "00000" &amp; fifoIsFull &amp; fifoIsEmpty &amp; fifoIsFull;',
'    gridLockDatao  &lt;= x"00" &amp; rdData;',
'    wrAddress      &lt;= std_logic_vector(to_unsigned(wrAddrsGlCtr,FIFO_ADDR_WIDTH));',
'fifoControlP: process (clk) begin',
'if (rising_edge (clk)) then',
'    if (rst_l = lo) then',
'        fifoControlState &lt;= idle;',
'        gridEn           &lt;= lo;',
'        fifoIsFull       &lt;= lo;',
'        fifoIsEmpty      &lt;= lo;',
'        clrStatus        &lt;= hi;',
'    else',
'    case (fifoControlState) is',
'    when idle =&gt;',
'    --READY',
'        fifoIsFull   &lt;= lo;',
'        fifoIsEmpty  &lt;= hi;',
'        clrStatus    &lt;= lo;',
'        --Enable',
'        if (pRegion.cpuWgridLock = hi) then',
'            fifoControlState &lt;= waitForNewFrame;',
'        end if;',
'    when waitForNewFrame =&gt;',
'    --WAIT',
'        if (endOfFrame = hi) then',
'            fifoControlState &lt;= gridEnCheck;',
'        end if;',
'    when gridEnCheck =&gt;',
'        if (GlEnable = lo) then',
'            fifoControlState &lt;= lockReady;',
'            gridEn           &lt;= hi;',
'        end if;',
'    when lockReady =&gt;',
'    --CHECK',
'        fifoIsFull  &lt;= lo;',
'        fifoIsEmpty &lt;= lo;',
'        --WriteDone Pulse',
'        if (wrDone = hi) then',
'            fifoControlState &lt;= fifoFullStatus;',
'            gridEn           &lt;= lo;',
'        end if;',
'    when fifoFullStatus =&gt; ',
'    --CHECK',
'        fifoIsFull   &lt;= hi;--Full',
'        fifoIsEmpty  &lt;= lo;',
'        gridContMax &lt;= std_logic_vector(resize(unsigned(wrAddr), gridContMax\'length));',
'        --ReadDone Pulse',
'        if (rdDone = hi) then',
'            fifoControlState &lt;= fifoEmptyStatus;               ',
'        end if;',
'    when fifoEmptyStatus =&gt;',
'    --RESET',
'        fifoIsFull   &lt;= lo;',
'        fifoIsEmpty  &lt;= hi;',
'        if (pRegion.cpuAckGoAgain = hi) then',
'            fifoControlState &lt;= idle;',
'            clrStatus        &lt;= hi;',
'        end if;',
'    when others =&gt;',
'        fifoControlState &lt;= idle;',
'    end case;',
'    end if;',
'end if;',
'end process fifoControlP;  ',
'enablePointerP: process (clk)begin',
'    if rising_edge(clk) then',
'        wrDataIn  &lt;= (iRgb.red &amp; iRgb.green &amp; iRgb.blue);',
'        wrAddr    &lt;= wrAddress;',
'        if (((pCont.x &gt;= pRegion.pointInterest) and (pCont.x &lt;= pRegion.pointInterest + pInterestWidth)) and ((pCont.y &gt;= pRegion.pointInterest) and (pCont.y &lt;= pRegion.pointInterest + pInterestHight))) ',
'        and (iRgb.valid = hi) then',
'            GlEnable     &lt;= hi;',
'        else',
'            GlEnable     &lt;= lo;',
'        end if;',
'        wrLstEn       &lt;= not(gridEn);',
'        if (gridEn = hi and GlEnable = hi) then',
'            wrEn         &lt;= hi;',
'            wrAddrsGlCtr &lt;= wrAddrsGlCtr + 1;',
'        elsif (gridEn = hi and GlEnable = lo)then',
'            wrEn          &lt;= wrLstEn;',
'            wrAddrsGlCtr  &lt;= wrAddrsGlCtr;',
'        else',
'            wrEn          &lt;= lo;',
'            wrAddrsGlCtr  &lt;=  0;',
'        end if;',
'    end if;',
'end process enablePointerP;',
'gridLockFifoInt : gridLockFifo',
'generic map(',
'    FIFO_DEPTH      =&gt; FIFO_DEPTH,',
'    FIFO_DATA_WIDTH =&gt; FIFO_DATA_WIDTH,',
'    FIFO_ADDR_WIDTH =&gt; FIFO_ADDR_WIDTH)',
'port map(',
'    clk             =&gt; clk,',
'    clrStatus       =&gt; clrStatus,',
'    rdEn            =&gt; pRegion.fifoReadEnable,',
'    rdAddress       =&gt; pRegion.fifoReadAddress(FIFO_ADDR_WIDTH-1 downto 0),',
'    dataO           =&gt; rdData,',
'    wrEn            =&gt; wrEn,',
'    wrAddress       =&gt; wrAddr,',
'    dataIn          =&gt; wrDataIn,',
'    wrDone          =&gt; wrDone,',
'    rdDone          =&gt; rdDone,',
'    emptyO          =&gt; emptyO,',
'    fullO           =&gt; fullO);',
'--pipCordP: process (clk)begin',
'--    if rising_edge(clk) then',
'--        pCont.x      &lt;= to_integer((unsigned(iCord.x)));',
'--        pCont.y      &lt;= to_integer((unsigned(iCord.y)));',
'--    end if;',
'--end process pipCordP;',
'--pixelCordInt : pixelCord',
'--port map(',
'--    clk      =&gt; clk,',
'--    iRgb     =&gt; iRgb,',
'--    iPixelEn =&gt; GlEnable,',
'--    iEof     =&gt; endOfFrame,',
'--    iCord    =&gt; pCont,',
'--    oRgb     =&gt; oRgb);',
'end architecture;'
];
countinueBuildStmtTable(g_sourceLines);
