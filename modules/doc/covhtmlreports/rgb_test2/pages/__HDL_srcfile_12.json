var g_sourceLines = [
'--05012019 [05-01-2019]',
'library ieee;',
'use ieee.std_logic_1164.all;',
'use ieee.numeric_std.all;',
'use work.constantspackage.all;',
'use work.vpfRecords.all;',
'use work.portspackage.all;',
'entity frameProcess is',
'generic (',
'    i_data_width            : integer := 8;',
'    s_data_width            : integer := 16;',
'    b_data_width            : integer := 32;',
'    img_width               : integer := 256;',
'    adwrWidth               : integer := 16;',
'    addrWidth               : integer := 12);',
'port (',
'    clk                     : in std_logic;',
'    rst_l                   : in std_logic;',
'    iRgbSet                 : in rRgb;',
'    --cpu side in',
'    iRgbCoord               : in region;',
'    iPoiRegion              : in poi;',
'    iKls                    : in coefficient;',
'    iAls                    : in coefficient;',
'    iEdgeType               : in std_logic_vector(b_data_width-1 downto 0);',
'    iThreshold              : in std_logic_vector(s_data_width-1 downto 0); ',
'    --out',
'    oFrameData              : out fcolors;',
'    --to cpu',
'    oFifoStatus             : out std_logic_vector(b_data_width-1 downto 0);',
'    oGridLockData           : out std_logic_vector(b_data_width-1 downto 0));',
'end entity;',
'architecture arch of frameProcess is',
'    signal sharp            : channel;',
'    signal rgbV1Correct     : channel;',
'    signal rgbV2Correct     : channel;',
'    signal soble            : channel;',
'    signal rgbRemix         : channel;',
'    signal rgbPoi           : channel;',
'    signal blur1vx          : channel;',
'    signal blur2vx          : channel;',
'    signal blur3vx          : channel;',
'    signal blur4vx          : channel;',
'    signal rgbDetect        : channel;',
'    signal hsv              : hsvChannel;',
'    signal hsl              : hsvChannel;',
'    signal hsvCcBlur4vx     : hsvChannel;',
'    signal cord             : coord;',
'    signal syncxy           : coord;',
'    signal cordIn           : coord;',
'    signal rgbIn            : channel;',
'    signal rgbSum           : tpRgb;',
'    signal rgbDetectLock    : std_logic;',
'    signal rgbPoiLock       : std_logic;',
'    signal edgeValid        : std_logic;',
'    signal sValid           : std_logic;',
'begin',
'    oFrameData.hsl.red            &lt;= hsl.h;',
'    oFrameData.hsl.green          &lt;= hsl.s;',
'    oFrameData.hsl.blue           &lt;= hsl.v;',
'    oFrameData.hsl.valid          &lt;= hsl.valid;',
'    oFrameData.hsv.red            &lt;= hsv.h;',
'    oFrameData.hsv.green          &lt;= hsv.s;',
'    oFrameData.hsv.blue           &lt;= hsv.v;',
'    oFrameData.hsv.valid          &lt;= hsv.valid;',
'    oFrameData.hsvCcBl.red        &lt;= hsvCcBlur4vx.h;',
'    oFrameData.hsvCcBl.green      &lt;= hsvCcBlur4vx.s;',
'    oFrameData.hsvCcBl.blue       &lt;= hsvCcBlur4vx.v;',
'    oFrameData.hsvCcBl.valid      &lt;= hsvCcBlur4vx.valid;',
'    oFrameData.rgb.red            &lt;= iRgbSet.red;',
'    oFrameData.rgb.green          &lt;= iRgbSet.green;',
'    oFrameData.rgb.blue           &lt;= iRgbSet.blue;',
'    oFrameData.rgb.valid          &lt;= iRgbSet.valid;',
'    oFrameData.sharp              &lt;= sharp;',
'    oFrameData.blur1x             &lt;= blur1vx;',
'    oFrameData.blur2x             &lt;= blur2vx;',
'    oFrameData.blur3x             &lt;= blur3vx;',
'    oFrameData.blur4x             &lt;= blur4vx;',
'    oFrameData.rgbCorrect         &lt;= rgbV1Correct;',
'    oFrameData.soble              &lt;= soble;',
'    oFrameData.rgbRemix           &lt;= rgbRemix;',
'    oFrameData.rgbDetect          &lt;= rgbDetect;',
'    oFrameData.rgbPoi             &lt;= rgbPoi;',
'    oFrameData.rgbSum             &lt;= rgbSum;',
'    oFrameData.rgbDetectLock      &lt;= rgbDetectLock;',
'    oFrameData.rgbPoiLock         &lt;= rgbPoiLock;',
'    oFrameData.cod                &lt;= syncxy;',
'    oFrameData.pEof               &lt;= iRgbSet.pEof;',
'    oFrameData.pSof               &lt;= iRgbSet.pSof;',
'    rgbIn.red                     &lt;= iRgbSet.red;',
'    rgbIn.green                   &lt;= iRgbSet.green;',
'    rgbIn.blue                    &lt;= iRgbSet.blue;',
'    rgbIn.valid                   &lt;= iRgbSet.valid;',
'    cordIn.x                      &lt;= iRgbSet.cord.x;',
'    cordIn.y                      &lt;= iRgbSet.cord.y;',
'pipCoordP: process (clk) begin',
'    if rising_edge(clk) then',
'        syncxy          &lt;= cordIn;',
'        cord            &lt;= syncxy;',
'    end if;',
'end process pipCoordP;',
'colorCorrectionInst: colorCorrection',
'generic map(',
'    i_data_width        =&gt; i_data_width)',
'port map(           ',
'    clk                 =&gt; clk,',
'    rst_l               =&gt; rst_l,',
'    iRgb                =&gt; rgbIn,',
'    als                 =&gt; iAls,    ',
'    oRgb                =&gt; rgbV1Correct);',
'sobelFilterInst: sobelFilter',
'generic map(',
'    i_data_width        =&gt; i_data_width,',
'    img_width           =&gt; img_width,',
'    adwrWidth           =&gt; adwrWidth,',
'    addrWidth           =&gt; addrWidth)',
'port map(   ',
'    clk                 =&gt; clk,',
'    rst_l               =&gt; rst_l,',
'    iEdgeType           =&gt; iEdgeType,',
'    endOfFrame          =&gt; iRgbSet.pEof,',
'    iRgb                =&gt; rgbIn,',
'    threshold           =&gt; iThreshold,',
'    kls                 =&gt; iKls,',
'    oRgb                =&gt; soble,',
'    sValid              =&gt; sValid,',
'    edgeValid           =&gt; edgeValid);',
'edgeObjectsInst: edgeObjects',
'generic map(',
'    i_data_width        =&gt; i_data_width)',
'port map(   ',
'    clk                 =&gt; clk,',
'    rst_l               =&gt; rst_l,',
'    iRgb                =&gt; rgbIn,',
'    bRgb                =&gt; blur1vx,',
'    sRgb                =&gt; sharp,',
'    edgeValid           =&gt; edgeValid,',
'    sValid              =&gt; sValid,',
'    oRgbRemix           =&gt; rgbRemix);',
'sharpFilterInst: sharpFilter',
'generic map(',
'    i_data_width        =&gt; i_data_width,',
'    img_width           =&gt; img_width,',
'    adwrWidth           =&gt; adwrWidth,',
'    addrWidth           =&gt; addrWidth)',
'port map(   ',
'    clk                 =&gt; clk,',
'    rst_l               =&gt; rst_l,',
'    iRgb                =&gt; rgbIn,',
'    endOfFrame          =&gt; iRgbSet.pEof,',
'    kls                 =&gt; iKls,',
'    oRgb                =&gt; sharp);',
'blurFilter1xInst: blurFilter',
'generic map(',
'    iMSB                =&gt; blurMsb,',
'    iLSB                =&gt; blurLsb,',
'    i_data_width        =&gt; i_data_width,',
'    img_width           =&gt; img_width,',
'    adwrWidth           =&gt; adwrWidth,',
'    addrWidth           =&gt; addrWidth)',
'port map(',
'    clk                 =&gt; clk,',
'    rst_l               =&gt; rst_l,',
'    iRgb                =&gt; rgbIn,',
'    oRgb                =&gt; blur1vx);',
'blurFilter2xInst: blurFilter',
'generic map(',
'    iMSB                =&gt; blurMsb - 1,',
'    iLSB                =&gt; blurLsb - 1,',
'    i_data_width        =&gt; i_data_width,',
'    img_width           =&gt; img_width,',
'    adwrWidth           =&gt; adwrWidth,',
'    addrWidth           =&gt; addrWidth)',
'port map(',
'    clk                 =&gt; clk,',
'    rst_l               =&gt; rst_l,',
'    iRgb                =&gt; blur1vx,',
'    oRgb                =&gt; blur2vx);',
'blurFilter3xInst: blurFilter',
'generic map(',
'    iMSB                =&gt; blurMsb - 1,',
'    iLSB                =&gt; blurLsb - 1,',
'    i_data_width        =&gt; i_data_width,',
'    img_width           =&gt; img_width,',
'    adwrWidth           =&gt; adwrWidth,',
'    addrWidth           =&gt; addrWidth)',
'port map(',
'    clk                 =&gt; clk,',
'    rst_l               =&gt; rst_l,',
'    iRgb                =&gt; blur2vx,',
'    oRgb                =&gt; blur3vx);',
'blurFilter4xInst: blurFilter',
'generic map(',
'    iMSB                =&gt; blurMsb - 1,',
'    iLSB                =&gt; blurLsb - 1,',
'    i_data_width        =&gt; i_data_width,',
'    img_width           =&gt; img_width,',
'    adwrWidth           =&gt; adwrWidth,',
'    addrWidth           =&gt; addrWidth)',
'port map(',
'    clk                 =&gt; clk,',
'    rst_l               =&gt; rst_l,',
'    iRgb                =&gt; blur3vx,',
'    oRgb                =&gt; blur4vx);',
'colorCorrection1Inst: colorCorrection',
'generic map(',
'    i_data_width        =&gt; i_data_width)',
'port map(           ',
'    clk                 =&gt; clk,',
'    rst_l               =&gt; rst_l,',
'    iRgb                =&gt; blur4vx,',
'    als                 =&gt; iAls,    ',
'    oRgb                =&gt; rgbV2Correct);',
'hsv_blur4xInst: hsv_c',
'generic map(',
'    i_data_width        =&gt; i_data_width)',
'port map(   ',
'    clk                 =&gt; clk,',
'    reset               =&gt; rst_l,',
'    iRgb                =&gt; rgbV2Correct,',
'    oHsv                =&gt; hsvCcBlur4vx);',
'detectInst: detect',
'generic map(',
'    i_data_width        =&gt; i_data_width)',
'port map(',
'    clk                 =&gt; clk,',
'    rst_l               =&gt; rst_l,',
'    iRgb                =&gt; rgbIn,',
'    rgbCoord            =&gt; iRgbCoord,',
'    endOfFrame          =&gt; iRgbSet.pEof,',
'    iCord               =&gt; cord,',
'    pDetect             =&gt; rgbDetectLock,',
'    oRgb                =&gt; rgbDetect);',
'pointOfInterestInst: pointOfInterest',
'generic map(',
'    i_data_width        =&gt; i_data_width,',
'    s_data_width        =&gt; s_data_width,',
'    b_data_width        =&gt; b_data_width)',
'port map(',
'    clk                 =&gt; clk,',
'    rst_l               =&gt; rst_l,',
'    iRgb                =&gt; rgbIn,',
'    iCord               =&gt; cord,',
'    endOfFrame          =&gt; iRgbSet.pEof,',
'    gridLockDatao       =&gt; oGridLockData,',
'    pRegion             =&gt; iPoiRegion,',
'    fifoStatus          =&gt; oFifoStatus,',
'    oGridLocation       =&gt; rgbPoiLock,',
'    oRgb                =&gt; rgbPoi);',
'hslInst: hsl_c',
'generic map(',
'    i_data_width        =&gt; i_data_width)',
'port map(   ',
'    clk                 =&gt; clk,',
'    reset               =&gt; rst_l,',
'    iRgb                =&gt; rgbIn,',
'    oHsl                =&gt; hsl);',
'hsvInst: hsv_c',
'generic map(',
'    i_data_width        =&gt; i_data_width)',
'port map(   ',
'    clk                 =&gt; clk,',
'    reset               =&gt; rst_l,',
'    iRgb                =&gt; rgbIn,',
'    oHsv                =&gt; hsv);',
'-- frameTestPatternInst: frameTestPattern',
'-- generic map(',
'    -- s_data_width        =&gt; s_data_width)',
'-- port map(   ',
'    -- clk                 =&gt; clk,',
'    -- iValid              =&gt; rgbIn.valid,',
'    -- iCord               =&gt; cord,',
'    -- oRgb                =&gt; rgbSum);',
'end architecture;'
];
countinueBuildStmtTable(g_sourceLines);
