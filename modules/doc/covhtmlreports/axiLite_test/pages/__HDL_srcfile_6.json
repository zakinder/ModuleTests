var g_sourceLines = [
'--05012019 [05-01-2019]',
'library ieee;',
'use ieee.std_logic_1164.all;',
'use ieee.numeric_std.all;',
'use work.constantspackage.all;',
'use work.vpfRecords.all;',
'use work.portspackage.all;',
'entity dataTaps is',
'generic (',
'    img_width     : integer := 4096;',
'    dataWidth     : integer := 12;',
'    addrWidth     : integer := 12);',
'port (',
'    aclk          : in std_logic;',
'    iRawData      : in rData;',
'    oTpData       : out rTp);',
'end entity;',
'architecture arch of dataTaps is',
'    signal d1RawData    :  rData;',
'    signal d2RawData    :  rData;',
'	signal wChx0Valid   : std_logic_vector(3 downto 0) := (others =&gt; lo);',
'	signal wChx1Valid   : std_logic_vector(3 downto 0) := (others =&gt; lo);',
'	signal wChx2Valid   : std_logic_vector(3 downto 0) := (others =&gt; lo);',
'	signal wChx3Valid   : std_logic_vector(3 downto 0) := (others =&gt; lo);',
'    signal write_chs    : integer range 0 to 3;',
'    signal write_s      : std_logic;',
'    signal write_p      : std_logic;',
'    signal tap0_data    : std_logic_vector(dataWidth - 1 downto 0) := (others =&gt; lo);',
'    signal tap1_data    : std_logic_vector(dataWidth - 1 downto 0) := (others =&gt; lo);',
'    signal tap2_data    : std_logic_vector(dataWidth - 1 downto 0) := (others =&gt; lo);',
'    signal tap3_data    : std_logic_vector(dataWidth - 1 downto 0) := (others =&gt; lo);',
'    ',
'begin',
'',
'write_p         &lt;= hi when (write_s = hi and iRawData.valid = lo) else lo;',
'wChx0Valid(ch0) &lt;= hi when (write_chs = ch0 and iRawData.valid = hi)  else lo;',
'wChx0Valid(ch1) &lt;= hi when (write_chs = ch1 and iRawData.valid = hi)  else lo;',
'wChx0Valid(ch2) &lt;= hi when (write_chs = ch2 and iRawData.valid = hi)  else lo;',
'wChx0Valid(ch3) &lt;= hi when (write_chs = ch3 and iRawData.valid = hi)  else lo;',
'oTpData.valid &lt;= hi when (wChx3Valid(ch0) = hi or wChx3Valid(ch1) = hi or wChx3Valid(ch2) = hi or wChx3Valid(ch3) = hi)  else lo;',
'',
'pipValidP: process (aclk) begin',
'    if (rising_edge(aclk)) then',
'        write_s &lt;= iRawData.valid;',
'    end if;',
'end process pipValidP;',
'selChP: process (aclk) begin',
'    if (rising_edge(aclk) ) then',
'        if (write_p = hi) then',
'            if (write_chs = ch3) then',
'                write_chs &lt;= ch0;',
'            else',
'                write_chs &lt;= write_chs + 1;',
'            end if;',
'        end if;',
'    end if;',
'end process selChP;',
'pipValidChP: process (aclk) begin',
'    if (rising_edge(aclk) ) then',
'        d1RawData     &lt;= iRawData;',
'        d2RawData     &lt;= d1RawData;',
'        oTpData.pEof  &lt;= d2RawData.pEof;',
'        oTpData.pSof  &lt;= d2RawData.pSof;',
'        oTpData.cord  &lt;= d2RawData.cord;',
'        wChx1Valid    &lt;= wChx0Valid;',
'        wChx2Valid    &lt;= wChx1Valid;',
'        wChx3Valid    &lt;= wChx2Valid;',
'    end if;',
'end process pipValidChP;',
'',
'tap1ReadOutP: process(aclk) begin',
'    if (rising_edge(aclk) ) then',
'        if(wChx0Valid(ch0) = hi or wChx1Valid(ch0) = hi or wChx2Valid(ch0) = hi or wChx3Valid(ch0) = hi) then',
'            oTpData.taps.tp1 &lt;= tap1_data;',
'            oTpData.taps.tp2 &lt;= tap2_data;',
'            oTpData.taps.tp3 &lt;= tap3_data;',
'        elsif(wChx0Valid(ch1) = hi or wChx1Valid(ch1) = hi or wChx2Valid(ch1) = hi or wChx3Valid(ch1) = hi) then',
'            oTpData.taps.tp1 &lt;= tap2_data;',
'            oTpData.taps.tp2 &lt;= tap3_data;',
'            oTpData.taps.tp3 &lt;= tap0_data;',
'        elsif(wChx0Valid(ch2) = hi or wChx1Valid(ch2) = hi or wChx2Valid(ch2) = hi or wChx3Valid(ch2) = hi) then',
'            oTpData.taps.tp1 &lt;= tap3_data;',
'            oTpData.taps.tp2 &lt;= tap0_data;',
'            oTpData.taps.tp3 &lt;= tap1_data;',
'        elsif(wChx0Valid(ch3) = hi or wChx1Valid(ch3) = hi or wChx2Valid(ch3) = hi or wChx3Valid(ch3) = hi) then',
'            oTpData.taps.tp1 &lt;= tap0_data; ',
'            oTpData.taps.tp2 &lt;= tap1_data; ',
'            oTpData.taps.tp3 &lt;= tap2_data;		',
'        else',
'            oTpData.taps.tp1 &lt;= (others =&gt; lo);',
'            oTpData.taps.tp2 &lt;= (others =&gt; lo);',
'            oTpData.taps.tp3 &lt;= (others =&gt; lo);',
'        end if;',
'    end if;',
'end process tap1ReadOutP;',
'lineD0Inst: tap_buffer',
'generic map(',
'    img_width    =&gt; img_width,',
'    dataWidth    =&gt; dataWidth,',
'    addrWidth    =&gt; addrWidth)',
'port map(',
'    write_clk =&gt; aclk, ',
'    write_enb =&gt; wChx0Valid(ch0),',
'    w_address =&gt; iRawData.cord.x(addrWidth -1 downto 0),',
'    idata     =&gt; iRawData.data,',
'    read_clk  =&gt; aclk, ',
'    r_address =&gt; iRawData.cord.x(addrWidth -1 downto 0),',
'    odata     =&gt; tap0_data);',
'lineD1Inst: tap_buffer',
'generic map(',
'    img_width    =&gt; img_width,',
'    dataWidth    =&gt; dataWidth,',
'    addrWidth    =&gt; addrWidth)',
'port map(',
'    write_clk =&gt; aclk, ',
'    write_enb =&gt; wChx0Valid(ch1),',
'    w_address =&gt; iRawData.cord.x(addrWidth -1 downto 0),',
'    idata     =&gt; iRawData.data,',
'    read_clk  =&gt; aclk, ',
'    r_address =&gt; iRawData.cord.x(addrWidth -1 downto 0),',
'    odata     =&gt; tap1_data);    ',
'lineD2Inst: tap_buffer',
'generic map(',
'    img_width    =&gt; img_width,',
'    dataWidth    =&gt; dataWidth,',
'    addrWidth    =&gt; addrWidth)',
'port map(',
'    write_clk  =&gt; aclk, ',
'    write_enb  =&gt; wChx0Valid(ch2),',
'    w_address  =&gt; iRawData.cord.x(addrWidth -1 downto 0),',
'    idata      =&gt; iRawData.data,',
'    read_clk   =&gt; aclk, ',
'    r_address  =&gt; iRawData.cord.x(addrWidth -1 downto 0),',
'    odata      =&gt; tap2_data);',
'lineD3Inst: tap_buffer',
'generic map(',
'    img_width    =&gt; img_width,',
'    dataWidth    =&gt; dataWidth,',
'    addrWidth    =&gt; addrWidth)',
'port map(',
'    write_clk  =&gt; aclk,',
'    write_enb  =&gt; wChx0Valid(ch3),',
'    w_address  =&gt; iRawData.cord.x(addrWidth -1 downto 0),',
'    idata      =&gt; iRawData.data,',
'    read_clk   =&gt; aclk, ',
'    r_address  =&gt; iRawData.cord.x(addrWidth -1 downto 0),',
'    odata      =&gt; tap3_data);',
'end architecture;'
];
countinueBuildStmtTable(g_sourceLines);
